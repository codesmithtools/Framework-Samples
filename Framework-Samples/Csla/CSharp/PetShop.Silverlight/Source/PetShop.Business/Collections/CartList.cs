//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.2, CSLA Templates: v3.0.0.1817, CSLA Framework: v4.0.0.
//       Changes to this template will not be lost.
//
//     Template: EditableChildList.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Collections.Generic;
using Csla;

#endregion

namespace PetShop.Business
{
    public partial class CartList
    {
        #region Authorization Rules

        protected void AddAuthorizationRules()
        {
            //Csla.Rules.BusinessRules.AddRule(typeof(CartList), new Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.CreateObject, "SomeRole"));
            //Csla.Rules.BusinessRules.AddRule(typeof(CartList), new Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.EditObject, "SomeRole"));
            //Csla.Rules.BusinessRules.AddRule(typeof(CartList), new Csla.Rules.CommonRules.IsInRole(Csla.Rules.AuthorizationActions.DeleteObject, "SomeRole", "SomeAdminRole"));
        }
        #endregion

        #region Custom Factory Methods

#if !SILVERLIGHT

        internal static CartList GetCart(int uniqueID, bool isShoppingCart)
        {
            CartList list = null;

            try
            {
                list = DataPortal.FetchChild<CartList>(new CartCriteria {UniqueID = uniqueID, IsShoppingCart = isShoppingCart});
            }
            catch (Exception)
            {
                list = CartList.NewList();
            }

            return list;
        }

#else

        internal static void GetCartAsync(int uniqueID, bool isShoppingCart, EventHandler<Csla.DataPortalResult<CartList>> handler)
        {
            DataPortal.BeginFetch<CartList>(new CartCriteria { UniqueID = uniqueID, IsShoppingCart = isShoppingCart }, (o, e) => handler(null, e));
        }

#endif

        #endregion

        #region Properties

        /// <summary>
        /// Calculate the total for all the Items in the Cart.
        /// </summary>
        public decimal Total
        {
            get
            {
                decimal total = 0;
                foreach (Cart cart in this)
                    total += cart.Price*cart.Quantity;

                return total;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Update the quantity for item that exists in the cart.
        /// </summary>
        /// <param name="itemId">Item Id</param>
        /// <param name="quantity">Quantity</param>
        public void SetQuantity(string itemId, int quantity)
        {
            int index = 0;
            foreach (Cart cart in this)
            {
                if (cart.ItemId == itemId)
                    break;

                index++;
            }

            this[index].Quantity = quantity;
        }

        /// <summary>
        /// Add an item to the cart.
        /// When ItemId to be added has already existed, this method will update the quantity instead.
        /// </summary>
        /// <param name="itemId">Item to add</param>
        /// <param name="uniqueID">Cart's Unique ID</param>
        /// <param name="isShoppingCart">Cart is a shopping cart.</param>
        public void Add(string itemId, int uniqueID, bool isShoppingCart)
        {
            Add(itemId, uniqueID, isShoppingCart, 1);
        }
        /// <summary>
        /// Add an item to the cart.
        /// When ItemId to be added has already existed, this method will update the quantity instead.
        /// </summary>
        /// <param name="itemId">Item to add</param>
        /// <param name="uniqueID">Cart's Unique ID</param>
        /// <param name="isShoppingCart">Cart is a shopping cart.</param>
        /// <param name="quantity">Item Quanitity</param>
        public void Add(string itemId, int uniqueID, bool isShoppingCart, int quantity)
        {
            int index = 0;
            bool found = false;

            foreach (Cart cart in this)
            {
                if (cart.ItemId == itemId)
                {
                    found = true;
                    break;
                }

                index++;
            }

            if (found)
                Items[index].Quantity += quantity;
            else
            {
#if !SILVERLIGHT
                Item item = Item.GetByItemId(itemId);
                Product product = Product.GetByProductId(item.ProductId);
                Cart cart = Cart.NewCart();
                cart.UniqueID = uniqueID;
                cart.ItemId = itemId;
                cart.Name = item.Name;
                cart.ProductId = item.ProductId;
                cart.IsShoppingCart = isShoppingCart;
                cart.Price = item.ListPrice ?? item.UnitCost ?? 0;
                cart.Type = product.Name;
                cart.CategoryId = product.CategoryId;
                cart.Quantity = quantity;

                Add(cart);
#else
                Item.GetByItemIdAsync(itemId, (o, e) =>
                {
                    if (e.Error == null) return;

                    Item item = e.Object;
                    Product.GetByProductIdAsync(item.ProductId, (o1, e1) =>
                        {
                            Product product = e1.Object;

                            Cart.NewCartAsync((o2, e2) =>
                                {
                                    Cart cart = e2.Object;

                                    cart.UniqueID = uniqueID;
                                    cart.ItemId = itemId;
                                    cart.Name = item.Name;
                                    cart.ProductId = item.ProductId;
                                    cart.IsShoppingCart = isShoppingCart;
                                    cart.Price = item.ListPrice ?? item.UnitCost ?? 0;
                                    cart.Type = product.Name;
                                    cart.CategoryId = product.CategoryId;
                                    cart.Quantity = quantity;

                                    Add(cart);
                                });

                        });
                });

#endif
            }
        }

        /// <summary>
        /// Remove item from the cart based on itemId.
        /// </summary>
        /// <param name="itemId">ItemId of item to remove</param>
        public void Remove(string itemId)
        {
            int index = 0;
            foreach (Cart cart in this)
            {
                if (cart.ItemId == itemId)
                    break;

                index++;
            }

            RemoveItem(index);
        }

        /// <summary>
        /// Method to convert all cart items to order line items
        /// </summary>
        public void SaveOrderLineItems(int orderId)
        {
            int lineNum = 0;

            foreach (Cart item in this)
            {
#if !SILVERLIGHT
                LineItem lineItem = LineItem.NewLineItem();
                lineItem.OrderId = orderId;
                lineItem.ItemId = item.ItemId;
                lineItem.LineNum = ++lineNum;
                lineItem.Quantity = item.Quantity;
                lineItem.UnitPrice = item.Price;

                lineItem = lineItem.Save();

#else
                LineItem.NewLineItemAsync((o, e) =>
                    {
                        if (e.Error == null) return;

                        LineItem lineItem = e.Object;
                        lineItem.OrderId = orderId;
                        lineItem.ItemId = item.ItemId;
                        lineItem.LineNum = ++lineNum;
                        lineItem.Quantity = item.Quantity;
                        lineItem.UnitPrice = item.Price;

                        lineItem.BeginSave();
                    });
                
#endif
            }
        }

        #endregion
    }
}