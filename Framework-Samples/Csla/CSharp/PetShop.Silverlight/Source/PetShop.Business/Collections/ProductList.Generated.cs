//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Product.cs'.
//
//     Template: DynamicRootList.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
#endif

#endregion

namespace PetShop.Business
{
    [Serializable]
    public partial class ProductList : DynamicBindingListBase< Product >
    {
        #region Constructor(s)
#if !SILVERLIGHT
        private ProductList()
        { 
            AllowNew = true;
        }
#else
        public ProductList()
        { 
            AllowNew = true;
        }
#endif
        
        #endregion

#if !SILVERLIGHT
        #region Method Overrides

        protected override object AddNewCore()
        {
            Product item = PetShop.Business.Product.NewProduct();

            bool cancel = false;
            OnAddNewCore(ref item, ref cancel);
            if (!cancel)
            {
                // Check to see if someone set the item to null in the OnAddNewCore.
                if(item == null)
                    item = PetShop.Business.Product.NewProduct();

                Add(item);
            }

            return item;
        }
        
        #endregion

        #region Synchronous Factory Methods 
        
        public static ProductList NewList()
        {
            return DataPortal.Create< ProductList >();
        }

        public static ProductList GetAll()
        {
            return DataPortal.Fetch< ProductList>(new ProductCriteria());
        }


        public static ProductList GetByProductId(System.String productId)
        {
            var criteria = new ProductCriteria{ProductId = productId};
            
        
            return DataPortal.Fetch< ProductList >(criteria);
        }

        public static ProductList GetByName(System.String name)
        {
            var criteria = new ProductCriteria{Name = name};
            
        
            return DataPortal.Fetch< ProductList >(criteria);
        }

        public static ProductList GetByCategoryId(System.String categoryId)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId};
            
        
            return DataPortal.Fetch< ProductList >(criteria);
        }

        public static ProductList GetByCategoryIdName(System.String categoryId, System.String name)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId, Name = name};
            
        
            return DataPortal.Fetch< ProductList >(criteria);
        }

        public static ProductList GetByCategoryIdProductIdName(System.String categoryId, System.String productId, System.String name)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId, ProductId = productId, Name = name};
            
        
            return DataPortal.Fetch< ProductList >(criteria);
        }
        #endregion
        
#else

        #region Method Overrides

        protected override void AddNewCore()
        {
            PetShop.Business.Product.NewProductAsync((o, e) =>
                {
                    Product item = e.Object;
                    
                    bool cancel = false;
                    OnAddNewCore(ref item, ref cancel);
                    if (!cancel)
                    {
                        // Check to see if someone set the item to null in the OnAddNewCore.
                        if(item != null)
                            Add(item);
                    }
                });
        }
        
        #endregion
#endif

        #region Asynchronous Factory Methods

#if SILVERLIGHT
        public static void NewListAsync(EventHandler<DataPortalResult<ProductList>> handler)
        {
            var dp = new DataPortal<ProductList>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }

        public static void GetByProductIdAsync(System.String productId, EventHandler<DataPortalResult<ProductList>> handler)
        {
             var criteria = new ProductCriteria{ProductId = productId};
            
            var dp = new DataPortal< ProductList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetByNameAsync(System.String name, EventHandler<DataPortalResult<ProductList>> handler)
        {
             var criteria = new ProductCriteria{Name = name};
            
            var dp = new DataPortal< ProductList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetByCategoryIdAsync(System.String categoryId, EventHandler<DataPortalResult<ProductList>> handler)
        {
             var criteria = new ProductCriteria{CategoryId = categoryId};
            
            var dp = new DataPortal< ProductList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetByCategoryIdNameAsync(System.String categoryId, System.String name, EventHandler<DataPortalResult<ProductList>> handler)
        {
             var criteria = new ProductCriteria{CategoryId = categoryId, Name = name};
            
            var dp = new DataPortal< ProductList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetByCategoryIdProductIdNameAsync(System.String categoryId, System.String productId, System.String name, EventHandler<DataPortalResult<ProductList>> handler)
        {
             var criteria = new ProductCriteria{CategoryId = categoryId, ProductId = productId, Name = name};
            
            var dp = new DataPortal< ProductList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }
        
        public static void GetAllAsync(EventHandler<DataPortalResult<ProductList>> handler)
        {
            var dp = new DataPortal< ProductList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(new ProductCriteria());
        }
#endif
        
        #endregion

        #region DataPortal partial methods

#if !SILVERLIGHT
        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(ProductCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnMapping(SafeDataReader reader, ref bool cancel);
        partial void OnMapped();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
#endif
        partial void OnAddNewCore(ref Product item, ref bool cancel);

        #endregion

        #region Exists Command

#if !SILVERLIGHT
        public static bool Exists(ProductCriteria criteria)
        {
            return PetShop.Business.Product.Exists(criteria);
        }

#else

        public static void Exists(ProductCriteria criteria, EventHandler<DataPortalResult<ExistsCommand>> handler)
        {
            PetShop.Business.Product.Exists(criteria,handler);
        }

#endif
        #endregion

    }
}