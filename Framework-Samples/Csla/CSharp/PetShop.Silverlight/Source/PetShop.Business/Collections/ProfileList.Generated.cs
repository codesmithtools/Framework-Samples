//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'ProfileList.cs'.
//
//     Template: EditableRootList.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
#endif

#endregion

namespace PetShop.Business
{
    [Serializable]
    public partial class ProfileList : BusinessListBase< ProfileList, Profile >
    {    
        #region Contructor(s)

#if !SILVERLIGHT
        private ProfileList()
        { 
            AllowNew = true;
        }
#else
        public ProfileList()
        { 
            AllowNew = true;
        }
#endif
        
        #endregion

#if !SILVERLIGHT
        #region Method Overrides
        
        protected override Profile AddNewCore()
        {
            Profile item = PetShop.Business.Profile.NewProfile();

            bool cancel = false;
            OnAddNewCore(ref item, ref cancel);
            if (!cancel)
            {
                // Check to see if someone set the item to null in the OnAddNewCore.
                if(item == null)
                    item = PetShop.Business.Profile.NewProfile();


                Add(item);
            }

            return item;
        }
        
        #endregion

        #region Synchronous Factory Methods 
        
        public static ProfileList NewList()
        {
            return DataPortal.Create< ProfileList >();
        }      

        public static ProfileList GetByUniqueID(System.Int32 uniqueID)
        {
            var criteria = new ProfileCriteria{UniqueID = uniqueID};
            
            
            return DataPortal.Fetch< ProfileList >(criteria);
        }

        public static ProfileList GetByUsernameApplicationName(System.String username, System.String applicationName)
        {
            var criteria = new ProfileCriteria{Username = username, ApplicationName = applicationName};
            
            
            return DataPortal.Fetch< ProfileList >(criteria);
        }

        public static ProfileList GetAll()
        {
            return DataPortal.Fetch< ProfileList >(new ProfileCriteria());
        }

        #endregion
#else
        #region Method Overrides

        protected override void AddNewCore()
        {
            PetShop.Business.Profile.NewProfileAsync((o, e) =>
                {
                    Profile item = e.Object;

                    bool cancel = false;
                    OnAddNewCore(ref item, ref cancel);
                    if (!cancel)
                    {
                        // Check to see if someone set the item to null in the OnAddNewCore.
                        if(item == null)
                            return;
                        Add(item);
                    }
                });
        }
        
        #endregion

        #region Asynchronous Factory Methods
        
        public static void NewListAsync(EventHandler<DataPortalResult<ProfileList>> handler)
        {
            var dp = new DataPortal<ProfileList>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }


        public static void GetByUniqueIDAsync(System.Int32 uniqueID, EventHandler<DataPortalResult<ProfileList>> handler)
        {
            var criteria = new ProfileCriteria{UniqueID = uniqueID};
            
            var dp = new DataPortal< ProfileList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetByUsernameApplicationNameAsync(System.String username, System.String applicationName, EventHandler<DataPortalResult<ProfileList>> handler)
        {
            var criteria = new ProfileCriteria{Username = username, ApplicationName = applicationName};
            
            var dp = new DataPortal< ProfileList >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetAllAsync(EventHandler<DataPortalResult<ProfileList>> handler)
        {
            var dp = new DataPortal<ProfileList>();
            dp.FetchCompleted += handler;
            dp.BeginFetch(new ProfileCriteria());
        }

        #endregion
#endif

        #region DataPortal partial methods

#if !SILVERLIGHT
        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(ProfileCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnMapping(SafeDataReader reader, ref bool cancel);
        partial void OnMapped();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
#endif
        partial void OnAddNewCore(ref Profile item, ref bool cancel);

        #endregion

        #region Exists Command

#if !SILVERLIGHT
        public static bool Exists(ProfileCriteria criteria)
        {
            return PetShop.Business.Profile.Exists(criteria);
        }

#else

        public static void Exists(ProfileCriteria criteria, EventHandler<DataPortalResult<ExistsCommand>> handler)
        {
            PetShop.Business.Profile.Exists(criteria,handler);
        }

#endif
        #endregion

    }
}