//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//
//     Template: ExistsCommand.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

#if SILVERLIGHT

using Csla;
using Csla.Core;
using Csla.Serialization;
using Csla.Serialization.Mobile;

#else

using System.Data.SqlClient;

using Csla;
using Csla.Core;
using Csla.Data;
using Csla.Serialization.Mobile;

#endif

#endregion

namespace PetShop.Business
{
    [Serializable]
    public class ExistsCommand : CommandBase<ExistsCommand>
    {
        #region Constructor(s)

#if SILVERLIGHT

        public ExistsCommand()
        {
        }

#else


        private ExistsCommand()
        {
        }

#endif

        #endregion

        #region Authorization Methods

        public static bool CanExecuteCommand()
        {
            return true;
        }

        #endregion

        #region Synchronous Factory Methods 

#if !SILVERLIGHT
        public static bool Execute<T>(T criteria) where T : PetShop.Business.IGeneratedCriteria
        {
            if (!CanExecuteCommand())
                throw new System.Security.SecurityException("Not authorized to execute command");

            var cmd = new ExistsCommand();
            cmd.BeforeServer(criteria);
            cmd = DataPortal.Execute(cmd);
            cmd.AfterServer();

            return cmd.Result;
        }
#endif  

        #endregion

        #region Asynchronous Factory Methods

#if SILVERLIGHT
        public static void Execute<T>(T criteria, EventHandler<DataPortalResult<ExistsCommand>> handler) where T : PetShop.Business.IGeneratedCriteria
        {
            if (!CanExecuteCommand())
                throw new System.Security.SecurityException("Not authorized to execute command");

            var cmd = new ExistsCommand();
            cmd.BeforeServer(criteria);
            
            var dp = new DataPortal<ExistsCommand>();
            dp.ExecuteCompleted += handler;
            dp.BeginExecute(cmd);
        }
#endif  
        
        #endregion

        #region Client-side Code

        private PetShop.Business.IGeneratedCriteria Criteria { get; set; }
        public bool Result { get; private set; }

        private void BeforeServer(PetShop.Business.IGeneratedCriteria criteria)
        {
            Criteria = criteria;
            Result = false;
        }

        private void AfterServer()
        {
        }

        #endregion

        #region Data Access

#if !SILVERLIGHT
        protected override void DataPortal_Execute()
        {
            string commandText = string.Format("SELECT COUNT(1) FROM {0} {1}", Criteria.TableFullName, ADOHelper.BuildWhereStatement(Criteria.StateBag));
            using (SqlConnection connection = new SqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(Criteria.StateBag));
                    Result = (int)command.ExecuteScalar() > 0;
                }
            }
        }
#endif

        #endregion


        #region Serialization

        protected override void OnGetState(SerializationInfo info, StateMode mode)
        {
            base.OnGetState(info, mode);
            info.AddValue("Result", Result);
        }

        protected override void OnSetState(SerializationInfo info, StateMode mode)
        {
            base.OnSetState(info, mode);
            Result = info.GetValue<bool>("Result");
        }

        protected override void OnGetChildren(SerializationInfo info, MobileFormatter formatter)
        {
            var serializedCriteria = formatter.SerializeObject(Criteria);
            info.AddChild("Criteria", 2);
        }

        protected override void OnSetChildren(SerializationInfo info, MobileFormatter formatter)
        {
            var criteriaData = info.Children["Criteria"];
            Criteria = (IGeneratedCriteria)formatter.GetObject(criteriaData.ReferenceId);
        }
        
        #endregion
    }
}