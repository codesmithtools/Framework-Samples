//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Profile.cs'.
//
//     Template: Criteria.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

using Csla.Core;
#if SILVERLIGHT
using Csla.Serialization;
#endif
using Csla.Serialization.Mobile;

#if !SILVERLIGHT
using System.Data.SqlClient;
#endif

using Csla;

#endregion

namespace PetShop.Business
{
    [Serializable]
    public partial class ProfileCriteria : CriteriaBase<ProfileCriteria>, IGeneratedCriteria
    {
        #region Private Read-Only Members
        
        private readonly Dictionary<string, object> _bag = new Dictionary<string, object>();
        
        #endregion
        
        #region Constructors

        public ProfileCriteria(){}

        public ProfileCriteria(System.Int32 uniqueID)
        {
            UniqueID = uniqueID;
        }
        
        #endregion
        
        #region Public Properties
        
        #region Read-Write

        public System.Int32 UniqueID
        {
            get { return GetValue< System.Int32 >("UniqueID"); }
            set { _bag["UniqueID"] = value; }
        }

        public System.String Username
        {
            get { return GetValue< System.String >("Username"); }
            set { _bag["Username"] = value; }
        }

        public System.String ApplicationName
        {
            get { return GetValue< System.String >("ApplicationName"); }
            set { _bag["ApplicationName"] = value; }
        }

        public System.Boolean? IsAnonymous
        {
            get { return GetValue< System.Boolean? >("IsAnonymous"); }
            set { _bag["IsAnonymous"] = value; }
        }

        public System.DateTime? LastActivityDate
        {
            get { return GetValue< System.DateTime? >("LastActivityDate"); }
            set { _bag["LastActivityDate"] = value; }
        }

        public System.DateTime? LastUpdatedDate
        {
            get { return GetValue< System.DateTime? >("LastUpdatedDate"); }
            set { _bag["LastUpdatedDate"] = value; }
        }

        #endregion
        
        #region Read-Only

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public Dictionary<string, object> StateBag
        {
            get
            {
                return _bag;
            }
        }

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public string TableFullName
        {
            get
            {
                return "[dbo].Profiles";
            }
        }

        #endregion

        #endregion

        #region Overrides
        
        public override string ToString()
        {
            var result = string.Empty;
            var cancel = false;
            
            OnToString(ref result, ref cancel);
            if(cancel && !string.IsNullOrEmpty(result))
                return result;
            
            if (_bag.Count == 0)
                return "No criterion was specified.";

            foreach (KeyValuePair<string, object> key in _bag)
            {
                result += string.Format("[{0}] = '{1}' AND ", key.Key, key.Value);
            }

            return result.Remove(result.Length - 5, 5);
        }

        #endregion

        #region Private Methods
        
        private T GetValue<T>(string name)
        {
            object value;
            if (_bag.TryGetValue(name, out value))
                return (T) value;
        
            return default(T);
        }
        
        #endregion
        
        #region Partial Methods
        
        partial void OnToString(ref string result, ref bool cancel);
        
        #endregion
        
        #region Serialization
        
        protected override void OnGetState(SerializationInfo info, StateMode mode)
        {
            base.OnGetState(info, mode);
            if (_bag.ContainsKey("UniqueID")) info.AddValue("UniqueID", GetValue< System.Int32 >("UniqueID"));
            if (_bag.ContainsKey("Username")) info.AddValue("Username", GetValue< System.String >("Username"));
            if (_bag.ContainsKey("ApplicationName")) info.AddValue("ApplicationName", GetValue< System.String >("ApplicationName"));
            if (_bag.ContainsKey("IsAnonymous")) info.AddValue("IsAnonymous", GetValue< System.Boolean? >("IsAnonymous"));
            if (_bag.ContainsKey("LastActivityDate")) info.AddValue("LastActivityDate", GetValue< System.DateTime? >("LastActivityDate"));
            if (_bag.ContainsKey("LastUpdatedDate")) info.AddValue("LastUpdatedDate", GetValue< System.DateTime? >("LastUpdatedDate"));
        }

        protected override void OnSetState(SerializationInfo info, StateMode mode)
        {
            base.OnSetState(info, mode);
            if(info.Values.ContainsKey("UniqueID")) _bag["UniqueID"] = info.GetValue< System.Int32 >("UniqueID");
            if(info.Values.ContainsKey("Username")) _bag["Username"] = info.GetValue< System.String >("Username");
            if(info.Values.ContainsKey("ApplicationName")) _bag["ApplicationName"] = info.GetValue< System.String >("ApplicationName");
            if(info.Values.ContainsKey("IsAnonymous")) _bag["IsAnonymous"] = info.GetValue< System.Boolean? >("IsAnonymous");
            if(info.Values.ContainsKey("LastActivityDate")) _bag["LastActivityDate"] = info.GetValue< System.DateTime? >("LastActivityDate");
            if(info.Values.ContainsKey("LastUpdatedDate")) _bag["LastUpdatedDate"] = info.GetValue< System.DateTime? >("LastUpdatedDate");
        }

        #endregion
    }
}