//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Inventory.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Rules;
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
#endif

#endregion

namespace PetShop.Business
{
    [Serializable]
    public partial class Inventory : BusinessBase< Inventory >
    {
        #region Contructor(s)

#if !SILVERLIGHT
        private Inventory()
        { /* Require use of factory methods */ }
#else
    public Inventory()
        { /* Require use of factory methods */ }
#endif

        internal Inventory(System.String itemId)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_itemIdProperty, itemId);
            }
        }

#if !SILVERLIGHT
        internal Inventory(SafeDataReader reader)
        {
            Map(reader);
        }
#endif
        #endregion

        #region Business Rules

        protected override void AddBusinessRules()
        {
            if(AddBusinessValidationRules())
                return;

            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_itemIdProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_itemIdProperty, 10));
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo< System.String > _itemIdProperty = RegisterProperty< System.String >(p => p.ItemId, string.Empty);
#if !SILVERLIGHT
		[System.ComponentModel.DataObjectField(true, false)]
#endif
        public System.String ItemId
        {
            get { return GetProperty(_itemIdProperty); }
            set{ SetProperty(_itemIdProperty, value); }
        }

        private static readonly PropertyInfo< System.String > _originalItemIdProperty = RegisterProperty< System.String >(p => p.OriginalItemId, string.Empty);
        /// <summary>
        /// Holds the original value for ItemId. This is used for non identity primary keys.
        /// </summary>
        internal System.String OriginalItemId
        {
            get { return GetProperty(_originalItemIdProperty); }
            set{ SetProperty(_originalItemIdProperty, value); }
        }
        private static readonly PropertyInfo< System.Int32 > _qtyProperty = RegisterProperty< System.Int32 >(p => p.Qty, string.Empty);
        public System.Int32 Qty
        {
            get { return GetProperty(_qtyProperty); }
            set{ SetProperty(_qtyProperty, value); }
        }

        #endregion

#if !SILVERLIGHT
        #region Synchronous Factory Methods 

        public static Inventory NewInventory()
        {
            return DataPortal.Create< Inventory >();
        }

        public static Inventory GetByItemId(System.String itemId)
        {
            var criteria = new InventoryCriteria {ItemId = itemId};
            
            
            return DataPortal.Fetch< Inventory >(criteria);
        }

        public static void DeleteInventory(System.String itemId)
        {
            var criteria = new InventoryCriteria {ItemId = itemId};
            
            
            DataPortal.Delete< Inventory >(criteria);
        }

        #endregion
#endif

        #region Asynchronous Factory Methods

#if SILVERLIGHT
        public static void NewInventoryAsync(EventHandler<DataPortalResult<Inventory>> handler)
        {
            var dp = new DataPortal<Inventory>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }

        public static void GetByItemIdAsync(System.String itemId, EventHandler<DataPortalResult< Inventory >> handler)
        {
            var criteria = new InventoryCriteria{ ItemId = itemId};
            
            
            var dp = new DataPortal< Inventory >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void DeleteInventoryAsync(System.String itemId, EventHandler<DataPortalResult<Inventory>> handler)
        {
            var criteria = new InventoryCriteria{ItemId = itemId};
            
            
            var dp = new DataPortal< Inventory >();
            dp.DeleteCompleted += handler;
            dp.BeginDelete(criteria);
        }
#endif
        
        #endregion

        #region DataPortal partial methods

#if !SILVERLIGHT
        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(InventoryCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnMapping(SafeDataReader reader, ref bool cancel);
        partial void OnMapped();
        partial void OnInserting(ref bool cancel);
        partial void OnInserted();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
        partial void OnSelfDeleting(ref bool cancel);
        partial void OnSelfDeleted();
        partial void OnDeleting(InventoryCriteria criteria, ref bool cancel);
        partial void OnDeleted();
#endif
        partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion

        #region Exists Command
#if !SILVERLIGHT

        public static bool Exists(InventoryCriteria criteria)
        {
            return PetShop.Business.ExistsCommand.Execute(criteria);
        }

#else

        public static void Exists(InventoryCriteria criteria, EventHandler<DataPortalResult<ExistsCommand>> handler)
        {
            PetShop.Business.ExistsCommand.Execute(criteria, handler);
        }

#endif

        #endregion

    }
}