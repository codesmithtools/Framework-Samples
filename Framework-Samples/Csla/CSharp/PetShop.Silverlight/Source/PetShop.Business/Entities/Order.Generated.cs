//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Order.cs'.
//
//     Template: SwitchableObject.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Rules;
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
using System.Data.SqlClient;
#endif

#endregion

namespace PetShop.Business
{
    [Serializable]
    public partial class Order : BusinessBase< Order >
    {
        #region Contructor(s)

#if !SILVERLIGHT
        private Order()
        { /* Require use of factory methods */ }
#else
    public Order()
        { /* Require use of factory methods */ }
#endif

        internal Order(System.Int32 orderId)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_orderIdProperty, orderId);
            }
        }

#if !SILVERLIGHT
        internal Order(SafeDataReader reader)
        {
            Map(reader);
            MarkAsChild();  
        }
#endif
        #endregion

        #region Business Rules

        protected override void AddBusinessRules()
        {
            if(AddBusinessValidationRules())
                return;

            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_userIdProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_userIdProperty, 20));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_shipAddr1Property));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipAddr1Property, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipAddr2Property, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_shipCityProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipCityProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_shipStateProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipStateProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_shipZipProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipZipProperty, 20));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_shipCountryProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipCountryProperty, 20));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_billAddr1Property));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billAddr1Property, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billAddr2Property, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_billCityProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billCityProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_billStateProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billStateProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_billZipProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billZipProperty, 20));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_billCountryProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billCountryProperty, 20));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_courierProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_courierProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_billToFirstNameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billToFirstNameProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_billToLastNameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_billToLastNameProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_shipToFirstNameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipToFirstNameProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_shipToLastNameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_shipToLastNameProperty, 80));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_localeProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_localeProperty, 20));
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo< System.Int32 > _orderIdProperty = RegisterProperty< System.Int32 >(p => p.OrderId, string.Empty);
#if !SILVERLIGHT
		[System.ComponentModel.DataObjectField(true, true)]
#endif
        public System.Int32 OrderId
        {
            get { return GetProperty(_orderIdProperty); }
            internal set{ SetProperty(_orderIdProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _userIdProperty = RegisterProperty< System.String >(p => p.UserId, string.Empty);
        public System.String UserId
        {
            get { return GetProperty(_userIdProperty); }
            set{ SetProperty(_userIdProperty, value); }
        }
        private static readonly PropertyInfo< System.DateTime > _orderDateProperty = RegisterProperty< System.DateTime >(p => p.OrderDate, string.Empty);
        public System.DateTime OrderDate
        {
            get { return GetProperty(_orderDateProperty); }
            set{ SetProperty(_orderDateProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _shipAddr1Property = RegisterProperty< System.String >(p => p.ShipAddr1, string.Empty);
        public System.String ShipAddr1
        {
            get { return GetProperty(_shipAddr1Property); }
            set{ SetProperty(_shipAddr1Property, value); }
        }
        private static readonly PropertyInfo< System.String > _shipAddr2Property = RegisterProperty< System.String >(p => p.ShipAddr2, string.Empty, (System.String)null);
        public System.String ShipAddr2
        {
            get { return GetProperty(_shipAddr2Property); }
            set{ SetProperty(_shipAddr2Property, value); }
        }
        private static readonly PropertyInfo< System.String > _shipCityProperty = RegisterProperty< System.String >(p => p.ShipCity, string.Empty);
        public System.String ShipCity
        {
            get { return GetProperty(_shipCityProperty); }
            set{ SetProperty(_shipCityProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _shipStateProperty = RegisterProperty< System.String >(p => p.ShipState, string.Empty);
        public System.String ShipState
        {
            get { return GetProperty(_shipStateProperty); }
            set{ SetProperty(_shipStateProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _shipZipProperty = RegisterProperty< System.String >(p => p.ShipZip, string.Empty);
        public System.String ShipZip
        {
            get { return GetProperty(_shipZipProperty); }
            set{ SetProperty(_shipZipProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _shipCountryProperty = RegisterProperty< System.String >(p => p.ShipCountry, string.Empty);
        public System.String ShipCountry
        {
            get { return GetProperty(_shipCountryProperty); }
            set{ SetProperty(_shipCountryProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _billAddr1Property = RegisterProperty< System.String >(p => p.BillAddr1, string.Empty);
        public System.String BillAddr1
        {
            get { return GetProperty(_billAddr1Property); }
            set{ SetProperty(_billAddr1Property, value); }
        }
        private static readonly PropertyInfo< System.String > _billAddr2Property = RegisterProperty< System.String >(p => p.BillAddr2, string.Empty, (System.String)null);
        public System.String BillAddr2
        {
            get { return GetProperty(_billAddr2Property); }
            set{ SetProperty(_billAddr2Property, value); }
        }
        private static readonly PropertyInfo< System.String > _billCityProperty = RegisterProperty< System.String >(p => p.BillCity, string.Empty);
        public System.String BillCity
        {
            get { return GetProperty(_billCityProperty); }
            set{ SetProperty(_billCityProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _billStateProperty = RegisterProperty< System.String >(p => p.BillState, string.Empty);
        public System.String BillState
        {
            get { return GetProperty(_billStateProperty); }
            set{ SetProperty(_billStateProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _billZipProperty = RegisterProperty< System.String >(p => p.BillZip, string.Empty);
        public System.String BillZip
        {
            get { return GetProperty(_billZipProperty); }
            set{ SetProperty(_billZipProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _billCountryProperty = RegisterProperty< System.String >(p => p.BillCountry, string.Empty);
        public System.String BillCountry
        {
            get { return GetProperty(_billCountryProperty); }
            set{ SetProperty(_billCountryProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _courierProperty = RegisterProperty< System.String >(p => p.Courier, string.Empty);
        public System.String Courier
        {
            get { return GetProperty(_courierProperty); }
            set{ SetProperty(_courierProperty, value); }
        }
        private static readonly PropertyInfo< System.Decimal > _totalPriceProperty = RegisterProperty< System.Decimal >(p => p.TotalPrice, string.Empty);
        public System.Decimal TotalPrice
        {
            get { return GetProperty(_totalPriceProperty); }
            set{ SetProperty(_totalPriceProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _billToFirstNameProperty = RegisterProperty< System.String >(p => p.BillToFirstName, string.Empty);
        public System.String BillToFirstName
        {
            get { return GetProperty(_billToFirstNameProperty); }
            set{ SetProperty(_billToFirstNameProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _billToLastNameProperty = RegisterProperty< System.String >(p => p.BillToLastName, string.Empty);
        public System.String BillToLastName
        {
            get { return GetProperty(_billToLastNameProperty); }
            set{ SetProperty(_billToLastNameProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _shipToFirstNameProperty = RegisterProperty< System.String >(p => p.ShipToFirstName, string.Empty);
        public System.String ShipToFirstName
        {
            get { return GetProperty(_shipToFirstNameProperty); }
            set{ SetProperty(_shipToFirstNameProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _shipToLastNameProperty = RegisterProperty< System.String >(p => p.ShipToLastName, string.Empty);
        public System.String ShipToLastName
        {
            get { return GetProperty(_shipToLastNameProperty); }
            set{ SetProperty(_shipToLastNameProperty, value); }
        }
        private static readonly PropertyInfo< System.Int32 > _authorizationNumberProperty = RegisterProperty< System.Int32 >(p => p.AuthorizationNumber, string.Empty);
        public System.Int32 AuthorizationNumber
        {
            get { return GetProperty(_authorizationNumberProperty); }
            set{ SetProperty(_authorizationNumberProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _localeProperty = RegisterProperty< System.String >(p => p.Locale, string.Empty);
        public System.String Locale
        {
            get { return GetProperty(_localeProperty); }
            set{ SetProperty(_localeProperty, value); }
        }
        //AssociatedOneToMany
        private static readonly PropertyInfo< LineItemList > _lineItemsProperty = RegisterProperty<LineItemList>(p => p.LineItems, Csla.RelationshipTypes.Child);
        public LineItemList LineItems
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_lineItemsProperty, ref cancel);
    
                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_lineItemsProperty))
                    {
#if SILVERLIGHT
                        //MarkBusy();
                        var criteria = new PetShop.Business.LineItemCriteria {OrderId = OrderId};
                        

                        if((true))
                        {
                            PetShop.Business.LineItemList.Exists(criteria,(o,e) =>
                            {
                                if (e.Error != null)
                                    throw e.Error;

                                if(!e.Object.Result)
                                PetShop.Business.LineItemList.NewListAsync((o1, e1) =>
                                {
                                    if (e1.Error != null)
                                        throw e1.Error; 

                                    this.LoadProperty(_lineItemsProperty, e1.Object);

                                    //MarkIdle();
                                    OnPropertyChanged(_lineItemsProperty);
                                });
                                else
                                PetShop.Business.LineItemList.GetByOrderIdAsync(OrderId, (o2, e2) =>
                                {
                                    if (e2.Error != null)
                                        throw e2.Error; 

                                    this.LoadProperty(_lineItemsProperty, e2.Object);

                                    //MarkIdle();
                                    OnPropertyChanged(_lineItemsProperty);
                                });
                            });
                        }
#else
                        var criteria = new PetShop.Business.LineItemCriteria {OrderId = OrderId};
                        
    
                        if(!PetShop.Business.LineItemList.Exists(criteria))
                            LoadProperty(_lineItemsProperty, PetShop.Business.LineItemList.NewList());
                        else
                            LoadProperty(_lineItemsProperty, PetShop.Business.LineItemList.GetByOrderId(OrderId));
#endif
                    }
                }

                return GetProperty(_lineItemsProperty);
            }
        }

        //AssociatedOneToMany
        private static readonly PropertyInfo< OrderStatusList > _orderStatusesProperty = RegisterProperty<OrderStatusList>(p => p.OrderStatuses, Csla.RelationshipTypes.Child);
        public OrderStatusList OrderStatuses
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_orderStatusesProperty, ref cancel);
    
                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_orderStatusesProperty))
                    {
#if SILVERLIGHT
                        //MarkBusy();
                        var criteria = new PetShop.Business.OrderStatusCriteria {OrderId = OrderId};
                        

                        if((true))
                        {
                            PetShop.Business.OrderStatusList.Exists(criteria,(o,e) =>
                            {
                                if (e.Error != null)
                                    throw e.Error;

                                if(!e.Object.Result)
                                PetShop.Business.OrderStatusList.NewListAsync((o1, e1) =>
                                {
                                    if (e1.Error != null)
                                        throw e1.Error; 

                                    this.LoadProperty(_orderStatusesProperty, e1.Object);

                                    //MarkIdle();
                                    OnPropertyChanged(_orderStatusesProperty);
                                });
                                else
                                PetShop.Business.OrderStatusList.GetByOrderIdAsync(OrderId, (o2, e2) =>
                                {
                                    if (e2.Error != null)
                                        throw e2.Error; 

                                    this.LoadProperty(_orderStatusesProperty, e2.Object.Child);

                                    //MarkIdle();
                                    OnPropertyChanged(_orderStatusesProperty);
                                });
                            });
                        }
#else
                        var criteria = new PetShop.Business.OrderStatusCriteria {OrderId = OrderId};
                        
    
                        if(!PetShop.Business.OrderStatusList.Exists(criteria))
                            LoadProperty(_orderStatusesProperty, PetShop.Business.OrderStatusList.NewList());
                        else
                            LoadProperty(_orderStatusesProperty, PetShop.Business.OrderStatusList.GetByOrderId(OrderId));
#endif
                    }
                }

                return GetProperty(_orderStatusesProperty);
            }
        }


        #endregion

#if !SILVERLIGHT
        #region Synchronous Root Factory Methods 
        
        public static Order NewOrder()
        {
            return DataPortal.Create< Order >();
        }

        public static Order GetByOrderId(System.Int32 orderId)
        {
            var criteria = new OrderCriteria {OrderId = orderId};
            
            
            return DataPortal.Fetch< Order >(criteria);
        }

        public static void DeleteOrder(System.Int32 orderId)
        {
                DataPortal.Delete< Order >(new OrderCriteria (orderId));
        }
        
        #endregion
#endif        

        #region Asynchronous Root Factory Methods
        
        public static void NewOrderAsync(EventHandler<DataPortalResult<Order>> handler)
        {
            var dp = new DataPortal< Order >();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }

        public static void GetByOrderIdAsync(System.Int32 orderId, EventHandler<DataPortalResult<Order>> handler)
        {
            var criteria = new OrderCriteria{OrderId = orderId};
            

            var dp = new DataPortal< Order >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void DeleteOrderAsync(System.Int32 orderId, EventHandler<DataPortalResult<Order>> handler)
        {
            var criteria = new OrderCriteria{OrderId = orderId};
            

            var dp = new DataPortal< Order >();
            dp.DeleteCompleted += handler;
            dp.BeginDelete(criteria);
        }
        
        #endregion

#if !SILVERLIGHT

        #region Synchronous Child Factory Methods 
        
        internal static Order NewOrderChild()
        {
            return DataPortal.CreateChild< Order >();
        }

        internal static Order GetByOrderIdChild(System.Int32 orderId)
        {
            var criteria = new OrderCriteria {OrderId = orderId};
            

            return DataPortal.FetchChild< Order >(criteria);
        }

        #endregion
#endif        

        #region Asynchronous Child Factory Methods
        
        internal static void NewOrderChildAsync(EventHandler<DataPortalResult<Order>> handler)
        {
            DataPortal<Order> dp = new DataPortal<Order>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }

        internal static void GetByOrderIdChildAsync(System.Int32 orderId, EventHandler<DataPortalResult<Order>> handler)
        {
            var criteria = new OrderCriteria{ OrderId = orderId};
            
            
            // Mark as child?
            var dp = new DataPortal< Order >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        #endregion
        #region DataPortal partial methods

#if !SILVERLIGHT
        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(OrderCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnMapping(SafeDataReader reader, ref bool cancel);
        partial void OnMapped();
        partial void OnInserting(ref bool cancel);
        partial void OnInserted();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
        partial void OnSelfDeleting(ref bool cancel);
        partial void OnSelfDeleted();
        partial void OnDeleting(OrderCriteria criteria, ref bool cancel);
        partial void OnDeleted();
#endif
        partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion

        #region ChildPortal partial methods

#if !SILVERLIGHT
        partial void OnChildCreating(ref bool cancel);
        partial void OnChildCreated();
        partial void OnChildFetching(OrderCriteria criteria, ref bool cancel);
        partial void OnChildFetched();
        partial void OnChildInserting(SqlConnection connection, ref bool cancel);
        partial void OnChildInserted();
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel);
        partial void OnChildUpdated();
        partial void OnChildSelfDeleting(ref bool cancel);
        partial void OnChildSelfDeleted();
#endif
        #endregion

        #region Exists Command
#if !SILVERLIGHT

        public static bool Exists(OrderCriteria criteria)
        {
            return PetShop.Business.ExistsCommand.Execute(criteria);
        }

#else

        public static void Exists(OrderCriteria criteria, EventHandler<DataPortalResult<ExistsCommand>> handler)
        {
            PetShop.Business.ExistsCommand.Execute(criteria, handler);
        }

#endif

        #endregion

    }
}