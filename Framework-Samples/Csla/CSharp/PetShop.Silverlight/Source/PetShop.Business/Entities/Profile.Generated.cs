//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Profile.cs'.
//
//     Template: SwitchableObject.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Rules;
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
using System.Data.SqlClient;
#endif

#endregion

namespace PetShop.Business
{
    [Serializable]
    public partial class Profile : BusinessBase< Profile >
    {
        #region Contructor(s)

#if !SILVERLIGHT
        private Profile()
        { /* Require use of factory methods */ }
#else
    public Profile()
        { /* Require use of factory methods */ }
#endif

        internal Profile(System.Int32 uniqueID)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_uniqueIDProperty, uniqueID);
            }
        }

#if !SILVERLIGHT
        internal Profile(SafeDataReader reader)
        {
            Map(reader);
            MarkAsChild();  
        }
#endif
        #endregion

        #region Business Rules

        protected override void AddBusinessRules()
        {
            if(AddBusinessValidationRules())
                return;

            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_usernameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_usernameProperty, 256));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_applicationNameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_applicationNameProperty, 256));
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo< System.Int32 > _uniqueIDProperty = RegisterProperty< System.Int32 >(p => p.UniqueID, string.Empty);
#if !SILVERLIGHT
		[System.ComponentModel.DataObjectField(true, true)]
#endif
        public System.Int32 UniqueID
        {
            get { return GetProperty(_uniqueIDProperty); }
            internal set{ SetProperty(_uniqueIDProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _usernameProperty = RegisterProperty< System.String >(p => p.Username, string.Empty);
        public System.String Username
        {
            get { return GetProperty(_usernameProperty); }
            set{ SetProperty(_usernameProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _applicationNameProperty = RegisterProperty< System.String >(p => p.ApplicationName, string.Empty);
        public System.String ApplicationName
        {
            get { return GetProperty(_applicationNameProperty); }
            set{ SetProperty(_applicationNameProperty, value); }
        }
        private static readonly PropertyInfo< System.Boolean? > _isAnonymousProperty = RegisterProperty< System.Boolean? >(p => p.IsAnonymous, string.Empty, (System.Boolean?)null);
        public System.Boolean? IsAnonymous
        {
            get { return GetProperty(_isAnonymousProperty); }
            set{ SetProperty(_isAnonymousProperty, value); }
        }
        private static readonly PropertyInfo< System.DateTime? > _lastActivityDateProperty = RegisterProperty< System.DateTime? >(p => p.LastActivityDate, string.Empty, (System.DateTime?)null);
        public System.DateTime? LastActivityDate
        {
            get { return GetProperty(_lastActivityDateProperty); }
            set{ SetProperty(_lastActivityDateProperty, value); }
        }
        private static readonly PropertyInfo< System.DateTime? > _lastUpdatedDateProperty = RegisterProperty< System.DateTime? >(p => p.LastUpdatedDate, string.Empty, (System.DateTime?)null);
        public System.DateTime? LastUpdatedDate
        {
            get { return GetProperty(_lastUpdatedDateProperty); }
            set{ SetProperty(_lastUpdatedDateProperty, value); }
        }
        //AssociatedOneToMany
        private static readonly PropertyInfo< AccountList > _accountsProperty = RegisterProperty<AccountList>(p => p.Accounts, Csla.RelationshipTypes.Child);
        public AccountList Accounts
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_accountsProperty, ref cancel);
    
                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_accountsProperty))
                    {
#if SILVERLIGHT
                        //MarkBusy();
                        var criteria = new PetShop.Business.AccountCriteria {UniqueID = UniqueID};
                        

                        if((true))
                        {
                            PetShop.Business.AccountList.Exists(criteria,(o,e) =>
                            {
                                if (e.Error != null)
                                    throw e.Error;

                                if(!e.Object.Result)
                                PetShop.Business.AccountList.NewListAsync((o1, e1) =>
                                {
                                    if (e1.Error != null)
                                        throw e1.Error; 

                                    this.LoadProperty(_accountsProperty, e1.Object);

                                    //MarkIdle();
                                    OnPropertyChanged(_accountsProperty);
                                });
                                else
                                PetShop.Business.AccountList.GetByUniqueIDAsync(UniqueID, (o2, e2) =>
                                {
                                    if (e2.Error != null)
                                        throw e2.Error; 

                                    this.LoadProperty(_accountsProperty, e2.Object.Child);

                                    //MarkIdle();
                                    OnPropertyChanged(_accountsProperty);
                                });
                            });
                        }
#else
                        var criteria = new PetShop.Business.AccountCriteria {UniqueID = UniqueID};
                        
    
                        if(!PetShop.Business.AccountList.Exists(criteria))
                            LoadProperty(_accountsProperty, PetShop.Business.AccountList.NewList());
                        else
                            LoadProperty(_accountsProperty, PetShop.Business.AccountList.GetByUniqueID(UniqueID));
#endif
                    }
                }

                return GetProperty(_accountsProperty);
            }
        }

        //AssociatedOneToMany
        private static readonly PropertyInfo< CartList > _cartsProperty = RegisterProperty<CartList>(p => p.Carts, Csla.RelationshipTypes.Child);
        public CartList Carts
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_cartsProperty, ref cancel);
    
                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_cartsProperty))
                    {
#if SILVERLIGHT
                        //MarkBusy();
                        var criteria = new PetShop.Business.CartCriteria {UniqueID = UniqueID};
                        

                        if((true))
                        {
                            PetShop.Business.CartList.Exists(criteria,(o,e) =>
                            {
                                if (e.Error != null)
                                    throw e.Error;

                                if(!e.Object.Result)
                                PetShop.Business.CartList.NewListAsync((o1, e1) =>
                                {
                                    if (e1.Error != null)
                                        throw e1.Error; 

                                    this.LoadProperty(_cartsProperty, e1.Object);

                                    //MarkIdle();
                                    OnPropertyChanged(_cartsProperty);
                                });
                                else
                                PetShop.Business.CartList.GetByUniqueIDAsync(UniqueID, (o2, e2) =>
                                {
                                    if (e2.Error != null)
                                        throw e2.Error; 

                                    this.LoadProperty(_cartsProperty, e2.Object.Child);

                                    //MarkIdle();
                                    OnPropertyChanged(_cartsProperty);
                                });
                            });
                        }
#else
                        var criteria = new PetShop.Business.CartCriteria {UniqueID = UniqueID};
                        
    
                        if(!PetShop.Business.CartList.Exists(criteria))
                            LoadProperty(_cartsProperty, PetShop.Business.CartList.NewList());
                        else
                            LoadProperty(_cartsProperty, PetShop.Business.CartList.GetByUniqueID(UniqueID));
#endif
                    }
                }

                return GetProperty(_cartsProperty);
            }
        }


        #endregion

#if !SILVERLIGHT
        #region Synchronous Root Factory Methods 
        
        public static Profile NewProfile()
        {
            return DataPortal.Create< Profile >();
        }

        public static Profile GetByUniqueID(System.Int32 uniqueID)
        {
            var criteria = new ProfileCriteria {UniqueID = uniqueID};
            
            
            return DataPortal.Fetch< Profile >(criteria);
        }

        public static Profile GetByUsernameApplicationName(System.String username, System.String applicationName)
        {
            var criteria = new ProfileCriteria {Username = username, ApplicationName = applicationName};
            
            
            return DataPortal.Fetch< Profile >(criteria);
        }

        public static void DeleteProfile(System.Int32 uniqueID)
        {
                DataPortal.Delete< Profile >(new ProfileCriteria (uniqueID));
        }
        
        #endregion
#endif        

        #region Asynchronous Root Factory Methods
        
        public static void NewProfileAsync(EventHandler<DataPortalResult<Profile>> handler)
        {
            var dp = new DataPortal< Profile >();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }

        public static void GetByUniqueIDAsync(System.Int32 uniqueID, EventHandler<DataPortalResult<Profile>> handler)
        {
            var criteria = new ProfileCriteria{UniqueID = uniqueID};
            

            var dp = new DataPortal< Profile >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void GetByUsernameApplicationNameAsync(System.String username, System.String applicationName, EventHandler<DataPortalResult<Profile>> handler)
        {
            var criteria = new ProfileCriteria{Username = username, ApplicationName = applicationName};
            

            var dp = new DataPortal< Profile >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        public static void DeleteProfileAsync(System.Int32 uniqueID, EventHandler<DataPortalResult<Profile>> handler)
        {
            var criteria = new ProfileCriteria{UniqueID = uniqueID};
            

            var dp = new DataPortal< Profile >();
            dp.DeleteCompleted += handler;
            dp.BeginDelete(criteria);
        }
        
        #endregion

#if !SILVERLIGHT

        #region Synchronous Child Factory Methods 
        
        internal static Profile NewProfileChild()
        {
            return DataPortal.CreateChild< Profile >();
        }

        internal static Profile GetByUniqueIDChild(System.Int32 uniqueID)
        {
            var criteria = new ProfileCriteria {UniqueID = uniqueID};
            

            return DataPortal.FetchChild< Profile >(criteria);
        }

        internal static Profile GetByUsernameApplicationNameChild(System.String username, System.String applicationName)
        {
            var criteria = new ProfileCriteria {Username = username, ApplicationName = applicationName};
            

            return DataPortal.FetchChild< Profile >(criteria);
        }

        #endregion
#endif        

        #region Asynchronous Child Factory Methods
        
        internal static void NewProfileChildAsync(EventHandler<DataPortalResult<Profile>> handler)
        {
            DataPortal<Profile> dp = new DataPortal<Profile>();
            dp.CreateCompleted += handler;
            dp.BeginCreate();
        }

        internal static void GetByUniqueIDChildAsync(System.Int32 uniqueID, EventHandler<DataPortalResult<Profile>> handler)
        {
            var criteria = new ProfileCriteria{ UniqueID = uniqueID};
            
            
            // Mark as child?
            var dp = new DataPortal< Profile >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        internal static void GetByUsernameApplicationNameChildAsync(System.String username, System.String applicationName, EventHandler<DataPortalResult<Profile>> handler)
        {
            var criteria = new ProfileCriteria{ Username = username, ApplicationName = applicationName};
            
            
            // Mark as child?
            var dp = new DataPortal< Profile >();
            dp.FetchCompleted += handler;
            dp.BeginFetch(criteria);
        }

        #endregion
        #region DataPortal partial methods

#if !SILVERLIGHT
        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(ProfileCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnMapping(SafeDataReader reader, ref bool cancel);
        partial void OnMapped();
        partial void OnInserting(ref bool cancel);
        partial void OnInserted();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
        partial void OnSelfDeleting(ref bool cancel);
        partial void OnSelfDeleted();
        partial void OnDeleting(ProfileCriteria criteria, ref bool cancel);
        partial void OnDeleted();
#endif
        partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion

        #region ChildPortal partial methods

#if !SILVERLIGHT
        partial void OnChildCreating(ref bool cancel);
        partial void OnChildCreated();
        partial void OnChildFetching(ProfileCriteria criteria, ref bool cancel);
        partial void OnChildFetched();
        partial void OnChildInserting(SqlConnection connection, ref bool cancel);
        partial void OnChildInserted();
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel);
        partial void OnChildUpdated();
        partial void OnChildSelfDeleting(ref bool cancel);
        partial void OnChildSelfDeleted();
#endif
        #endregion

        #region Exists Command
#if !SILVERLIGHT

        public static bool Exists(ProfileCriteria criteria)
        {
            return PetShop.Business.ExistsCommand.Execute(criteria);
        }

#else

        public static void Exists(ProfileCriteria criteria, EventHandler<DataPortalResult<ExistsCommand>> handler)
        {
            PetShop.Business.ExistsCommand.Execute(criteria, handler);
        }

#endif

        #endregion

    }
}