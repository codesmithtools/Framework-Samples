//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Profile.cs'.
//
//     Template: SwitchableObject.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;

using Csla;
using Csla.Rules;
using Csla.Data;
using System.Data.SqlClient;

#endregion

namespace PetShop.Tests.ObjF.StoredProcedures
{
    [Serializable]
    [Csla.Server.ObjectFactory(FactoryNames.ProfileFactoryName)]
    public partial class Profile : BusinessBase< Profile >
    {
        #region Contructor(s)

        private Profile()
        { /* Require use of factory methods */ }

        internal Profile(System.Int32 uniqueID)
        {
            using(BypassPropertyChecks)
            {
                LoadProperty(_uniqueIDProperty, uniqueID);
            }
        }
        #endregion

        #region Business Rules

        protected override void AddBusinessRules()
        {
            if(AddBusinessValidationRules())
                return;

            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_usernameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_usernameProperty, 256));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_applicationNameProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_applicationNameProperty, 256));
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo< System.Int32 > _uniqueIDProperty = RegisterProperty< System.Int32 >(p => p.UniqueID, string.Empty);
		[System.ComponentModel.DataObjectField(true, true)]
        public System.Int32 UniqueID
        {
            get { return GetProperty(_uniqueIDProperty); }
            internal set{ SetProperty(_uniqueIDProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _usernameProperty = RegisterProperty< System.String >(p => p.Username, string.Empty);
        public System.String Username
        {
            get { return GetProperty(_usernameProperty); }
            set{ SetProperty(_usernameProperty, value); }
        }
        private static readonly PropertyInfo< System.String > _applicationNameProperty = RegisterProperty< System.String >(p => p.ApplicationName, string.Empty);
        public System.String ApplicationName
        {
            get { return GetProperty(_applicationNameProperty); }
            set{ SetProperty(_applicationNameProperty, value); }
        }
        private static readonly PropertyInfo< System.Boolean? > _isAnonymousProperty = RegisterProperty< System.Boolean? >(p => p.IsAnonymous, string.Empty, (System.Boolean?)null);
        public System.Boolean? IsAnonymous
        {
            get { return GetProperty(_isAnonymousProperty); }
            set{ SetProperty(_isAnonymousProperty, value); }
        }
        private static readonly PropertyInfo< System.DateTime? > _lastActivityDateProperty = RegisterProperty< System.DateTime? >(p => p.LastActivityDate, string.Empty, (System.DateTime?)null);
        public System.DateTime? LastActivityDate
        {
            get { return GetProperty(_lastActivityDateProperty); }
            set{ SetProperty(_lastActivityDateProperty, value); }
        }
        private static readonly PropertyInfo< System.DateTime? > _lastUpdatedDateProperty = RegisterProperty< System.DateTime? >(p => p.LastUpdatedDate, string.Empty, (System.DateTime?)null);
        public System.DateTime? LastUpdatedDate
        {
            get { return GetProperty(_lastUpdatedDateProperty); }
            set{ SetProperty(_lastUpdatedDateProperty, value); }
        }
        //AssociatedOneToMany
        private static readonly PropertyInfo< AccountList > _accountsProperty = RegisterProperty<AccountList>(p => p.Accounts, Csla.RelationshipTypes.Child);
        public AccountList Accounts
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_accountsProperty, ref cancel);
    
                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_accountsProperty))
                    {
                        var criteria = new PetShop.Tests.ObjF.StoredProcedures.AccountCriteria {UniqueID = UniqueID};
                        
    
                        if(!PetShop.Tests.ObjF.StoredProcedures.AccountList.Exists(criteria))
                            LoadProperty(_accountsProperty, PetShop.Tests.ObjF.StoredProcedures.AccountList.NewList());
                        else
                            LoadProperty(_accountsProperty, PetShop.Tests.ObjF.StoredProcedures.AccountList.GetByUniqueID(UniqueID));
                    }
                }

                return GetProperty(_accountsProperty);
            }
        }

        //AssociatedOneToMany
        private static readonly PropertyInfo< CartList > _cartsProperty = RegisterProperty<CartList>(p => p.Carts, Csla.RelationshipTypes.Child);
        public CartList Carts
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_cartsProperty, ref cancel);
    
                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_cartsProperty))
                    {
                        var criteria = new PetShop.Tests.ObjF.StoredProcedures.CartCriteria {UniqueID = UniqueID};
                        
    
                        if(!PetShop.Tests.ObjF.StoredProcedures.CartList.Exists(criteria))
                            LoadProperty(_cartsProperty, PetShop.Tests.ObjF.StoredProcedures.CartList.NewList());
                        else
                            LoadProperty(_cartsProperty, PetShop.Tests.ObjF.StoredProcedures.CartList.GetByUniqueID(UniqueID));
                    }
                }

                return GetProperty(_cartsProperty);
            }
        }


        #endregion

        #region Synchronous Root Factory Methods 
        
        public static Profile NewProfile()
        {
            return DataPortal.Create< Profile >();
        }

        public static Profile GetByUniqueID(System.Int32 uniqueID)
        {
            var criteria = new ProfileCriteria {UniqueID = uniqueID};
            
            
            return DataPortal.Fetch< Profile >(criteria);
        }

        public static Profile GetByUsernameApplicationName(System.String username, System.String applicationName)
        {
            var criteria = new ProfileCriteria {Username = username, ApplicationName = applicationName};
            
            
            return DataPortal.Fetch< Profile >(criteria);
        }

        public static void DeleteProfile(System.Int32 uniqueID)
        {
                DataPortal.Delete< Profile >(new ProfileCriteria (uniqueID));
        }
        
        #endregion

        #region Synchronous Child Factory Methods 
        
        internal static Profile NewProfileChild()
        {
            return DataPortal.CreateChild< Profile >();
        }

        internal static Profile GetByUniqueIDChild(System.Int32 uniqueID)
        {
            var criteria = new ProfileCriteria {UniqueID = uniqueID};
            

            return DataPortal.FetchChild< Profile >(criteria);
        }

        internal static Profile GetByUsernameApplicationNameChild(System.String username, System.String applicationName)
        {
            var criteria = new ProfileCriteria {Username = username, ApplicationName = applicationName};
            

            return DataPortal.FetchChild< Profile >(criteria);
        }

        #endregion
        #region DataPortal partial methods

        partial void OnCreating(ref bool cancel);
        partial void OnCreated();
        partial void OnFetching(ProfileCriteria criteria, ref bool cancel);
        partial void OnFetched();
        partial void OnMapping(SafeDataReader reader, ref bool cancel);
        partial void OnMapped();
        partial void OnInserting(ref bool cancel);
        partial void OnInserted();
        partial void OnUpdating(ref bool cancel);
        partial void OnUpdated();
        partial void OnSelfDeleting(ref bool cancel);
        partial void OnSelfDeleted();
        partial void OnDeleting(ProfileCriteria criteria, ref bool cancel);
        partial void OnDeleted();
        partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion

        #region ChildPortal partial methods

        partial void OnChildCreating(ref bool cancel);
        partial void OnChildCreated();
        partial void OnChildFetching(ProfileCriteria criteria, ref bool cancel);
        partial void OnChildFetched();
        partial void OnChildInserting(SqlConnection connection, ref bool cancel);
        partial void OnChildInserted();
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel);
        partial void OnChildUpdated();
        partial void OnChildSelfDeleting(ref bool cancel);
        partial void OnChildSelfDeleted();
        #endregion
        #region Overridden properties

        /// <summary>
        /// Returns true if the business object or any of its children properties are dirty.
        /// </summary>
        public override bool IsDirty
        {
            get
            {
                if (base.IsDirty) return true;
                if (FieldManager.FieldExists(_accountsProperty) && Accounts.IsDirty) return true;
                if (FieldManager.FieldExists(_cartsProperty) && Carts.IsDirty) return true;

                return false;
            }
        }

        #endregion


        #region Exists Command

        public static bool Exists(ProfileCriteria criteria)
        {
            return PetShop.Tests.ObjF.StoredProcedures.ExistsCommand.Execute(criteria);
        }

        #endregion

    }
}