//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v5.2.2, CSLA Templates: v3.0.0.1817, CSLA Framework: v3.8.4.
//       Changes to this template will not be lost.
//
//     Template: EditableChildList.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Csla;

#endregion

namespace PetShop.Business
{
    public partial class CartList
    {
        #region Authorization Rules

        protected void AddAuthorizationRules()
        {
            //// More information on these rules can be found here (http://www.devx.com/codemag/Article/40663/1763/page/2).

            //string[] canWrite = { "AdminUser", "RegularUser" };
            //string[] canRead = { "AdminUser", "RegularUser", "ReadOnlyUser" };
            //string[] admin = { "AdminUser" };

            // AuthorizationRules.AllowCreate(typeof(CartList), admin);
            // AuthorizationRules.AllowDelete(typeof(CartList), admin);
            // AuthorizationRules.AllowEdit(typeof(CartList), canWrite);
            // AuthorizationRules.AllowGet(typeof(CartList), canRead);

            //// CartId
            // AuthorizationRules.AllowWrite(_cartIdProperty, canWrite);
            // AuthorizationRules.AllowRead(_cartIdProperty, canRead);

            //// UniqueID
            // AuthorizationRules.AllowRead(_uniqueIDProperty, canRead);

            //// ItemId
            // AuthorizationRules.AllowRead(_itemIdProperty, canRead);

            //// Name
            // AuthorizationRules.AllowRead(_nameProperty, canRead);

            //// Type
            // AuthorizationRules.AllowRead(_typeProperty, canRead);

            //// Price
            // AuthorizationRules.AllowRead(_priceProperty, canRead);

            //// CategoryId
            // AuthorizationRules.AllowRead(_categoryIdProperty, canRead);

            //// ProductId
            // AuthorizationRules.AllowRead(_productIdProperty, canRead);

            //// IsShoppingCart
            // AuthorizationRules.AllowRead(_isShoppingCartProperty, canRead);

            //// Quantity
            // AuthorizationRules.AllowRead(_quantityProperty, canRead);

            //// ProfileMember
            // AuthorizationRules.AllowRead(_profileMemberProperty, canRead);

// NOTE: Many-To-Many support coming soon.
        }
        #endregion

        #region Custom Factory Methods

        internal static CartList GetCart(int uniqueId, bool isShoppingCart)
        {
            CartList list = null;

            try
            {
                list = DataPortal.FetchChild<CartList>(new CartCriteria {UniqueID = uniqueId, IsShoppingCart = isShoppingCart});
            }
            catch (Exception)
            {
                list = CartList.NewListAsync().Result;
            }

            return list;
        }

        internal static async Task<AsyncChildLoader<CartList>> GetCartAsync(int uniqueId, bool isShoppingCart)
        {
            return await DataPortal.FetchAsync<AsyncChildLoader<CartList>>(new CartCriteria { UniqueID = uniqueId, IsShoppingCart = isShoppingCart });
        }

        #endregion

        #region Properties

        /// <summary>
        /// Calculate the total for all the Items in the Cart.
        /// </summary>
        public decimal Total
        {
            get { return this.Sum(cart => cart.Price * cart.Quantity); }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Update the quantity for item that exists in the cart.
        /// </summary>
        /// <param name="itemId">Item Id</param>
        /// <param name="quantity">Quantity</param>
        public void SetQuantity(string itemId, int quantity)
        {
            int index = 0;
            foreach (Cart cart in this)
            {
                if (cart.ItemId == itemId)
                    break;

                index++;
            }

            this[index].Quantity = quantity;
        }

        /// <summary>
        /// Add an item to the cart.
        /// When ItemId to be added has already existed, this method will update the quantity instead.
        /// </summary>
        /// <param name="itemId">Item to add</param>
        /// <param name="uniqueId">Cart's Unique ID</param>
        /// <param name="isShoppingCart">Cart is a shopping cart.</param>
        public async Task Add(string itemId, int uniqueId, bool isShoppingCart)
        {
            await Add(itemId, uniqueId, isShoppingCart, 1);
        }
        /// <summary>
        /// Add an item to the cart.
        /// When ItemId to be added has already existed, this method will update the quantity instead.
        /// </summary>
        /// <param name="itemId">Item to add</param>
        /// <param name="uniqueId">Cart's Unique ID</param>
        /// <param name="isShoppingCart">Cart is a shopping cart.</param>
        /// <param name="quantity">Item Quantity</param>
        public async Task Add(string itemId, int uniqueId, bool isShoppingCart, int quantity)
        {
            int index = 0;
            bool found = false;

            foreach (Cart cart in this)
            {
                if (cart.ItemId == itemId)
                {
                    found = true;
                    break;
                }

                index++;
            }

            if (found)
                Items[index].Quantity += quantity;
            else
            {
                Item item = await Item.GetByItemIdAsync(itemId);
                Product product = await Product.GetByProductIdAsync(item.ProductId);
                Cart cart = await Cart.NewCartAsync();
                
                cart.UniqueID = uniqueId;
                cart.ItemId = itemId;
                cart.Name = item.Name;
                cart.ProductId = item.ProductId;
                cart.IsShoppingCart = isShoppingCart;
                cart.Price = item.ListPrice ?? item.UnitCost ?? 0;
                cart.Type = product.Name;
                cart.CategoryId = product.CategoryId;
                cart.Quantity = quantity;

                Add(cart);
            }
        }

        /// <summary>
        /// Remove item from the cart based on itemId.
        /// </summary>
        /// <param name="itemId">ItemId of item to remove</param>
        public void Remove(string itemId)
        {
            int index = 0;
            foreach (Cart cart in this)
            {
                if (cart.ItemId == itemId)
                    break;

                index++;
            }

            RemoveItem(index);
        }

        /// <summary>
        /// Method to convert all cart items to order line items
        /// </summary>
        public async Task SaveOrderLineItems(int orderId)
        {
            int lineNum = 0;

            foreach (Cart item in this)
            {
                LineItem lineItem = await LineItem.NewLineItemAsync();
                lineItem.OrderId = orderId;
                lineItem.ItemId = item.ItemId;
                lineItem.LineNum = ++lineNum;
                lineItem.Quantity = item.Quantity;
                lineItem.UnitPrice = item.Price;

                lineItem = await lineItem.SaveAsync();
            }
        }

        #endregion
    }
}