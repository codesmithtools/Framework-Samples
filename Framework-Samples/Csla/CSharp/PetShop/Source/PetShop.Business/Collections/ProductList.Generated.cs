//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v6.5.3, CSLA Templates: v4.0.0.0, CSLA Framework: v4.5.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Product.cs'.
//
//     Template: DynamicRootList.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Threading.Tasks;

using Csla;
#if SILVERLIGHT
using Csla.Serialization;
#else
using Csla.Data;
#endif

namespace PetShop.Business
{
    [Serializable]
    public partial class ProductList : DynamicBindingListBase<Product>
    {
        #region Constructor(s)

        public ProductList()
        { 
            AllowNew = true;
        }

        #endregion

        #region Synchronous Factory Methods 
#if !SILVERLIGHT

        /// <summary>
        /// Creates a new list collection of type <see cref="ProductList"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="ProductList"/>.</returns>
        public static ProductList NewList()
        {
            return DataPortal.Create<ProductList>();
        }

        /// <summary>
        /// Returns a <see cref="ProductList"/> collection of <see cref="Product"/> items with the specified criteria. 
        /// </summary>
        /// <param name="productId">No additional detail available.</param>
        /// <returns>Collection of all <see cref="Product"/> items.</returns>   
        public static ProductList GetByProductId(System.String productId)
        {
            var criteria = new ProductCriteria{ProductId = productId};
            
        
            return DataPortal.Fetch<ProductList>(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ProductList"/> collection of <see cref="Product"/> items with the specified criteria. 
        /// </summary>
        /// <param name="categoryId">No additional detail available.</param>
        /// <returns>Collection of all <see cref="Product"/> items.</returns>   
        public static ProductList GetByCategoryId(System.String categoryId)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId};
            
        
            return DataPortal.Fetch<ProductList>(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ProductList"/> collection of <see cref="Product"/> items with the specified criteria. 
        /// </summary>
        /// <param name="name">No additional detail available.</param>
        /// <returns>Collection of all <see cref="Product"/> items.</returns>   
        public static ProductList GetByName(System.String name)
        {
            var criteria = new ProductCriteria{Name = name};
            
        
            return DataPortal.Fetch<ProductList>(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ProductList"/> collection of <see cref="Product"/> items with the specified criteria. 
        /// </summary>
        /// <param name="categoryId">No additional detail available.</param>
        /// <param name="name">No additional detail available.</param>
        /// <returns>Collection of all <see cref="Product"/> items.</returns>   
        public static ProductList GetByCategoryIdName(System.String categoryId, System.String name)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId, Name = name};
            
        
            return DataPortal.Fetch<ProductList>(criteria);
        }

        /// <summary>
        /// Returns a <see cref="ProductList"/> collection of <see cref="Product"/> items with the specified criteria. 
        /// </summary>
        /// <param name="categoryId">No additional detail available.</param>
        /// <param name="productId">No additional detail available.</param>
        /// <param name="name">No additional detail available.</param>
        /// <returns>Collection of all <see cref="Product"/> items.</returns>   
        public static ProductList GetByCategoryIdProductIdName(System.String categoryId, System.String productId, System.String name)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId, ProductId = productId, Name = name};
            
        
            return DataPortal.Fetch<ProductList>(criteria);
        }

        public static ProductList GetByCriteria(ProductCriteria criteria)
        {
            return DataPortal.Fetch<ProductList>(criteria);
        }
    
        /// <summary>
        /// Returns a <see cref="ProductList"/> collection of all <see cref="Product"/> items. 
        /// </summary>
        /// <returns>Collection of all Product items.</returns>    
        public static ProductList GetAll()
        {
            return DataPortal.Fetch<ProductList>(new ProductCriteria());
        }

#endif
        #endregion

        #region Asynchronous Factory Methods

        public static async Task<ProductList> NewListAsync()
        {
            return await DataPortal.CreateAsync<ProductList>();
        }

        public static async Task<ProductList> GetByProductIdAsync(System.String productId)
        {
            var criteria = new ProductCriteria{ProductId = productId};
            
            
            return await DataPortal.FetchAsync<ProductList>(criteria);
        }

        public static async Task<ProductList> GetByCategoryIdAsync(System.String categoryId)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId};
            
            
            return await DataPortal.FetchAsync<ProductList>(criteria);
        }

        public static async Task<ProductList> GetByNameAsync(System.String name)
        {
            var criteria = new ProductCriteria{Name = name};
            
            
            return await DataPortal.FetchAsync<ProductList>(criteria);
        }

        public static async Task<ProductList> GetByCategoryIdNameAsync(System.String categoryId, System.String name)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId, Name = name};
            
            
            return await DataPortal.FetchAsync<ProductList>(criteria);
        }

        public static async Task<ProductList> GetByCategoryIdProductIdNameAsync(System.String categoryId, System.String productId, System.String name)
        {
            var criteria = new ProductCriteria{CategoryId = categoryId, ProductId = productId, Name = name};
            
            
            return await DataPortal.FetchAsync<ProductList>(criteria);
        }

        public static async Task<ProductList> GetByCriteriaAsync(ProductCriteria criteria)
        {  
            return await DataPortal.FetchAsync<ProductList>(criteria);
        }

        public static async Task<ProductList> GetAllAsync()
        {
            return await DataPortal.FetchAsync<ProductList>(new ProductCriteria());
        }

        #endregion

        #region Method Overrides
#if !SILVERLIGHT

        protected override object AddNewCore()
        {
            Product item = PetShop.Business.Product.NewProductChild();

            bool cancel = false;
            OnAddNewCore(ref item, ref cancel);
            if (!cancel)
            {
                // Check to see if someone set the item to null in the OnAddNewCore.
                if(item == null)
                    item = PetShop.Business.Product.NewProductChild();

                Add(item);
            }

            return item;
        }
        
#else
        protected override void AddNewCore()
        {
            PetShop.Business.Product.NewProductChildAsync().ContinueWith(t => 
            {
                 Product item = t.Result;
                
                bool cancel = false;
                OnAddNewCore(ref item, ref cancel);
                if (!cancel)
                {
                    // Check to see if someone set the item to null in the OnAddNewCore.
                    if(item != null)
                        Add(item);
                }
            });
        }
#endif

        #endregion

        #region DataPortal partial methods

#if !SILVERLIGHT
        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="Product"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="Product"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="ProductCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(ProductCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been fetched. 
        /// </summary>
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Product"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Product"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="Product"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="Product"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();
#endif
        partial void OnAddNewCore(ref Product item, ref bool cancel);

        #endregion

        #region Exists Command

#if !SILVERLIGHT
        /// <summary>
        /// Determines if a record exists in the Product in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is a <see cref="ProductList"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static bool Exists(ProductCriteria criteria)
        {
            return PetShop.Business.Product.Exists(criteria);
        }
#endif
        /// <summary>
        /// Determines if a record exists in the Product in the database for the specified criteria. 
        /// </summary>
        public static async Task<bool> ExistsAsync(ProductCriteria criteria)
        {
            return await PetShop.Business.ExistsCommand.ExecuteAsync(criteria);
        }

        #endregion
 
        #region Enhancements

        public Product GetProduct(System.String productId)
        {
            return this.FirstOrDefault(i => i.ProductId == productId);
        }

        public bool Contains(System.String productId)
        {
            return this.Count(i => i.ProductId == productId) > 0;
        }

        #endregion
    }
}