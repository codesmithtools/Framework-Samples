//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v6.5.3, CSLA Templates: v4.0.0.0, CSLA Framework: v4.5.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'OrderStatus.cs'.
//
//     Template path: EditableRoot.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Threading.Tasks;

using Csla;
#if SILVERLIGHT || NETFX_CORE
using Csla.Serialization;
#else
using Csla.Data;
#endif

using Csla.Rules;

namespace PetShop.Business
{
    [Serializable]
    public partial class OrderStatus : BusinessBase<OrderStatus>
    {
        #region Contructor(s)

        public OrderStatus()
        { /* Require use of factory methods */ }

        #endregion
 
        #region Business Rules

        /// <summary>
        /// Contains the CodeSmith generated validation rules.
        /// </summary>
        protected override void AddBusinessRules()
        {
            // Call the base class, if this call isn't made than any declared System.ComponentModel.DataAnnotations rules will not work.
            base.AddBusinessRules();

            if(AddBusinessValidationRules())
                return;

            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(_statusProperty));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.MaxLength(_statusProperty, 2));
        }

        #endregion

        #region Properties

        private static readonly PropertyInfo<System.Int32> _orderIdProperty = RegisterProperty<System.Int32>(p => p.OrderId, "Order Id");
#if !SILVERLIGHT && !NETFX_CORE
        [System.ComponentModel.DataObjectField(true, false)]
#endif
        public System.Int32 OrderId
        {
            get { return GetProperty(_orderIdProperty); }
            set{ SetProperty(_orderIdProperty, value); }
        }

        private static readonly PropertyInfo<System.Int32> _originalOrderIdProperty = RegisterProperty<System.Int32>(p => p.OriginalOrderId, "Original Order Id");
        /// <summary>
        /// Holds the original value for OrderId. This is used for non identity primary keys.
        /// </summary>
        internal System.Int32 OriginalOrderId
        {
            get { return GetProperty(_originalOrderIdProperty); }
            set{ SetProperty(_originalOrderIdProperty, value); }
        }

        private static readonly PropertyInfo<System.Int32> _lineNumProperty = RegisterProperty<System.Int32>(p => p.LineNum, "Line Num");
#if !SILVERLIGHT && !NETFX_CORE
        [System.ComponentModel.DataObjectField(true, false)]
#endif
        public System.Int32 LineNum
        {
            get { return GetProperty(_lineNumProperty); }
            set{ SetProperty(_lineNumProperty, value); }
        }

        private static readonly PropertyInfo<System.Int32> _originalLineNumProperty = RegisterProperty<System.Int32>(p => p.OriginalLineNum, "Original Line Num");
        /// <summary>
        /// Holds the original value for LineNum. This is used for non identity primary keys.
        /// </summary>
        internal System.Int32 OriginalLineNum
        {
            get { return GetProperty(_originalLineNumProperty); }
            set{ SetProperty(_originalLineNumProperty, value); }
        }

        private static readonly PropertyInfo<System.DateTime> _timestampProperty = RegisterProperty<System.DateTime>(p => p.Timestamp, "Timestamp");
        public System.DateTime Timestamp
        {
            get { return GetProperty(_timestampProperty); }
            set{ SetProperty(_timestampProperty, value); }
        }

        private static readonly PropertyInfo<System.String> _statusProperty = RegisterProperty<System.String>(p => p.Status, "Status");
        public System.String Status
        {
            get { return GetProperty(_statusProperty); }
            set{ SetProperty(_statusProperty, value); }
        }

        // ManyToOne
        private static readonly PropertyInfo<Order> _orderProperty = RegisterProperty<Order>(p => p.Order, Csla.RelationshipTypes.Child);
        public Order Order
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_orderProperty, ref cancel);

                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_orderProperty))
                    {
                        var criteria = new PetShop.Business.OrderCriteria {OrderId = OrderId};
                        
#if SILVERLIGHT || NETFX_CORE
                        //MarkBusy();
                        PetShop.Business.Order.ExistsAsync(criteria).ContinueWith(t =>
                        {
                            if (!t.Result)
                            {
                                PetShop.Business.Order.GetByOrderIdAsync(OrderId).ContinueWith(i =>
                                {
                                    this.LoadProperty(_orderProperty, i.Result);

                                    //MarkIdle();
                                    OnPropertyChanged(_orderProperty);
                                });
                            }
                        });
#else
                        if(PetShop.Business.Order.Exists(criteria))
                            LoadProperty(_orderProperty, PetShop.Business.Order.GetByOrderId(OrderId));
#endif
                    }
                }

                return GetProperty(_orderProperty); 
            }
        }


        #endregion

        #region Synchronous Factory Methods 
#if !SILVERLIGHT && !NETFX_CORE

        /// <summary>
        /// Creates a new object of type <see cref="OrderStatus"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="OrderStatus"/>.</returns>   
        public static OrderStatus NewOrderStatus()
        {
            return DataPortal.Create<OrderStatus>();
        }

        internal static OrderStatus GetOrderStatus(SafeDataReader reader)
        {
            return DataPortal.FetchChild<OrderStatus>(reader);
        }

        /// <summary>
        /// Returns a <see cref="OrderStatus"/> object of the specified criteria. 
        /// </summary>
        /// <param name="orderId">No additional detail available.</param>
        /// <param name="lineNum">No additional detail available.</param>
        /// <returns>A <see cref="OrderStatus"/> object of the specified criteria.</returns>
        public static OrderStatus GetByOrderIdLineNum(System.Int32 orderId, System.Int32 lineNum)
        {
            var criteria = new OrderStatusCriteria {OrderId = orderId, LineNum = lineNum};
            
            
            return DataPortal.Fetch<OrderStatus>(criteria);
        }

        /// <summary>
        /// Returns a <see cref="OrderStatus"/> object of the specified criteria. 
        /// </summary>
        /// <param name="orderId">No additional detail available.</param>
        /// <returns>A <see cref="OrderStatus"/> object of the specified criteria.</returns>
        public static OrderStatus GetByOrderId(System.Int32 orderId)
        {
            var criteria = new OrderStatusCriteria {OrderId = orderId};
            
            
            return DataPortal.Fetch<OrderStatus>(criteria);
        }

        public static void DeleteOrderStatus(System.Int32 orderId, System.Int32 lineNum)
        {
            var criteria = new OrderStatusCriteria {OrderId = orderId, LineNum = lineNum};
            
            
            DataPortal.Delete<OrderStatus>(criteria);
        }

#endif
        #endregion

        #region Asynchronous Factory Methods

        public static async Task<OrderStatus> NewOrderStatusAsync()
        {
            return await DataPortal.CreateAsync<OrderStatus>();
        }

        public static async Task<OrderStatus> GetByOrderIdLineNumAsync(System.Int32 orderId, System.Int32 lineNum)
        {
            var criteria = new OrderStatusCriteria{ OrderId = orderId, LineNum = lineNum};
            
            
            return await DataPortal.FetchAsync<OrderStatus>(criteria);
        }

        public static async Task<OrderStatus> GetByOrderIdAsync(System.Int32 orderId)
        {
            var criteria = new OrderStatusCriteria{ OrderId = orderId};
            
            
            return await DataPortal.FetchAsync<OrderStatus>(criteria);
        }

        public static async Task DeleteOrderStatusAsync(System.Int32 orderId, System.Int32 lineNum)
        {
            var criteria = new OrderStatusCriteria{OrderId = orderId, LineNum = lineNum};
            
            
            await DataPortal.DeleteAsync<OrderStatus>(criteria);
        }

        #endregion

        #region DataPortal partial methods

#if !SILVERLIGHT && !NETFX_CORE
        /// <summary>
        /// CodeSmith generated stub method that is called when creating the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="OrderStatus"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="OrderStatusCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(OrderStatusCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="OrderStatus"/> object has been fetched. 
        /// </summary>    
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);
 
        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="OrderStatus"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="OrderStatus"/> object has been inserted. 
        /// </summary>
        partial void OnInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="OrderStatus"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="OrderStatus"/> object has been deleted. 
        /// </summary>
        partial void OnSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the <see cref="OrderStatus"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="OrderStatusCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(OrderStatusCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="OrderStatus"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
#endif
        partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion

        #region Exists Command
#if !SILVERLIGHT && !NETFX_CORE

        /// <summary>
        /// Determines if a record exists in the OrderStatus table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="OrderStatus"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static bool Exists(OrderStatusCriteria criteria)
        {
            return PetShop.Business.ExistsCommand.Execute(criteria);
        }

#endif

        /// <summary>
        /// Determines if a record exists in the OrderStatus table in the database for the specified criteria. 
        /// </summary>
        public static async Task<bool> ExistsAsync(OrderStatusCriteria criteria)
        {
            return await PetShop.Business.ExistsCommand.ExecuteAsync(criteria);
        }

        #endregion

    }
}