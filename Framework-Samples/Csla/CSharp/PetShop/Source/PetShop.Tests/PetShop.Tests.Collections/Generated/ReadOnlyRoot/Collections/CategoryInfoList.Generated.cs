//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v6.5.3, CSLA Templates: v4.0.0.0, CSLA Framework: v4.5.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'CategoryInfoList.cs'.
//
//     Template: ReadOnlyList.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using Csla;
using Csla.Data;

namespace PetShop.Tests.Collections.ReadOnlyRoot
{
    [Serializable]
    public partial class CategoryInfoList : ReadOnlyListBase<CategoryInfoList, CategoryInfo>
    {
        #region Contructor(s)

        public CategoryInfoList()
        { /* Require use of factory methods */ }

        #endregion
    
        #region Synchronous Factory Methods

        /// <summary>
        /// Returns a <see cref="CategoryInfoList"/> object of the specified criteria. 
        /// </summary>
        /// <param name="categoryId">No additional detail available.</param>
        /// <returns>A <see cref="CategoryInfoList"/> object of the specified criteria.</returns>

        public static CategoryInfoList GetByCategoryId(System.String categoryId)
        {
            var criteria = new CategoryCriteria{CategoryId = categoryId};
            
            
            return DataPortal.Fetch<CategoryInfoList>(criteria);
        }
        

        public static CategoryInfoList GetByCriteria(CategoryCriteria criteria)
        {
            return DataPortal.Fetch<CategoryInfoList>(criteria);
        }

        public static CategoryInfoList GetAll()
        {
            return DataPortal.Fetch<CategoryInfoList>(new CategoryCriteria());
        }

        #endregion

        #region Asynchronous Factory Methods

        public static async Task<CategoryInfoList> GetByCategoryIdAsync(System.String categoryId)
        {
            var criteria = new CategoryCriteria{CategoryId = categoryId};
            
            
            return await DataPortal.FetchAsync<AsyncChildLoader<CategoryInfoList>>(criteria).ContinueWith(t => t.Result.Child);
        }

        public static async Task<CategoryInfoList> GetByCriteriaAsync(CategoryCriteria criteria)
        {  
            return await DataPortal.FetchAsync<AsyncChildLoader<CategoryInfoList>>(criteria).ContinueWith(t => t.Result.Child);
        }

        public static async Task<CategoryInfoList> GetAllAsync()
        {
            return await DataPortal.FetchAsync<AsyncChildLoader<CategoryInfoList>>(new CategoryCriteria()).ContinueWith(t => t.Result.Child);
        }

        #endregion

        #region DataPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="CategoryInfo"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="CategoryInfo"/> object has been created. 
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="CategoryInfo"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="CategoryInfoCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnFetching(CategoryCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="CategoryInfo"/> object has been fetched. 
        /// </summary>
        partial void OnFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="CategoryInfo"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="CategoryInfo"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="CategoryInfo"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the <see cref="CategoryInfo"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the <see cref="CategoryInfo"/> object has been updated. 
        /// </summary>
        partial void OnUpdated();
        partial void OnAddNewCore(ref CategoryInfo item, ref bool cancel);

        #endregion

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the CategoryInfo in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is a <see cref="CategoryInfoList"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static bool Exists(CategoryCriteria criteria)
        {
            return PetShop.Tests.Collections.ReadOnlyRoot.CategoryInfo.Exists(criteria);
        }
        /// <summary>
        /// Determines if a record exists in the CategoryInfo in the database for the specified criteria. 
        /// </summary>
        public static async Task<bool> ExistsAsync(CategoryCriteria criteria)
        {
            return await PetShop.Tests.Collections.ReadOnlyRoot.ExistsCommand.ExecuteAsync(criteria);
        }

        #endregion
 
        #region Enhancements

        public CategoryInfo GetCategoryInfo(System.String categoryId)
        {
            return this.FirstOrDefault(i => i.CategoryId == categoryId);
        }

        public bool Contains(System.String categoryId)
        {
            return this.Count(i => i.CategoryId == categoryId) > 0;
        }

        #endregion
    }
}