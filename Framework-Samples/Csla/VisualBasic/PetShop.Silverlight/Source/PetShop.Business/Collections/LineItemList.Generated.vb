'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'LineItemList.vb.
'
'     Template: EditableRootList.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
#If SILVERLIGHT Then
Imports Csla.Serialization
#Else
Imports Csla.Data
#End If

Namespace PetShop.Business
    <Serializable()> _
    Public Partial Class LineItemList 
        Inherits BusinessListBase(Of LineItemList, LineItem)
    
#Region "Contructor(s)"
        
    #If Not SILVERLIGHT Then
        Private Sub New()
            AllowNew = true
        End Sub
    #Else
        public Sub New()
            AllowNew = true
        End Sub
    #End If
    
#End Region
    
#If Not SILVERLIGHT Then
#Region "Method Overrides"
    
        Protected Overrides Function AddNewCore() As LineItem
            Dim item As LineItem = PetShop.Business.LineItem.NewLineItem()

            Dim cancel As Boolean = False
            OnAddNewCore(item, cancel)
            If Not (cancel) Then
                ' Check to see if someone set the item to null in the OnAddNewCore.
                If(item Is Nothing) Then
                    item = PetShop.Business.LineItem.NewLineItem()
                End If
            ' Pass the parent value down to the child.
                Dim order As Order = CType(Me.Parent, Order)
                If Not(order Is Nothing)
                    item.OrderId = order.OrderId
                End If
                Add(item)
            End If

            Return item
        End Function
    
#End Region
    
#Region "Synchronous Factory Methods"
    
        Public Shared Function NewList() As LineItemList
            Return DataPortal.Create(Of LineItemList)()
        End Function
    
        Public Shared Function GetByOrderIdLineNum(ByVal orderId As System.Int32, ByVal lineNum As System.Int32) As LineItemList 
            Dim criteria As New LineItemCriteria()
            criteria.OrderId = orderId
			criteria.LineNum = lineNum
    
            Return DataPortal.Fetch(Of LineItemList)(criteria)
        End Function
    
        Public Shared Function GetByOrderId(ByVal orderId As System.Int32) As LineItemList 
            Dim criteria As New LineItemCriteria()
            criteria.OrderId = orderId
    
            Return DataPortal.Fetch(Of LineItemList)(criteria)
        End Function
    
        Public Shared Function GetAll() As LineItemList
            Return DataPortal.Fetch(Of LineItemList)(New LineItemCriteria())
        End Function
    
#End Region
#Else

#Region "Method Overrides"
    
        Protected Overrides Sub AddNewCore() 
            PetShop.Business.LineItem.NewLineItemAsync(Sub(o, e)
                    Dim item As LineItem = e.Object
        
                    Dim cancel As Boolean = False
                    OnAddNewCore(item, cancel)
                    If Not (cancel) Then
                        ' Check to see if someone set the item to null in the OnAddNewCore.
                        If(item Is Nothing) Then
                            Return
                        End If
                        ' Pass the parent value down to the child.
                        Dim order As Order = CType(Me.Parent, Order)
                        If Not(order Is Nothing)
                            item.OrderId = order.OrderId
                        End If
                        Add(item)
                    End If
                End Sub)
        End Sub
    
#End Region

#Region "Asynchronous Factory Methods"
            
        Public Shared Sub NewListAsync(ByVal handler As EventHandler(Of DataPortalResult(Of LineItemList)))
            Dim dp As New DataPortal(Of LineItemList)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    
        Public Shared Sub GetByOrderIdLineNumAsync(ByVal orderId As System.Int32, ByVal lineNum As System.Int32, ByVal handler As EventHandler(Of DataPortalResult(Of LineItemList)))
            Dim dp As New DataPortal(Of LineItemList)()
            AddHandler dp.FetchCompleted, handler
    
            Dim criteria As New LineItemCriteria()
            criteria.OrderId = orderId
            criteria.LineNum = lineNum
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByOrderIdAsync(ByVal orderId As System.Int32, ByVal handler As EventHandler(Of DataPortalResult(Of LineItemList)))
            Dim dp As New DataPortal(Of LineItemList)()
            AddHandler dp.FetchCompleted, handler
    
            Dim criteria As New LineItemCriteria()
            criteria.OrderId = orderId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetAllAsync(ByVal handler As EventHandler(Of DataPortalResult(Of LineItemList)))
            Dim dp As New DataPortal(Of LineItemList)()
            AddHandler dp.FetchCompleted, handler
            dp.BeginFetch(New LineItemCriteria())
        End Sub
    
#End Region
#End If
#Region "DataPortal partial methods"
    
#If Not SILVERLIGHT Then
        Partial Private Sub OnCreating(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnFetching(ByVal criteria As LineItemCriteria, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnFetched()
        End Sub
        Partial Private Sub OnMapping(ByVal reader As SafeDataReader, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnMapped()
        End Sub
        Partial Private Sub OnUpdating(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnUpdated()
        End Sub
#End If
        Partial Private Sub OnAddNewCore(ByVal item As LineItem, ByRef cancel As Boolean)
        End Sub
    
#End Region

#Region "Exists Command"
#If Not SILVERLIGHT Then

        Public Shared Function Exists(ByVal criteria As LineItemCriteria) As Boolean
            Return PetShop.Business.LineItem.Exists(criteria)
        End Function

#Else

        Public Shared Sub Exists(ByVal criteria As LineItemCriteria, ByVal handler As EventHandler(Of DataPortalResult(Of ExistsCommand)))
            PetShop.Business.LineItem.Exists(criteria, handler)
        End Sub

#End If
#End Region
    End Class
End Namespace