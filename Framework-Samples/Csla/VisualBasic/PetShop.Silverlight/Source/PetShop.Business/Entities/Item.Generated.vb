'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v4.0.0.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Item.vb.
'
'     Template: SwitchableObject.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Rules
#If SILVERLIGHT Then
Imports Csla.Serialization
#Else
Imports Csla.Data
Imports System.Data.SqlClient
#End If

Namespace PetShop.Business
    <Serializable()> _
    Public Partial Class Item 
        Inherits BusinessBase(Of Item)
    
#Region "Contructor(s)"
    
#If Not SILVERLIGHT Then
        Private Sub New()
            ' require use of factory method 
        End Sub
#Else
        public Sub New()
            ' require use of factory method 
        End Sub
#End If
    
        Friend Sub New(ByVal itemId As System.String)
            Using(BypassPropertyChecks)
            LoadProperty(_itemIdProperty, itemId)
            End Using
        End Sub
    
#If Not SILVERLIGHT Then
        Friend Sub New(Byval reader As SafeDataReader)
            Map(reader)
            MarkAsChild()   
        End Sub
#End If

#End Region    
    
#Region "Business Rules"
    
        Protected Overrides Sub AddBusinessRules()
    
            If AddBusinessValidationRules() Then Exit Sub
    
            BusinessRules.AddRule(New Csla.Rules.CommonRules.Required(_itemIdProperty))
            BusinessRules.AddRule(New Csla.Rules.CommonRules.MaxLength(_itemIdProperty, 10))
            BusinessRules.AddRule(New Csla.Rules.CommonRules.Required(_productIdProperty))
            BusinessRules.AddRule(New Csla.Rules.CommonRules.MaxLength(_productIdProperty, 10))
            BusinessRules.AddRule(New Csla.Rules.CommonRules.MaxLength(_statusProperty, 2))
            BusinessRules.AddRule(New Csla.Rules.CommonRules.MaxLength(_nameProperty, 80))
            BusinessRules.AddRule(New Csla.Rules.CommonRules.MaxLength(_imageProperty, 80))
        End Sub
    
#End Region

#Region "Properties"
    
        Private Shared ReadOnly _itemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.ItemId, String.Empty)
#If Not SILVERLIGHT Then
        
		<System.ComponentModel.DataObjectField(true, false)> _
        Public Property ItemId() As System.String
#Else
        Public Property ItemId() As System.String
#End If
            Get 
                Return GetProperty(_itemIdProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_itemIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _originalItemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.OriginalItemId, String.Empty)
        ''' <summary>
        ''' Holds the original value for ItemId. This is used for non identity primary keys.
        ''' </summary>
        Friend Property OriginalItemId() As System.String
            Get 
                Return GetProperty(_originalItemIdProperty) 
            End Get
            Set (value As System.String)
                SetProperty(_originalItemIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _productIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.ProductId, String.Empty)
#If Not SILVERLIGHT Then
        
        Public Property ProductId() As System.String
#Else
        Public Property ProductId() As System.String
#End If
            Get 
                Return GetProperty(_productIdProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_productIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _listPriceProperty As PropertyInfo(Of System.Nullable(Of System.Decimal)) = RegisterProperty(Of System.Nullable(Of System.Decimal))(Function(p As Item) p.ListPrice, String.Empty, CType(Nothing, System.Nullable(Of System.Decimal)))
#If Not SILVERLIGHT Then
        
        Public Property ListPrice() As System.Nullable(Of System.Decimal)
#Else
        Public Property ListPrice() As System.Nullable(Of System.Decimal)
#End If
            Get 
                Return GetProperty(_listPriceProperty)
            End Get
            Set (ByVal value As System.Nullable(Of System.Decimal))
                SetProperty(_listPriceProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _unitCostProperty As PropertyInfo(Of System.Nullable(Of System.Decimal)) = RegisterProperty(Of System.Nullable(Of System.Decimal))(Function(p As Item) p.UnitCost, String.Empty, CType(Nothing, System.Nullable(Of System.Decimal)))
#If Not SILVERLIGHT Then
        
        Public Property UnitCost() As System.Nullable(Of System.Decimal)
#Else
        Public Property UnitCost() As System.Nullable(Of System.Decimal)
#End If
            Get 
                Return GetProperty(_unitCostProperty)
            End Get
            Set (ByVal value As System.Nullable(Of System.Decimal))
                SetProperty(_unitCostProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _supplierProperty As PropertyInfo(Of System.Nullable(Of System.Int32)) = RegisterProperty(Of System.Nullable(Of System.Int32))(Function(p As Item) p.Supplier, String.Empty, CType(Nothing, System.Nullable(Of System.Int32)))
#If Not SILVERLIGHT Then
        
        Public Property Supplier() As System.Nullable(Of System.Int32)
#Else
        Public Property Supplier() As System.Nullable(Of System.Int32)
#End If
            Get 
                Return GetProperty(_supplierProperty)
            End Get
            Set (ByVal value As System.Nullable(Of System.Int32))
                SetProperty(_supplierProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _statusProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Status, String.Empty, vbNullString)
#If Not SILVERLIGHT Then
        
        Public Property Status() As System.String
#Else
        Public Property Status() As System.String
#End If
            Get 
                Return GetProperty(_statusProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_statusProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _nameProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Name, String.Empty, vbNullString)
#If Not SILVERLIGHT Then
        
        Public Property Name() As System.String
#Else
        Public Property Name() As System.String
#End If
            Get 
                Return GetProperty(_nameProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_nameProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _imageProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Image, String.Empty, vbNullString)
#If Not SILVERLIGHT Then
        
        Public Property Image() As System.String
#Else
        Public Property Image() As System.String
#End If
            Get 
                Return GetProperty(_imageProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_imageProperty, value)
            End Set
        End Property

        'AssociatedManyToOne
        Private Shared ReadOnly _productMemberProperty As PropertyInfo(Of Product) = RegisterProperty(Of Product)(Function(p As Item) p.ProductMember, Csla.RelationshipTypes.Child)
        Public ReadOnly Property ProductMember() As Product
            Get
                Dim cancel As Boolean = False
                OnChildLoading(_productMemberProperty, cancel)
                
                If Not cancel Then
                    If(False) Then
                        Return Nothing
                    End If
    
                    If Not(FieldManager.FieldExists(_productMemberProperty))
                        Dim criteria As New PetShop.Business.ProductCriteria()
                        criteria.ProductId = ProductId

#If SILVERLIGHT Then
                        'Markbusy()
                        PetShop.Business.Product.Exists(criteria, Sub(o, e)
                            If Not (e.Error Is Nothing) Then
                                Throw e.Error
                            End If
                            
                            If (e.Object.Result) Then
                                PetShop.Business.Product.GetByProductIdAsync(ProductId, Sub(o1, e1)
                                    If Not (e1.Error Is Nothing) Then
                                        Throw e1.Error
                                    End If

                                    Me.LoadProperty(_productMemberProperty, e1.Object)

                                    'MarkIdle()
                                    OnPropertyChanged(_productMemberProperty)
                                End Sub)
                            End If
                        End Sub)
#Else
                        If (PetShop.Business.Product.Exists(criteria)) Then
                            LoadProperty(_productMemberProperty, PetShop.Business.Product.GetByProductId(ProductId))
                        End If
#End If
                    End If
                End If

                Return GetProperty(_productMemberProperty) 
            End Get
        End Property

        'AssociatedManyToOne
        Private Shared ReadOnly _supplierMemberProperty As PropertyInfo(Of Supplier) = RegisterProperty(Of Supplier)(Function(p As Item) p.SupplierMember, Csla.RelationshipTypes.Child)
        Public ReadOnly Property SupplierMember() As Supplier
            Get
                Dim cancel As Boolean = False
                OnChildLoading(_supplierMemberProperty, cancel)
                
                If Not cancel Then
                    If(Not Supplier.HasValue)  Then
                        Return Nothing
                    End If
    
                    If Not(FieldManager.FieldExists(_supplierMemberProperty))
                        Dim criteria As New PetShop.Business.SupplierCriteria()
                        If(Supplier.HasValue) Then criteria.SuppId = Supplier.Value

#If SILVERLIGHT Then
                        'Markbusy()
                        PetShop.Business.Supplier.Exists(criteria, Sub(o, e)
                            If Not (e.Error Is Nothing) Then
                                Throw e.Error
                            End If
                            
                            If (e.Object.Result) Then
                                PetShop.Business.Supplier.GetBySuppIdAsync(Supplier.Value, Sub(o1, e1)
                                    If Not (e1.Error Is Nothing) Then
                                        Throw e1.Error
                                    End If

                                    Me.LoadProperty(_supplierMemberProperty, e1.Object)

                                    'MarkIdle()
                                    OnPropertyChanged(_supplierMemberProperty)
                                End Sub)
                            End If
                        End Sub)
#Else
                        If (PetShop.Business.Supplier.Exists(criteria)) Then
                            LoadProperty(_supplierMemberProperty, PetShop.Business.Supplier.GetBySuppId(Supplier.Value))
                        End If
#End If
                    End If
                End If

                Return GetProperty(_supplierMemberProperty) 
            End Get
        End Property

#End Region
    
#If Not SILVERLIGHT Then
#Region "Synchronous Root Factory Methods"
    
        Public Shared Function NewItem() As Item 
            Return DataPortal.Create(Of Item)()
        End Function
    
        Public Shared Function GetByItemId(ByVal itemId As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ItemId = itemId
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        Public Shared Function GetByProductIdItemIdListPriceName(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Nullable(Of System.Decimal), ByVal name As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
			criteria.ItemId = itemId
			criteria.ListPrice = listPrice.Value
			criteria.Name = name
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        Public Shared Function GetByProductId(ByVal productId As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        Public Shared Function GetBySupplier(ByVal supplier As System.Nullable(Of System.Int32)) As Item
            Dim criteria As New ItemCriteria()
            criteria.Supplier = supplier.Value
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        Public Shared Sub DeleteItem(ByVal itemId As System.String)
            DataPortal.Delete(Of Item)(New ItemCriteria (itemId))
        End Sub
    
#End Region
#End If        
    
#Region "Asynchronous Root Factory Methods"
            
        Public Shared Sub NewItemAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    
        Public Shared Sub GetByItemIdAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ItemId = itemId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByProductIdItemIdListPriceNameAsync(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Nullable(Of System.Decimal), ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
            criteria.ItemId = itemId
            criteria.ListPrice = listPrice
            criteria.Name = name
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByProductIdAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetBySupplierAsync(ByVal supplier As System.Nullable(Of System.Int32), ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.Supplier = supplier
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub DeleteItemAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.DeleteCompleted, handler
            dp.BeginDelete(New ItemCriteria (itemId))
        End Sub
    
            
#End Region
    
#If Not SILVERLIGHT Then
#Region "Synchronous Child Factory Methods"
    
        Friend Shared Function NewItemChild() As Item
            Return DataPortal.CreateChild(Of Item)()
        End Function
    
        Friend Shared Function GetByItemIdChild(ByVal itemId As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ItemId = itemId
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function
    
        Friend Shared Function GetByProductIdItemIdListPriceNameChild(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Nullable(Of System.Decimal), ByVal name As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
            criteria.ItemId = itemId
            criteria.ListPrice = listPrice
            criteria.Name = name
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function
    
        Friend Shared Function GetByProductIdChild(ByVal productId As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function
    
        Friend Shared Function GetBySupplierChild(ByVal supplier As System.Nullable(Of System.Int32)) As Item
            Dim criteria As New ItemCriteria()
            criteria.Supplier = supplier
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function
    
#End Region
#End If        
    
#Region "Asynchronous Child Factory Methods"
    
        Friend Shared Sub NewItemChildAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub

        Friend Shared Sub GetByItemIdChildAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ItemId = itemId

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByProductIdItemIdListPriceNameChildAsync(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Nullable(Of System.Decimal), ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
            criteria.ItemId = itemId
            criteria.ListPrice = listPrice
            criteria.Name = name

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByProductIdChildAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetBySupplierChildAsync(ByVal supplier As System.Nullable(Of System.Int32), ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.Supplier = supplier

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

#End Region

#Region "DataPortal partial methods"
    
#If Not SILVERLIGHT Then
        Partial Private Sub OnCreating(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnFetching(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnFetched()
        End Sub
        Partial Private Sub OnMapping(ByVal reader As SafeDataReader, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnMapped()
        End Sub
        Partial Private Sub OnInserting(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnInserted()
        End Sub
        Partial Private Sub OnUpdating(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnUpdated()
        End Sub
        Partial Private Sub OnSelfDeleting(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnSelfDeleted()
        End Sub
        Partial Private Sub OnDeleting(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnDeleted()
        End Sub
#End If
        Private Partial Sub OnChildLoading(ByVal childProperty As Csla.Core.IPropertyInfo, ByRef cancel As Boolean)
        End Sub
    
#End Region
    
#Region "ChildPortal partial methods"

#If Not SILVERLIGHT Then
        Partial Private Sub OnChildCreating(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildCreated()
        End Sub
        Partial Private Sub OnChildFetching(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildFetched()
        End Sub
        Partial Private Sub OnChildInserting(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildInserted()
        End Sub
        Partial Private Sub OnChildUpdating(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildUpdated()
        End Sub
        Partial Private Sub OnChildSelfDeleting(ByRef cancel As Boolean)
        End Sub
        Partial Private Sub OnChildSelfDeleted()
        End Sub
#End If 
    
#End Region

#Region "Exists Command"
#If Not SILVERLIGHT Then

        Public Shared Function Exists(ByVal criteria As ItemCriteria) As Boolean
            Return PetShop.Business.ExistsCommand.Execute(criteria)
        End Function

#Else

        Public Shared Sub Exists(ByVal criteria As ItemCriteria, ByVal handler As EventHandler(Of DataPortalResult(Of ExistsCommand)))
            PetShop.Business.ExistsCommand.Execute(criteria, handler)
        End Sub

#End If

#End Region
    End Class
End Namespace