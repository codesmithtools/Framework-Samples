'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v5.2.2, CSLA Templates: v3.0.0.0, CSLA Framework: v3.8.4.
'       Changes to this template will not be lost.
'
'     Template: SwitchableObject.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Security
Imports Csla.Validation

Namespace PetShop.Business
    Public Partial Class Profile
#Region "Business Rules"
    
        ''' <summary>
        ''' All custom rules need to be placed in this method.
        ''' </summary>
        ''' <Returns>Return true to override the generated rules If false generated rules will be run.</Returns>
        Protected Function AddBusinessValidationRules() As Boolean
            ' TODO: add validation rules
            'ValidationRules.AddRule(RuleMethod, "")
    
            Return False
        End Function
    
#End Region
    
#Region "Authorization Rules"
    
    
        Protected Overrides Sub AddAuthorizationRules()
            ''More information on these rules can be found here (http://www.devx.com/codemag/Article/40663/1763/page/2).
    
            'Dim canWrite As String() = { "AdminUser", "RegularUser" }
            'Dim canRead As String() = { "AdminUser", "RegularUser", "ReadOnlyUser" }
            'Dim admin As String() = { "AdminUser" }
    
            'AuthorizationRules.AllowCreate(GetType(Profile), admin)
            'AuthorizationRules.AllowDelete(GetType(Profile), admin)
            'AuthorizationRules.AllowEdit(GetType(Profile), canWrite)
            'AuthorizationRules.AllowGet(GetType(Profile), canRead)
    
            ''UniqueID
            'AuthorizationRules.AllowRead(_uniqueIDProperty, canRead)
    
            ''Username
            'AuthorizationRules.AllowWrite(_usernameProperty, canWrite)
            'AuthorizationRules.AllowRead(_usernameProperty, canRead)
    
            ''ApplicationName
            'AuthorizationRules.AllowWrite(_applicationNameProperty, canWrite)
            'AuthorizationRules.AllowRead(_applicationNameProperty, canRead)
    
            ''IsAnonymous
            'AuthorizationRules.AllowWrite(_isAnonymousProperty, canWrite)
            'AuthorizationRules.AllowRead(_isAnonymousProperty, canRead)
    
            ''LastActivityDate
            'AuthorizationRules.AllowWrite(_lastActivityDateProperty, canWrite)
            'AuthorizationRules.AllowRead(_lastActivityDateProperty, canRead)
    
            ''LastUpdatedDate
            'AuthorizationRules.AllowWrite(_lastUpdatedDateProperty, canWrite)
            'AuthorizationRules.AllowRead(_lastUpdatedDateProperty, canRead)
    
    ' NOTE: Many-To-Many support coming soon.
            ''Accounts
            'AuthorizationRules.AllowRead(_accountsProperty, canRead)
    
            ''Carts
            'AuthorizationRules.AllowRead(_cartsProperty, canRead)
    
        End Sub
    
#End Region

#Region "Custom Factory Methods"

    Public Shared Function GetProfile(ByVal username As String) As Profile
        Dim criteria As New ProfileCriteria()
        criteria.Username = username

        Return DataPortal.Fetch(Of Profile)(criteria)
    End Function

#End Region

#Region "Custom Business Methods"

    Private Shared ReadOnly _shoppingCart As PropertyInfo(Of CartList) = RegisterProperty(Of CartList)(Function(p As Profile) p.ShoppingCart, Csla.RelationshipTypes.LazyLoad)
    Public ReadOnly Property ShoppingCart() As CartList
        Get
            If Not FieldManager.FieldExists(_shoppingCart) Then
                SetProperty(_shoppingCart, CartList.GetCart(UniqueID, True))
            End If

            Return GetProperty(_shoppingCart)
        End Get
    End Property

    Private Shared ReadOnly _wishList As PropertyInfo(Of CartList) = RegisterProperty(Of CartList)(Function(p As Profile) p.WishList, Csla.RelationshipTypes.LazyLoad)
    Public ReadOnly Property WishList() As CartList
        Get
            If Not FieldManager.FieldExists(_wishList) Then
                SetProperty(_wishList, CartList.GetCart(UniqueID, False))
            End If

            Return GetProperty(_wishList)
        End Get
    End Property

#End Region

    End Class
End Namespace