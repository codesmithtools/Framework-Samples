'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v6.5.0, CSLA Templates: v4.0.0.0, CSLA Framework: v4.3.10.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Item.vb'.
'
'     Template: ObjectFactory.DataAccess.StoredProcedures.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports Csla
Imports Csla.Data
Imports Csla.Server

Imports PetShop.Tests.OF.StoredProcedures

Namespace PetShop.Tests.OF.StoredProcedures.DAL
    Public Partial Class ItemFactory
        Inherits ObjectFactory
    
#Region "Create"
    
        ''' <summary>
        ''' Creates New Item with default values.
        ''' </summary>
        ''' <Returns>New Item.</Returns>
        <RunLocal()> _
        Public Function Create() As Item
            Dim item As Item = CType(Activator.CreateInstance(GetType(Item), True), Item)
    
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return item
            End If
    
            Using BypassPropertyChecks(item)
                ' Default values.
                item.ProductId = "BN"
    
                CheckRules(item)
                MarkNew(item)
            End Using
    
            OnCreated()
    
            Return item
        End Function
    
        ''' <summary>
        ''' Creates New Item with default values.
        ''' </summary>
        ''' <Returns>New Item.</Returns>
        <RunLocal()> _
        Private Function Create(ByVal criteria As ItemCriteria) As  Item
            Dim item As Item = CType(Activator.CreateInstance(GetType(Item), True), Item)
    
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return item
            End If
    
            Dim resource As Item = Fetch(criteria)
    
            Using BypassPropertyChecks(item)
                item.ListPrice = resource.ListPrice
                item.UnitCost = resource.UnitCost
                item.Status = resource.Status
                item.Name = resource.Name
                item.Image = resource.Image
            End Using
    
            CheckRules(item)
            MarkNew(item)
    
            OnCreated()
    
            Return item
        End Function
    
#End Region

#Region "Fetch"
    
        ''' <summary>
        ''' Fetch Item.
        ''' </summary>
        ''' <param name="criteria">The criteria.</param>
        Public Function Fetch(ByVal criteria As ItemCriteria) As Item
            Dim item As Item = Nothing
            
            Dim cancel As Boolean = False
            OnFetching(criteria, cancel)
            If (cancel) Then
                Return item
            End If
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Select]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
                    command.Parameters.AddWithValue("@p_ListPriceHasValue", criteria.ListPriceHasValue)
                command.Parameters.AddWithValue("@p_UnitCostHasValue", criteria.UnitCostHasValue)
                command.Parameters.AddWithValue("@p_SupplierHasValue", criteria.SupplierHasValue)
                command.Parameters.AddWithValue("@p_StatusHasValue", criteria.StatusHasValue)
                command.Parameters.AddWithValue("@p_NameHasValue", criteria.NameHasValue)
                command.Parameters.AddWithValue("@p_ImageHasValue", criteria.ImageHasValue)
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        If reader.Read() Then
                            item = Map(reader)
                        Else
                            Throw New Exception(String.Format("The record was not found In 'dbo.Item' using the following criteria: {0}.", criteria))
                        End If
                    End Using
                End Using
            End Using
    
            MarkOld(item)
    
            OnFetched()
    
            Return item
        End Function
    
#End Region
    
#Region "Insert"
    
        Private Sub DoInsert(ByRef item As Item, ByVal stopProccessingChildren As Boolean)
            ' Don't update If the item isn't dirty.
            If Not (item.IsDirty) Then
                Return
            End If
    
            Dim cancel As Boolean = False
            OnInserting(cancel)
            If (cancel) Then
                Return
            End If
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Insert]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddWithValue("@p_ItemId", item.ItemId)
                command.Parameters.AddWithValue("@p_ProductId", item.ProductId)
                command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(item.ListPrice))
                command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(item.UnitCost))
                command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(item.Supplier))
                command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(item.Status))
                command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(item.Name))
                command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(item.Image))
    
                    command.ExecuteNonQuery()
    
                End Using
            End Using
    
            item.OriginalItemId = item.ItemId
    
            MarkOld(item)
            CheckRules(item)
            
            If Not (stopProccessingChildren) Then
                ' Update Child Items.
                Update_Product_Product_FK__Item__ProductId__117F9D94(item)
                Update_SupplierMember_SupplierMember_FK__Item__Supplier__1273C1CD(item)
            End If
    
            OnInserted()
        End Sub
    
#End Region

#Region "Update"
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Public Function Update(ByVal item As Item) As Item
            Return Update(item, false)
        End Function
    
        Public Function Update(ByVal item As Item, ByVal stopProccessingChildren as Boolean) As Item
            If(item.IsDeleted) Then
                DoDelete(item)
                MarkNew(item)
            Else If(item.IsNew) Then
                DoInsert(item, stopProccessingChildren)
            Else
            DoUpdate(item, stopProccessingChildren)
            End If
    
            Return item
        End Function
    
        Private Sub DoUpdate(ByRef item As Item, ByVal stopProccessingChildren As Boolean)
            Dim cancel As Boolean = False
            OnUpdating(cancel)
            If (cancel) Then
                Return
            End If
    
            ' Don't update If the item isn't dirty.
            If (item.IsDirty) Then
    
                If Not item.OriginalItemId = item.ItemId Then
                    ' Insert new child.
                    Dim temp As Item = CType(Activator.CreateInstance(GetType(Item), True), Item)
                                temp.ItemId = item.ItemId
            temp.ProductId = item.ProductId
            temp.ListPrice = item.ListPrice.Value
            temp.UnitCost = item.UnitCost.Value
            temp.Supplier = item.Supplier.Value
            temp.Status = item.Status
            temp.Name = item.Name
            temp.Image = item.Image
                    temp = temp.Save()
    
                    ' Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
    
                    ' Update Child Items.
                    Update_Product_Product_FK__Item__ProductId__117F9D94(item)
                    Update_SupplierMember_SupplierMember_FK__Item__Supplier__1273C1CD(item)
        
                    ' Delete the old.
                    Dim criteria As New ItemCriteria()
                                criteria.ItemId = item.OriginalItemId
                    Delete(criteria)
        
                    ' Mark the original as the new one.
                    item.OriginalItemId = item.ItemId

                    MarkOld(item)
                    CheckRules(item)
    
                    OnUpdated()
    
                    Return
                End If
    
                Using connection As New SqlConnection(ADOHelper.ConnectionString)
                    connection.Open()
                    Using command As New SqlCommand("[dbo].[CSLA_Item_Update]", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.AddWithValue("@p_OriginalItemId", item.OriginalItemId)
                command.Parameters.AddWithValue("@p_ItemId", item.ItemId)
                command.Parameters.AddWithValue("@p_ProductId", item.ProductId)
                command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(item.ListPrice))
                command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(item.UnitCost))
                command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(item.Supplier))
                command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(item.Status))
                command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(item.Name))
                command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(item.Image))
    
                        'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                        Dim result As Integer = command.ExecuteNonQuery()
                        If (result = 0) Then
                            throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                        End If
                        
                    End Using
                End Using
            End If
    
            item.OriginalItemId = item.ItemId

            MarkOld(item)
            CheckRules(item)

            If Not (stopProccessingChildren) Then
                ' Update Child Items.
                Update_Product_Product_FK__Item__ProductId__117F9D94(item)
                Update_SupplierMember_SupplierMember_FK__Item__Supplier__1273C1CD(item)
            End If

            OnUpdated()
        End Sub

#End Region

#Region "Delete"

        <Transactional(TransactionalTypes.TransactionScope)> _
        Public Sub Delete(ByVal criteria As ItemCriteria)
            ' Note: this call to delete is for immediate deletion and doesn't keep track of any entity state.
            DoDelete(criteria)
        End Sub

        Protected Sub DoDelete(ByRef item As Item)
            ' If we're not dirty then don't update the database.
            If Not (item.IsDirty) Then
                Return
            End If

            ' If we're New then don't call delete.
            If (item.IsNew) Then
                Return
            End If
    
            Dim criteria As New ItemCriteria()
                criteria.ItemId = item.ItemId
            DoDelete(criteria)

            MarkNew(item)
        End Sub

        Private Sub DoDelete(ByVal criteria As ItemCriteria)
            Dim cancel As Boolean = False
            OnDeleting(criteria, cancel)
            If (cancel) Then
                Return
            End If

            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Delete]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))

                    'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    Dim result As Integer = command.ExecuteNonQuery()
                    If (result = 0) Then
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
                End Using
            End Using

            OnDeleted()
        End Sub

#End Region

#Region "Helper Methods"
    
        Public Function Map(ByVal reader As SafeDataReader) As Item
            Dim item As Item = CType(Activator.CreateInstance(GetType(Item), True), Item)
            Using BypassPropertyChecks(item)
                item.ItemId = reader.GetString("ItemId")
                item.OriginalItemId = reader.GetString("ItemId")
                item.ProductId = reader.GetString("ProductId")
                item.ListPrice = If(reader.IsDBNull("ListPrice"), Nothing, reader.GetDecimal("ListPrice"))
                item.UnitCost = If(reader.IsDBNull("UnitCost"), Nothing, reader.GetDecimal("UnitCost"))
                item.Supplier = If(reader.IsDBNull("Supplier"), Nothing, reader.GetInt32("Supplier"))
                item.Status = reader.GetString("Status")
                item.Name = reader.GetString("Name")
                item.Image = reader.GetString("Image")
            End Using

            MarkOld(item)

            Return item
        End Function
    
        'Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne)
        Private Shared Sub Update_Product_Product_FK__Item__ProductId__117F9D94(ByRef item As Item)
            item.Product.ProductId = item.ProductId

            Dim factory As New ProductFactory
            factory.Update(item.Product, True)
        End Sub
        'Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne)
        Private Shared Sub Update_SupplierMember_SupplierMember_FK__Item__Supplier__1273C1CD(ByRef item As Item)
            item.SupplierMember.SuppId = item.Supplier.Value

            Dim factory As New SupplierFactory
            factory.Update(item.SupplierMember, True)
        End Sub

#End Region

#Region "DataPortal partial methods"
    
        ''' <summary>
        ''' CodeSmith generated stub method that is called when creating the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnCreating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been created. 
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when fetching the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ItemCriteria"/> object containing the criteria of the object to fetch.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        Partial Private Sub OnFetching(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been fetched. 
        ''' </summary>    
        Partial Private Sub OnFetched()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByRef cancel As Boolean)
        End Sub
 
        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="reader"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByVal reader As SafeDataReader, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been mapped. 
        ''' </summary>
        Partial Private Sub OnMapped()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnInserting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been inserted. 
        ''' </summary>
        Partial Private Sub OnInserted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnUpdating(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been updated. 
        ''' </summary>
        Partial Private Sub OnUpdated()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when self deleting the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        Partial Private Sub OnSelfDeleting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been deleted. 
        ''' </summary>
        Partial Private Sub OnSelfDeleted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when deleting the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ItemCriteria"/> object containing the criteria of the object to delete.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        Partial Private Sub OnDeleting(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object with the specified criteria has been deleted. 
        ''' </summary>
        Partial Private Sub OnDeleted()
        End Sub
        Private Partial Sub OnChildLoading(ByVal childProperty As Global.Csla.Core.IPropertyInfo, ByRef cancel As Boolean)
        End Sub
    
#End Region
    End Class
End Namespace