'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v6.5.0, CSLA Templates: v4.0.0.0, CSLA Framework: v4.3.10.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Inventory.vb.
'
'     Template path: EditableRoot.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data

Imports Csla.Rules

Namespace PetShop.Tests.OF.StoredProcedures
    <Serializable()> _
    <Csla.Server.ObjectFactory(FactoryNames.InventoryFactoryName)> _
    Public Partial Class Inventory
        Inherits BusinessBase(Of Inventory)
    
#Region "Contructor(s)"

        public Sub New()
            ' require use of factory method 
        End Sub

#End Region    
#Region "Business Rules"

        ''' <summary>
        ''' Contains the CodeSmith generated validation rules.
        ''' </summary>
        Protected Overrides Sub AddBusinessRules()
            ' Call the base class, if this call isn't made than any declared System.ComponentModel.DataAnnotations rules will not work.
            MyBase.AddBusinessRules()

            If AddBusinessValidationRules() Then Exit Sub
    
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.Required(_itemIdProperty))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_itemIdProperty, 10))
        End Sub
    
#End Region

#Region "Properties"
    
        Private Shared ReadOnly _itemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Inventory) p.ItemId, "Item Id")
        
        <System.ComponentModel.DataObjectField(true, false)> _
        Public Property ItemId() As System.String
            Get 
                Return GetProperty(_itemIdProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_itemIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _originalItemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Inventory) p.OriginalItemId, "Original Item Id")
        ''' <summary>
        ''' Holds the original value for ItemId. This is used for non identity primary keys.
        ''' </summary>
        Friend Property OriginalItemId() As System.String
            Get 
                Return GetProperty(_originalItemIdProperty) 
            End Get
            Set (value As System.String)
                SetProperty(_originalItemIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _qtyProperty As PropertyInfo(Of System.Int32) = RegisterProperty(Of System.Int32)(Function(p As Inventory) p.Qty, "Qty")
        
        Public Property Qty() As System.Int32
            Get 
                Return GetProperty(_qtyProperty)
            End Get
            Set (ByVal value As System.Int32)
                SetProperty(_qtyProperty, value)
            End Set
        End Property

#End Region
    
#Region "Synchronous Factory Methods"

        ''' <summary>
        ''' Creates a new object of type <see cref="Inventory"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="Inventory"/>.</returns>    
        Public Shared Function NewInventory() As Inventory
            Return DataPortal.Create(Of Inventory)()
        End Function
        ''' <summary>
        ''' Returns a <see cref="Inventory"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="itemId">No additional detail available.</param>
        ''' <returns>A <see cref="Inventory"/> object of the specified criteria.</returns>
        Public Shared Function GetByItemId(ByVal itemId As System.String) As Inventory
            Dim criteria As New InventoryCriteria()
                        criteria.ItemId = itemId
            
            Return DataPortal.Fetch(Of Inventory)(criteria)
        End Function
    
        Public Shared Sub DeleteInventory(ByVal itemId As System.String)
            DataPortal.Delete(Of Inventory)(New InventoryCriteria(itemId))
        End Sub

#End Region

#Region "Asynchronous Factory Methods"

        Public Shared Sub NewInventoryAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Inventory)))
            Dim dp As New DataPortal(Of Inventory)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    
        Public Shared Sub GetByItemIdAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Inventory)))
            Dim dp As New DataPortal(Of Inventory)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New InventoryCriteria()
            criteria.ItemId = itemId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub DeleteInventoryDeleteInventoryAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Inventory)))
            Dim dp As New DataPortal(Of Inventory)()
            AddHandler dp.DeleteCompleted, handler
            dp.BeginDelete(New InventoryCriteria (itemId))
        End Sub
    

#End Region

#Region "Overridden properties"
    
            ''' <summary>
            ''' Returns true if the business object or any of its children properties are dirty.
            ''' </summary>
            Public Overloads Overrides ReadOnly Property IsDirty() As Boolean
                Get
                    If MyBase.IsDirty Then
                        Return True
                    End If
    
                    Return False
                End Get
            End Property
    
#End Region
    
#Region "DataPortal partial methods"
    
        ''' <summary>
        ''' CodeSmith generated stub method that is called when creating the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnCreating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Inventory"/> object has been created. 
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when fetching the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="InventoryCriteria"/> object containing the criteria of the object to fetch.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        Partial Private Sub OnFetching(ByVal criteria As InventoryCriteria, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Inventory"/> object has been fetched. 
        ''' </summary>    
        Partial Private Sub OnFetched()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByRef cancel As Boolean)
        End Sub
 
        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="reader"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByVal reader As SafeDataReader, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Inventory"/> object has been mapped. 
        ''' </summary>
        Partial Private Sub OnMapped()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnInserting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Inventory"/> object has been inserted. 
        ''' </summary>
        Partial Private Sub OnInserted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnUpdating(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Inventory"/> object has been updated. 
        ''' </summary>
        Partial Private Sub OnUpdated()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when self deleting the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        Partial Private Sub OnSelfDeleting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Inventory"/> object has been deleted. 
        ''' </summary>
        Partial Private Sub OnSelfDeleted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when deleting the <see cref="Inventory"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="InventoryCriteria"/> object containing the criteria of the object to delete.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        Partial Private Sub OnDeleting(ByVal criteria As InventoryCriteria, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Inventory"/> object with the specified criteria has been deleted. 
        ''' </summary>
        Partial Private Sub OnDeleted()
        End Sub
        Private Partial Sub OnChildLoading(ByVal childProperty As Global.Csla.Core.IPropertyInfo, ByRef cancel As Boolean)
        End Sub
    
#End Region
#Region "Exists Command"

        ''' <summary>
        ''' Determines if a record exists in the [dbo].[Inventory] table in the database for the specified criteria. 
        ''' </summary>
        ''' <param name="criteria">The criteria parameter is an <see cref="Inventory"/> object.</param>
        ''' <returns>A boolean value of true is returned if a record is found.</returns>
        Public Shared Function Exists(ByVal criteria As InventoryCriteria) As Boolean
            Return PetShop.Tests.OF.StoredProcedures.ExistsCommand.Execute(criteria)
        End Function

        ''' <summary>
        ''' Determines if a record exists in the [dbo].[Inventory] table in the database for the specified criteria. 
        ''' </summary>
        Public Shared Sub ExistsAsync(ByVal criteria As InventoryCriteria, ByVal handler As EventHandler(Of DataPortalResult(Of ExistsCommand)))
            PetShop.Tests.OF.StoredProcedures.ExistsCommand.ExecuteAsync(criteria, handler)
        End Sub

#End Region
    End Class
End Namespace
