'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v6.5.0, CSLA Templates: v4.0.0.0, CSLA Framework: v4.3.10.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'ProductList.vb.
'
'     Template: EditableChildList.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Collections.Generic
Imports System.Linq

Imports Csla
Imports Csla.Data

Namespace PetShop.Tests.StoredProcedures
    <Serializable()> _
    Public Partial Class ProductList 
        Inherits BusinessListBase(Of ProductList, Product)
    
#Region "Contructor(s)"

        public Sub New()
            AllowNew = true
            MarkAsChild()
        End Sub
    
#End Region

#Region "Synchronous Factory Methods" 

        ''' <summary>
        ''' Creates a new object of type <see cref="ProductList"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="ProductList"/>.</returns>
        Friend Shared Function NewList() As ProductList
            Return DataPortal.CreateChild(Of ProductList)()
        End Function

        ''' <summary>
        ''' Returns a <see cref="ProductList"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="productId">No additional detail available.</param>
        ''' <returns>A <see cref="ProductList"/> object of the specified criteria.</returns>
        Friend Shared Function GetByProductId(ByVal productId As System.String) As ProductList 
            Dim criteria As New ProductCriteria()
                        criteria.ProductId = productId
    
            Return DataPortal.FetchChild(Of ProductList)(criteria)
        End Function

        ''' <summary>
        ''' Returns a <see cref="ProductList"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <returns>A <see cref="ProductList"/> object of the specified criteria.</returns>
        Friend Shared Function GetByCategoryId(ByVal categoryId As System.String) As ProductList 
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
    
            Return DataPortal.FetchChild(Of ProductList)(criteria)
        End Function

        ''' <summary>
        ''' Returns a <see cref="ProductList"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="ProductList"/> object of the specified criteria.</returns>
        Friend Shared Function GetByName(ByVal name As System.String) As ProductList 
            Dim criteria As New ProductCriteria()
                        criteria.Name = name
    
            Return DataPortal.FetchChild(Of ProductList)(criteria)
        End Function

        ''' <summary>
        ''' Returns a <see cref="ProductList"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="ProductList"/> object of the specified criteria.</returns>
        Friend Shared Function GetByCategoryIdName(ByVal categoryId As System.String, ByVal name As System.String) As ProductList 
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
            criteria.Name = name
    
            Return DataPortal.FetchChild(Of ProductList)(criteria)
        End Function

        ''' <summary>
        ''' Returns a <see cref="ProductList"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <param name="productId">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="ProductList"/> object of the specified criteria.</returns>
        Friend Shared Function GetByCategoryIdProductIdName(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String) As ProductList 
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
            criteria.ProductId = productId
            criteria.Name = name
    
            Return DataPortal.FetchChild(Of ProductList)(criteria)
        End Function

        Friend Shared Function GetByCriteria(ByVal criteria As ProductCriteria) As ProductList
            Return DataPortal.Fetch(Of ProductList)(criteria)
        End Function

        Friend Shared Function GetAll() As ProductList
            Return DataPortal.FetchChild(Of ProductList)(New ProductCriteria())
        End Function

#End Region
    
#Region "Asynchronous Factory Methods"

        Friend Shared Sub NewListAsync(ByVal handler As EventHandler(Of DataPortalResult(Of ProductList)))
            Dim dp As New DataPortal(Of ProductList)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    
        Friend Shared Sub GetByProductIdAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of AsyncChildLoader(Of ProductList))))
            Dim criteria As New ProductCriteria()
                        criteria.ProductId = productId

            DataPortal.BeginFetch(Of AsyncChildLoader(Of ProductList))(criteria, handler)
        End Sub
    
        Friend Shared Sub GetByCategoryIdAsync(ByVal categoryId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of AsyncChildLoader(Of ProductList))))
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId

            DataPortal.BeginFetch(Of AsyncChildLoader(Of ProductList))(criteria, handler)
        End Sub
    
        Friend Shared Sub GetByNameAsync(ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of AsyncChildLoader(Of ProductList))))
            Dim criteria As New ProductCriteria()
                        criteria.Name = name

            DataPortal.BeginFetch(Of AsyncChildLoader(Of ProductList))(criteria, handler)
        End Sub
    
        Friend Shared Sub GetByCategoryIdNameAsync(ByVal categoryId As System.String, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of AsyncChildLoader(Of ProductList))))
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
            criteria.Name = name

            DataPortal.BeginFetch(Of AsyncChildLoader(Of ProductList))(criteria, handler)
        End Sub
    
        Friend Shared Sub GetByCategoryIdProductIdNameAsync(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of AsyncChildLoader(Of ProductList))))
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
            criteria.ProductId = productId
            criteria.Name = name

            DataPortal.BeginFetch(Of AsyncChildLoader(Of ProductList))(criteria, handler)
        End Sub

        Friend Shared Sub GetByCriteriaAsync(ByVal criteria As ProductCriteria, ByVal handler As EventHandler(Of DataPortalResult(Of ProductList)))
            Dim dp As New DataPortal(Of ProductList)()
            AddHandler dp.FetchCompleted, handler

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetAllAsync(ByVal handler As EventHandler(Of DataPortalResult(Of AsyncChildLoader(Of ProductList))))
            DataPortal.BeginFetch(Of AsyncChildLoader(Of ProductList))(New ProductCriteria(), handler)
        End Sub 

#End Region
    
#Region "Method Overrides"
    
        Protected Overrides Function AddNewCore() As Product
            Dim item As Product = PetShop.Tests.StoredProcedures.Product.NewProductChild()

            Dim cancel As Boolean = False
            OnAddNewCore(item, cancel)
            If Not (cancel) Then
                ' Check to see if someone set the item to null In the OnAddNewCore.
                If(item Is Nothing) Then
                    item = PetShop.Tests.StoredProcedures.Product.NewProductChild()
                End If
            ' Pass the parent value down to the child.
                Dim category As Category = CType(Me.Parent, Category)
                If Not(category Is Nothing)
                    item.CategoryId = category.CategoryId
                End If
                Add(item)
            End If

            Return item
        End Function
#End Region

        Protected Sub AddNewCoreAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            PetShop.Tests.StoredProcedures.Product.NewProductChildAsync(Sub(o, e)
                    If e.Error Is Nothing Then
                        Add(e.Object)
                        handler.Invoke(Me, New DataPortalResult(Of Product)(e.Object, Nothing, Nothing))
                    End If
                End Sub)
        End Sub

#Region "DataPortal partial methods"
    
        ''' <summary>
        ''' CodeSmith generated stub method that is called when creating the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnCreating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been created. 
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when fetching the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ProductCriteria"/> object containing the criteria of the object to fetch.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        Partial Private Sub OnFetching(ByVal criteria As ProductCriteria, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been fetched. 
        ''' </summary>
        Partial Private Sub OnFetched()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="reader"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByVal reader As SafeDataReader, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been mapped. 
        ''' </summary>
        Partial Private Sub OnMapped()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnUpdating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object has been updated. 
        ''' </summary>
        Partial Private Sub OnUpdated()
        End Sub
        Partial Private Sub OnAddNewCore(ByRef item As Product, ByRef cancel As Boolean)
        End Sub
    
#End Region
#Region "Exists Command"

        ''' <summary>
        ''' Determines if a record exists in the Product in the database for the specified criteria. 
        ''' </summary>
        ''' <param name="criteria">The criteria parameter is a <see cref="ProductList"/> object.</param>
        ''' <returns>A boolean value of true is returned if a record is found.</returns>
        Public Shared Function Exists(ByVal criteria As ProductCriteria) As Boolean
            Return PetShop.Tests.StoredProcedures.Product.Exists(criteria)
        End Function

        ''' <summary>
        ''' Determines if a record exists in the Product in the database for the specified criteria. 
        ''' </summary>
        Public Shared Sub ExistsAsync(ByVal criteria As ProductCriteria, ByVal handler As EventHandler(Of DataPortalResult(Of ExistsCommand)))
            PetShop.Tests.StoredProcedures.Product.ExistsAsync(criteria, handler)
        End Sub

#End Region
 
#region "Enhancements"

        Public Function GetProduct(ByVal productId As System.String) As Product
            Return Me.FirstOrDefault(Function(i As Product) i.ProductId = productId)
        End Function
        
        Public Overloads Function Contains(ByVal productId As System.String) As Boolean
            Return Me.Where(Function(i As Product) i.ProductId = productId).Count() > 0
        End Function

        Public Overloads Function ContainsDeleted(ByVal productId As System.String) As Boolean
            Return DeletedList.Where(Function(i As Product) i.ProductId = productId).Count() > 0
        End Function

        Public Overloads Sub Remove(ByVal productId As System.String)
            Dim item As Product = Me.FirstOrDefault(Function(i As Product) i.ProductId = productId)
            If item IsNot Nothing Then
                Remove(item)
            End If
        End Sub
        
#End Region
    End Class
End Namespace