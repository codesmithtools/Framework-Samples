'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v5.2.3, CSLA Templates: v3.0.1.1934, CSLA Framework: v3.8.4.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Item.vb.
'
'     Template: SwitchableObject.DataAccess.StoredProcedures.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Linq

Imports Csla
Imports Csla.Data

Namespace PetShop.Tests.StoredProcedures
    Public Partial Class Item
    
#Region "Root Data Access"
    
        <RunLocal()> _
        Protected Overrides Sub DataPortal_Create()
            Dim cancel As Boolean = False
            OnCreating(cancel)
            If (cancel) Then
                Return
            End If
    
            ProductId = "BN"
            ValidationRules.CheckRules()
    
            OnCreated()
        End Sub
    
        Private Shadows Sub DataPortal_Fetch(ByVal criteria As ItemCriteria )
            Dim cancel As Boolean = False
            OnFetching(criteria, cancel)
            If (cancel) Then
                Return
            End If
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Select]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
                    command.Parameters.AddWithValue("@p_ListPriceHasValue", criteria.ListPriceHasValue)
					command.Parameters.AddWithValue("@p_UnitCostHasValue", criteria.UnitCostHasValue)
					command.Parameters.AddWithValue("@p_SupplierHasValue", criteria.SupplierHasValue)
					command.Parameters.AddWithValue("@p_StatusHasValue", criteria.StatusHasValue)
					command.Parameters.AddWithValue("@p_NameHasValue", criteria.NameHasValue)
					command.Parameters.AddWithValue("@p_ImageHasValue", criteria.ImageHasValue)
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        If reader.Read() Then
                            Map(reader)
                        Else
                            Throw New Exception(String.Format("The record was not found in 'Item' using the following criteria: {0}.", criteria))
                        End If
                    End Using
                End Using
            End Using
    
            OnFetched()
        End Sub
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Protected Overrides Sub DataPortal_Insert()
            Dim cancel As Boolean = False
            OnInserting(cancel)
            If (cancel) Then
                Return
            End If
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Insert]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddWithValue("@p_ItemId", Me.ItemId)
				command.Parameters.AddWithValue("@p_ProductId", Me.ProductId)
				command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(Me.ListPrice))
				command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(Me.UnitCost))
				command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(Me.Supplier))
				command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(Me.Status))
				command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(Me.Name))
				command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(Me.Image))
    
                    command.ExecuteNonQuery()
    
                    Using (BypassPropertyChecks)
                    End Using
                End Using
                
                _originalItemId = Me.ItemId
    
                FieldManager.UpdateChildren(Me, connection)
            End Using
    
            OnInserted()
        End Sub
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Protected Overrides Sub DataPortal_Update()
            Dim cancel As Boolean = False
            OnUpdating(cancel)
            If (cancel) Then
                Return
            End If
    
            If Not OriginalItemId = ItemId Then
                ' Insert new child.
                Dim item As New Item()
                item.ItemId = ItemId
			item.ProductId = ProductId
			item.ListPrice = ListPrice.Value
			item.UnitCost = UnitCost.Value
			item.Supplier = Supplier.Value
			item.Status = Status
			item.Name = Name
			item.Image = Image
                item = item.Save()
    
                ' Mark child lists as dirty. This code may need to be updated to one-to-one relationships.
    
                ' Create a new connection.
                Using connection As New SqlConnection(ADOHelper.ConnectionString)
                    connection.Open()
                    FieldManager.UpdateChildren(Me, connection)
                End Using
    
                ' Delete the old.
                Dim criteria As New ItemCriteria()
                criteria.ItemId = OriginalItemId
                DataPortal_Delete(criteria)
    
                ' Mark the original as the new one.
                OriginalItemId = ItemId
                OnUpdated()
    
                Return
            End If
    
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Update]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddWithValue("@p_OriginalItemId", Me.OriginalItemId)
				command.Parameters.AddWithValue("@p_ItemId", Me.ItemId)
				command.Parameters.AddWithValue("@p_ProductId", Me.ProductId)
				command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(Me.ListPrice))
				command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(Me.UnitCost))
				command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(Me.Supplier))
				command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(Me.Status))
				command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(Me.Name))
				command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(Me.Image))
    
                    'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    Dim result As Integer = command.ExecuteNonQuery()
                    If (result = 0) Then
                        throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
    
                _originalItemId = Me.ItemId
                End Using
    
                FieldManager.UpdateChildren(Me, connection)
            End Using
    
            OnUpdated()
        End Sub
    
        Protected Overrides Sub DataPortal_DeleteSelf()
            Dim cancel As Boolean = False
            OnSelfDeleting(cancel)
            If (cancel) Then
                Return
            End If
        
            DataPortal_Delete(New ItemCriteria (_itemId))
        
            OnSelfDeleted()
        End Sub
    
        <Transactional(TransactionalTypes.TransactionScope)> _
        Protected Shadows Sub DataPortal_Delete(ByVal criteria As ItemCriteria )
            Dim cancel As Boolean = False
            OnDeleting(criteria, cancel)
            If (cancel) Then
                Return
            End If
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Delete]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
    
                    'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                    Dim result As Integer = command.ExecuteNonQuery()
                    If (result = 0) Then
                        Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                    End If
                End Using
            End Using
    
            OnDeleted()
        End Sub
    
        '<Transactional(TransactionalTypes.TransactionScope)> _
        Protected Shadows Sub DataPortal_Delete(ByVal criteria As ItemCriteria, ByVal connection As SqlConnection)
            Dim cancel As Boolean = False
            OnDeleting(criteria, cancel)
            If (cancel) Then
                Return
            End If
    
            Using command As New SqlCommand("[dbo].[CSLA_Item_Delete]", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
    
                'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                Dim result As Integer = command.ExecuteNonQuery()
                If (result = 0) Then
                    Throw New DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
            End Using
    
            OnDeleted()
        End Sub
    
#End Region
    
#Region "Child Data Access"
    
        <RunLocal()> _
        Protected Overrides Sub Child_Create()
            Dim cancel As Boolean = False
            OnChildCreating(cancel)
            If (cancel) Then
                Return
            End If
    
            ProductId = "BN"
            ValidationRules.CheckRules()
    
            OnChildCreated()
        End Sub
        
        Private Sub Child_Fetch(ByVal criteria As ItemCriteria)
            Dim cancel As Boolean = False
            OnChildFetching(criteria, cancel)
            If (cancel) Then
                Return
            End If
    
            Using connection As New SqlConnection(ADOHelper.ConnectionString)
                connection.Open()
                Using command As New SqlCommand("[dbo].[CSLA_Item_Select]", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag))
                    command.Parameters.AddWithValue("@p_ListPriceHasValue", criteria.ListPriceHasValue)
					command.Parameters.AddWithValue("@p_UnitCostHasValue", criteria.UnitCostHasValue)
					command.Parameters.AddWithValue("@p_SupplierHasValue", criteria.SupplierHasValue)
					command.Parameters.AddWithValue("@p_StatusHasValue", criteria.StatusHasValue)
					command.Parameters.AddWithValue("@p_NameHasValue", criteria.NameHasValue)
					command.Parameters.AddWithValue("@p_ImageHasValue", criteria.ImageHasValue)
                    Using reader As SafeDataReader = New SafeDataReader(command.ExecuteReader())
                        If reader.Read() Then
                            Map(reader)
                        Else
                            Throw New Exception(String.Format("The record was not found in 'Item' using the following criteria: {0}.", criteria))
                        End If
                    End Using
                End Using
            End Using
    
            OnChildFetched()
            MarkAsChild()
        End Sub
    
#Region "Child_Insert"
    
        Private Sub Child_Insert(ByVal connection as SqlConnection)
            Dim cancel As Boolean = False
            OnChildInserting(connection, cancel)
            If (cancel) Then
                Return
            End If
    
            If Not (connection.State = ConnectionState.Open) Then connection.Open()
            Using command As New SqlCommand("[dbo].[CSLA_Item_Insert]", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddWithValue("@p_ItemId", Me.ItemId)
				command.Parameters.AddWithValue("@p_ProductId", Me.ProductId)
				command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(Me.ListPrice))
				command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(Me.UnitCost))
				command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(Me.Supplier))
				command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(Me.Status))
				command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(Me.Name))
				command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(Me.Image))
    
                command.ExecuteNonQuery()
    
    
                ' Update the original non-identity primary key value.
                _originalItemId = Me.ItemId
    
            End Using
    
            FieldManager.UpdateChildren(Me, connection)
    
            OnChildInserted()
        End Sub
    
        Private Sub Child_Insert(ByVal product As Product, ByVal connection As SqlConnection)
        Child_Insert(product, Nothing, connection)
        End Sub
    
        Private Sub Child_Insert(ByVal supplier As Supplier, ByVal connection As SqlConnection)
        Child_Insert(Nothing, supplier, connection)
        End Sub
    
        Private Sub Child_Insert(ByVal product As Product, ByVal supplier As Supplier, ByVal connection As SqlConnection)
            Dim cancel As Boolean = False
            OnChildInserting(connection, cancel)
            If (cancel) Then
                Return
            End If
    
            If Not (connection.State = ConnectionState.Open) Then connection.Open()
            Using command As New SqlCommand("[dbo].[CSLA_Item_Insert]", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddWithValue("@p_ItemId", Me.ItemId)
				command.Parameters.AddWithValue("@p_ProductId", If(Not(product Is Nothing), product.ProductId, Me.ProductId))
				command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(Me.ListPrice))
				command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(Me.UnitCost))
				command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(If(Not(supplier Is Nothing), supplier.SuppId, Me.Supplier)))
				command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(Me.Status))
				command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(Me.Name))
				command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(Me.Image))
    
                command.ExecuteNonQuery()
    
    
                ' Update the original non-identity primary key value.
                _originalItemId = Me.ItemId
    
            End Using
    
            ' Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            '   BLAKE: Parent objects in VB require a different syntax check [Please Use IsNothing(ParentObjectParameter)]            
            If(Not IsNothing(product) AndAlso Not product.ProductId = Me.ProductId) Then
                _productId = product.ProductId
            End If
    
            ' Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
            '   BLAKE: Parent objects in VB require a different syntax check [Please Use IsNothing(ParentObjectParameter)]            
            If(Not IsNothing(supplier) AndAlso Not supplier.SuppId = Me.Supplier) Then
                _supplier = supplier.SuppId
            End If
    
            ' A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            ' TODO: Please override OnChildInserted() and insert this child manually.
            'FieldManager.UpdateChildren(Me, connection)
    
            OnChildInserted()
        End Sub
    
    
#End Region
    
#Region "Child_Update"
    
        Private Sub Child_Update(ByVal connection as SqlConnection)
            Dim cancel As Boolean = False
            OnChildUpdating(connection, cancel)
            If (cancel) Then
                Return
            End If
    
            If Not connection.State = ConnectionState.Open Then connection.Open()
            Using command As New SqlCommand("[dbo].[CSLA_Item_Update]", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddWithValue("@p_OriginalItemId", Me.OriginalItemId)
				command.Parameters.AddWithValue("@p_ItemId", Me.ItemId)
				command.Parameters.AddWithValue("@p_ProductId", Me.ProductId)
				command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(Me.ListPrice))
				command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(Me.UnitCost))
				command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(Me.Supplier))
				command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(Me.Status))
				command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(Me.Name))
				command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(Me.Image))
    
                'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                Dim result As Integer = command.ExecuteNonQuery()
                If (result = 0) Then
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                ' Update non-identity primary key value.
                _itemId = DirectCast(command.Parameters("@p_ItemId").Value, System.String)
                ' Update non-identity primary key value.
                _originalItemId = Me.ItemId
            End Using
            FieldManager.UpdateChildren(Me, connection)
    
            OnChildUpdated()
        End Sub
    
        Private Sub Child_Update(ByVal product As Product, ByVal connection As SqlConnection)
        Child_Update(product, Nothing, connection)
        End Sub
    
        Private Sub Child_Update(ByVal supplier As Supplier, ByVal connection As SqlConnection)
        Child_Update(Nothing, supplier, connection)
        End Sub
    
        Private Sub Child_Update(ByVal product As Product, ByVal supplier As Supplier, ByVal connection As SqlConnection)
            Dim cancel As Boolean = False
            OnChildUpdating(connection, cancel)
            If (cancel) Then
                Return
            End If
    
            If Not connection.State = ConnectionState.Open Then connection.Open()
            Using command As New SqlCommand("[dbo].[CSLA_Item_Update]", connection)
                command.CommandType = CommandType.StoredProcedure
                command.Parameters.AddWithValue("@p_OriginalItemId", Me.OriginalItemId)
				command.Parameters.AddWithValue("@p_ItemId", Me.ItemId)
				command.Parameters.AddWithValue("@p_ProductId", If(Not(product Is Nothing), product.ProductId, Me.ProductId))
				command.Parameters.AddWithValue("@p_ListPrice", ADOHelper.NullCheck(Me.ListPrice))
				command.Parameters.AddWithValue("@p_UnitCost", ADOHelper.NullCheck(Me.UnitCost))
				command.Parameters.AddWithValue("@p_Supplier", ADOHelper.NullCheck(If(Not(supplier Is Nothing), supplier.SuppId, Me.Supplier)))
				command.Parameters.AddWithValue("@p_Status", ADOHelper.NullCheck(Me.Status))
				command.Parameters.AddWithValue("@p_Name", ADOHelper.NullCheck(Me.Name))
				command.Parameters.AddWithValue("@p_Image", ADOHelper.NullCheck(Me.Image))
    
                'result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                Dim result As Integer = command.ExecuteNonQuery()
                If (result = 0) Then
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.")
                End If
    
                ' Update non-identity primary key value.
                _itemId = DirectCast(command.Parameters("@p_ItemId").Value, System.String)
    
                'Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                If(Not IsNothing(product) AndAlso Not product.ProductId = Me.ProductId) Then
                        _productId = product.ProductId
                End If
    
                'Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                If(Not IsNothing(supplier) AndAlso Not supplier.SuppId = Me.Supplier) Then
                        _supplier = supplier.SuppId
                End If
                ' Update non-identity primary key value.
                _originalItemId = Me.ItemId
            End Using
            ' A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            ' TODO: Please override OnChildUpdated() and update this child manually.
            'FieldManager.UpdateChildren(Me, connection)
    
            OnChildUpdated()
        End Sub
    
    
#End Region
    
        Private Sub Child_DeleteSelf()
            Dim cancel As Boolean = False
            OnChildSelfDeleting(cancel)
            If (cancel) Then
                Return
            End If
        
            DataPortal_Delete(New ItemCriteria (_itemId))
        
            OnChildSelfDeleted()
        End Sub
    
        Private Sub Child_DeleteSelf(ParamArray args As Object())
        Dim connection As SqlConnection = args.OfType(Of SqlConnection)().FirstOrDefault()
        If connection Is Nothing Then
            Throw New ArgumentNullException("args", "Must contain a SqlConnection parameter.")
        End If
        
            Dim cancel As Boolean = False
            OnChildSelfDeleting(cancel)
            If (cancel) Then
                Return
            End If
        
            DataPortal_Delete(New ItemCriteria (_itemId), connection)
        
            OnChildSelfDeleted()
        End Sub
    
#End Region
    
        Private Sub Map(ByVal reader As SafeDataReader)
            Dim cancel As Boolean = False
            OnMapping(reader, cancel)
            If (cancel) Then
                Return
            End If
    
            Using(BypassPropertyChecks)
                _itemId = reader.GetString("ItemId")
                _originalItemId = reader.GetString("ItemId")
                _productId = reader.GetString("ProductId")
                _listPrice = If(reader.IsDBNull("ListPrice"), Nothing, reader.GetDecimal("ListPrice"))
                _unitCost = If(reader.IsDBNull("UnitCost"), Nothing, reader.GetDecimal("UnitCost"))
                _supplier = If(reader.IsDBNull("Supplier"), Nothing, reader.GetInt32("Supplier"))
                _status = reader.GetString("Status")
                _name = reader.GetString("Name")
                _image = reader.GetString("Image")
            End Using
    
            OnMapped()
    
            MarkOld()
        End Sub
    End Class
End Namespace
