'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v6.5.0, CSLA Templates: v4.0.0.0, CSLA Framework: v4.3.10.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Item.vb.
'
'     Template: SwitchableObject.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports System.Data.SqlClient

Imports Csla.Rules

Namespace PetShop.Tests.StoredProcedures
    <Serializable()> _
    Public Partial Class Item 
        Inherits BusinessBase(Of Item)

#Region "Contructor(s)"

        public Sub New()
            ' require use of factory method 
        End Sub

#End Region
#Region "Business Rules"

        ''' <summary>
        ''' Contains the CodeSmith generated validation rules.
        ''' </summary>
        Protected Overrides Sub AddBusinessRules()
            ' Call the base class, if this call isn't made than any declared System.ComponentModel.DataAnnotations rules will not work.
            MyBase.AddBusinessRules()

            If AddBusinessValidationRules() Then Exit Sub
    
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.Required(_itemIdProperty))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_itemIdProperty, 10))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.Required(_productIdProperty))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_productIdProperty, 10))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_statusProperty, 2))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_nameProperty, 80))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_imageProperty, 80))
        End Sub
    
#End Region

#Region "Properties"
    
        Private Shared ReadOnly _itemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.ItemId, "Item Id")
        
        <System.ComponentModel.DataObjectField(true, false)> _
        Public Property ItemId() As System.String
            Get 
                Return GetProperty(_itemIdProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_itemIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _originalItemIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.OriginalItemId, "Original Item Id")
        ''' <summary>
        ''' Holds the original value for ItemId. This is used for non identity primary keys.
        ''' </summary>
        Friend Property OriginalItemId() As System.String
            Get 
                Return GetProperty(_originalItemIdProperty) 
            End Get
            Set (value As System.String)
                SetProperty(_originalItemIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _productIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.ProductId, "Product Id")
        
        Public Property ProductId() As System.String
            Get 
                Return GetProperty(_productIdProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_productIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _listPriceProperty As PropertyInfo(Of System.Decimal?) = RegisterProperty(Of System.Decimal?)(Function(p As Item) p.ListPrice, "List Price", CType(Nothing, System.Decimal?))
        
        Public Property ListPrice() As System.Decimal?
            Get 
                Return GetProperty(_listPriceProperty)
            End Get
            Set (ByVal value As System.Decimal?)
                SetProperty(_listPriceProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _unitCostProperty As PropertyInfo(Of System.Decimal?) = RegisterProperty(Of System.Decimal?)(Function(p As Item) p.UnitCost, "Unit Cost", CType(Nothing, System.Decimal?))
        
        Public Property UnitCost() As System.Decimal?
            Get 
                Return GetProperty(_unitCostProperty)
            End Get
            Set (ByVal value As System.Decimal?)
                SetProperty(_unitCostProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _supplierProperty As PropertyInfo(Of System.Int32?) = RegisterProperty(Of System.Int32?)(Function(p As Item) p.Supplier, "Supplier", CType(Nothing, System.Int32?))
        
        Public Property Supplier() As System.Int32?
            Get 
                Return GetProperty(_supplierProperty)
            End Get
            Set (ByVal value As System.Int32?)
                SetProperty(_supplierProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _statusProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Status, "Status", vbNullString)
        
        Public Property Status() As System.String
            Get 
                Return GetProperty(_statusProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_statusProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _nameProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Name, "Name", vbNullString)
        
        Public Property Name() As System.String
            Get 
                Return GetProperty(_nameProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_nameProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _imageProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Item) p.Image, "Image", vbNullString)
        
        Public Property Image() As System.String
            Get 
                Return GetProperty(_imageProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_imageProperty, value)
            End Set
        End Property

        'Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne)
        Private Shared ReadOnly _productProperty As PropertyInfo(Of Product) = RegisterProperty(Of Product)(Function(p As Item) p.Product, Csla.RelationshipTypes.Child)
        Public ReadOnly Property Product() As Product
            Get
                Dim cancel As Boolean = False
                OnChildLoading(_productProperty, cancel)
                
                If Not cancel Then
                    If(False) Then
                        Return Nothing
                    End If
    
                    If Not(FieldManager.FieldExists(_productProperty))
                        Dim criteria As New PetShop.Tests.StoredProcedures.ProductCriteria()
                        criteria.ProductId = ProductId

                        If (PetShop.Tests.StoredProcedures.Product.Exists(criteria)) Then
                            LoadProperty(_productProperty, PetShop.Tests.StoredProcedures.Product.GetByProductId(ProductId))
                        End If
                    End If
                End If

                Return GetProperty(_productProperty) 
            End Get
        End Property

        'Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne)
        Private Shared ReadOnly _supplierMemberProperty As PropertyInfo(Of Supplier) = RegisterProperty(Of Supplier)(Function(p As Item) p.SupplierMember, Csla.RelationshipTypes.Child)
        Public ReadOnly Property SupplierMember() As Supplier
            Get
                Dim cancel As Boolean = False
                OnChildLoading(_supplierMemberProperty, cancel)
                
                If Not cancel Then
                    If(Not Supplier.HasValue)  Then
                        Return Nothing
                    End If
    
                    If Not(FieldManager.FieldExists(_supplierMemberProperty))
                        Dim criteria As New PetShop.Tests.StoredProcedures.SupplierCriteria()
                        If(Supplier.HasValue) Then criteria.SuppId = Supplier.Value

                        If (PetShop.Tests.StoredProcedures.Supplier.Exists(criteria)) Then
                            LoadProperty(_supplierMemberProperty, PetShop.Tests.StoredProcedures.Supplier.GetBySuppId(Supplier.Value))
                        End If
                    End If
                End If

                Return GetProperty(_supplierMemberProperty) 
            End Get
        End Property

#End Region
    
#Region "Synchronous Root Factory Methods"
        ''' <summary>
        ''' Creates a new object of type <see cref="Item"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="Item"/>.</returns>    
        Public Shared Function NewItem() As Item 
            Return DataPortal.Create(Of Item)()
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="itemId">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Public Shared Function GetByItemId(ByVal itemId As System.String) As Item
            Dim criteria As New ItemCriteria()
                        criteria.ItemId = itemId
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="productId">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Public Shared Function GetByProductId(ByVal productId As System.String) As Item
            Dim criteria As New ItemCriteria()
                        criteria.ProductId = productId
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="supplier">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Public Shared Function GetBySupplier(ByVal supplier As System.Int32?) As Item
            Dim criteria As New ItemCriteria()
                        criteria.Supplier = supplier.Value
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="productId">No additional detail available.</param>
        ''' <param name="itemId">No additional detail available.</param>
        ''' <param name="listPrice">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Public Shared Function GetByProductIdItemIdListPriceName(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Decimal?, ByVal name As System.String) As Item
            Dim criteria As New ItemCriteria()
                        criteria.ProductId = productId
            criteria.ItemId = itemId
            criteria.ListPrice = listPrice.Value
            criteria.Name = name
    
            Return DataPortal.Fetch(Of Item)(criteria)
        End Function
    
        Public Shared Sub DeleteItem(ByVal itemId As System.String)
            DataPortal.Delete(Of Item)(New ItemCriteria (itemId))
        End Sub

        Friend Shared Function GetItem(ByVal reader As SafeDataReader) As Item
            Return DataPortal.FetchChild(Of Item)(reader)
        End Function
#End Region
    
#Region "Asynchronous Root Factory Methods"
            
        Public Shared Sub NewItemAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    
        Public Shared Sub GetByItemIdAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ItemId = itemId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByProductIdAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetBySupplierAsync(ByVal supplier As System.Int32?, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.Supplier = supplier
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByProductIdItemIdListPriceNameAsync(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Decimal?, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
            criteria.ItemId = itemId
            criteria.ListPrice = listPrice
            criteria.Name = name
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub DeleteItemAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.DeleteCompleted, handler
            dp.BeginDelete(New ItemCriteria (itemId))
        End Sub
    
            
#End Region
    
#Region "Synchronous Child Factory Methods"
        ''' <summary>
        ''' Creates a new object of type <see cref="Item"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="Item"/>.</returns>
        Friend Shared Function NewItemChild() As Item
            Return DataPortal.CreateChild(Of Item)()
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="itemId">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Friend Shared Function GetByItemIdChild(ByVal itemId As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ItemId = itemId
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="productId">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Friend Shared Function GetByProductIdChild(ByVal productId As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="supplier">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Friend Shared Function GetBySupplierChild(ByVal supplier As System.Int32?) As Item
            Dim criteria As New ItemCriteria()
            criteria.Supplier = supplier
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Item"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="productId">No additional detail available.</param>
        ''' <param name="itemId">No additional detail available.</param>
        ''' <param name="listPrice">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Item"/> object of the specified criteria.</returns>
        Friend Shared Function GetByProductIdItemIdListPriceNameChild(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Decimal?, ByVal name As System.String) As Item
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
            criteria.ItemId = itemId
            criteria.ListPrice = listPrice
            criteria.Name = name
    
            Return DataPortal.FetchChild(Of Item)(criteria)
        End Function

#End Region
    
#Region "Asynchronous Child Factory Methods"
    
        Friend Shared Sub NewItemChildAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub

        Friend Shared Sub GetByItemIdChildAsync(ByVal itemId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ItemId = itemId

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByProductIdChildAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetBySupplierChildAsync(ByVal supplier As System.Int32?, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.Supplier = supplier

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByProductIdItemIdListPriceNameChildAsync(ByVal productId As System.String, ByVal itemId As System.String, ByVal listPrice As System.Decimal?, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Item)))
            Dim dp As New DataPortal(Of Item)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ItemCriteria()
            criteria.ProductId = productId
            criteria.ItemId = itemId
            criteria.ListPrice = listPrice
            criteria.Name = name

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

#End Region

#Region "DataPortal partial methods"
    
        ''' <summary>
        ''' CodeSmith generated stub method that is called when creating the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnCreating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been created. 
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when fetching the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ItemCriteria"/> object containing the criteria of the object to fetch.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        Partial Private Sub OnFetching(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been fetched. 
        ''' </summary>    
        Partial Private Sub OnFetched()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByRef cancel As Boolean)
        End Sub
 
        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="reader"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByVal reader As SafeDataReader, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been mapped. 
        ''' </summary>
        Partial Private Sub OnMapped()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnInserting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been inserted. 
        ''' </summary>
        Partial Private Sub OnInserted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnUpdating(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been updated. 
        ''' </summary>
        Partial Private Sub OnUpdated()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when self deleting the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        Partial Private Sub OnSelfDeleting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object has been deleted. 
        ''' </summary>
        Partial Private Sub OnSelfDeleted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when deleting the <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ItemCriteria"/> object containing the criteria of the object to delete.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        Partial Private Sub OnDeleting(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Item"/> object with the specified criteria has been deleted. 
        ''' </summary>
        Partial Private Sub OnDeleted()
        End Sub
        Private Partial Sub OnChildLoading(ByVal childProperty As Global.Csla.Core.IPropertyInfo, ByRef cancel As Boolean)
        End Sub
    
#End Region
    
#Region "ChildPortal partial methods"


        ''' <summary>
        ''' CodeSmith generated stub method that is called when creating the child <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnChildCreating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Item"/> object has been created. 
        ''' </summary>
        Partial Private Sub OnChildCreated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when fetching the child <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ItemCriteria"/> object containing the criteria of the object to fetch.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        Partial Private Sub OnChildFetching(ByVal criteria As ItemCriteria, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Item"/> object has been fetched. 
        ''' </summary>
        Partial Private Sub OnChildFetched()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the child <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnChildInserting(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the child <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="connection"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnChildInserting(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the child <see cref="Item"/> object. 
        ''' </summary>
        Partial Private Sub OnChildInserting(ByVal product As Product, ByVal supplier As Supplier, ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Item"/> object has been inserted. 
        ''' </summary>
        Partial Private Sub OnChildInserted()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the child <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnChildUpdating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the child <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="connection"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnChildUpdating(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the child <see cref="Item"/> object. 
        ''' </summary>
        Partial Private Sub OnChildUpdating(ByVal product As Product, ByVal supplier As Supplier, ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Item"/> object has been updated. 
        ''' </summary>
        Partial Private Sub OnChildUpdated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when self deleting the child <see cref="Item"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        Partial Private Sub OnChildSelfDeleting(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Item"/> object has been deleted. 
        ''' </summary>
        Partial Private Sub OnChildSelfDeleted()
        End Sub
    
#End Region
#Region "Exists Command"

        ''' <summary>
        ''' Determines if a record exists in the [dbo].[Item] table in the database for the specified criteria. 
        ''' </summary>
        ''' <param name="criteria">The criteria parameter is an <see cref="Item"/> object.</param>
        ''' <returns>A boolean value of true is returned if a record is found.</returns>
        Public Shared Function Exists(ByVal criteria As ItemCriteria) As Boolean
            Return PetShop.Tests.StoredProcedures.ExistsCommand.Execute(criteria)
        End Function

        ''' <summary>
        ''' Determines if a record exists in the [dbo].[Item] table in the database for the specified criteria. 
        ''' </summary>
        Public Shared Sub ExistsAsync(ByVal criteria As ItemCriteria, ByVal handler As EventHandler(Of DataPortalResult(Of ExistsCommand)))
            PetShop.Tests.StoredProcedures.ExistsCommand.ExecuteAsync(criteria, handler)
        End Sub

#End Region
    End Class
End Namespace