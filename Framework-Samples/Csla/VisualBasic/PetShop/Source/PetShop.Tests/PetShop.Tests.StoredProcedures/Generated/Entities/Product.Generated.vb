'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated using CodeSmith: v6.5.0, CSLA Templates: v4.0.0.0, CSLA Framework: v4.3.10.
'     Changes to this file will be lost after each regeneration.
'     To extend the functionality of this class, please modify the partial class 'Product.vb.
'
'     Template: SwitchableObject.Generated.cst
'     Template website: http://code.google.com/p/codesmith/
' </autogenerated>
'------------------------------------------------------------------------------
Option Explicit On
Option Strict On

Imports System

Imports Csla
Imports Csla.Data
Imports System.Data.SqlClient

Imports Csla.Rules

Namespace PetShop.Tests.StoredProcedures
    <Serializable()> _
    Public Partial Class Product 
        Inherits BusinessBase(Of Product)

#Region "Contructor(s)"

        public Sub New()
            ' require use of factory method 
        End Sub

#End Region
#Region "Business Rules"

        ''' <summary>
        ''' Contains the CodeSmith generated validation rules.
        ''' </summary>
        Protected Overrides Sub AddBusinessRules()
            ' Call the base class, if this call isn't made than any declared System.ComponentModel.DataAnnotations rules will not work.
            MyBase.AddBusinessRules()

            If AddBusinessValidationRules() Then Exit Sub
    
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.Required(_productIdProperty))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_productIdProperty, 10))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.Required(_categoryIdProperty))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_categoryIdProperty, 10))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_nameProperty, 80))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_descriptionProperty, 255))
            BusinessRules.AddRule(New Global.Csla.Rules.CommonRules.MaxLength(_imageProperty, 80))
        End Sub
    
#End Region

#Region "Properties"
    
        Private Shared ReadOnly _productIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.ProductId, "Product Id")
        
        <System.ComponentModel.DataObjectField(true, false)> _
        Public Property ProductId() As System.String
            Get 
                Return GetProperty(_productIdProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_productIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _originalProductIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.OriginalProductId, "Original Product Id")
        ''' <summary>
        ''' Holds the original value for ProductId. This is used for non identity primary keys.
        ''' </summary>
        Friend Property OriginalProductId() As System.String
            Get 
                Return GetProperty(_originalProductIdProperty) 
            End Get
            Set (value As System.String)
                SetProperty(_originalProductIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _categoryIdProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.CategoryId, "Category Id")
        
        Public Property CategoryId() As System.String
            Get 
                Return GetProperty(_categoryIdProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_categoryIdProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _nameProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.Name, "Name", vbNullString)
        
        Public Property Name() As System.String
            Get 
                Return GetProperty(_nameProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_nameProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _descriptionProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.Description, "Description", vbNullString)
        
        Public Property Description() As System.String
            Get 
                Return GetProperty(_descriptionProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_descriptionProperty, value)
            End Set
        End Property

        Private Shared ReadOnly _imageProperty As PropertyInfo(Of System.String) = RegisterProperty(Of System.String)(Function(p As Product) p.Image, "Image", vbNullString)
        
        Public Property Image() As System.String
            Get 
                Return GetProperty(_imageProperty)
            End Get
            Set (ByVal value As System.String)
                SetProperty(_imageProperty, value)
            End Set
        End Property

        'Associations.Where(Function(a) a.AssociationType = AssociationType.ManyToOne OrElse a.AssociationType = AssociationType.ManyToZeroOrOne)
        Private Shared ReadOnly _categoryProperty As PropertyInfo(Of Category) = RegisterProperty(Of Category)(Function(p As Product) p.Category, Csla.RelationshipTypes.Child)
        Public ReadOnly Property Category() As Category
            Get
                Dim cancel As Boolean = False
                OnChildLoading(_categoryProperty, cancel)
                
                If Not cancel Then
                    If(False) Then
                        Return Nothing
                    End If
    
                    If Not(FieldManager.FieldExists(_categoryProperty))
                        Dim criteria As New PetShop.Tests.StoredProcedures.CategoryCriteria()
                        criteria.CategoryId = CategoryId

                        If (PetShop.Tests.StoredProcedures.Category.Exists(criteria)) Then
                            LoadProperty(_categoryProperty, PetShop.Tests.StoredProcedures.Category.GetByCategoryId(CategoryId))
                        End If
                    End If
                End If

                Return GetProperty(_categoryProperty) 
            End Get
        End Property

        'OneToMany
        Private Shared ReadOnly _itemsProperty As PropertyInfo(Of ItemList) = RegisterProperty(Of ItemList)(Function(p As Product) p.Items, Csla.RelationshipTypes.Child)
    Public ReadOnly Property Items() As ItemList
            Get
                Dim cancel As Boolean = False
                OnChildLoading(_itemsProperty, cancel)
                
                If Not cancel Then
                    If Not (FieldManager.FieldExists(_itemsProperty)) Then
                        Dim criteria As New PetShop.Tests.StoredProcedures.ItemCriteria()
                        criteria.ProductId = ProductId
    
                        If (Not PetShop.Tests.StoredProcedures.ItemList.Exists(criteria)) Then
                            LoadProperty(_itemsProperty, PetShop.Tests.StoredProcedures.ItemList.NewList())
                        Else
                            LoadProperty(_itemsProperty, PetShop.Tests.StoredProcedures.ItemList.GetByProductId(ProductId))
                        End If
                    End If
                End If

                Return GetProperty(_itemsProperty) 
            End Get
        End Property

#End Region
    
#Region "Synchronous Root Factory Methods"
        ''' <summary>
        ''' Creates a new object of type <see cref="Product"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="Product"/>.</returns>    
        Public Shared Function NewProduct() As Product 
            Return DataPortal.Create(Of Product)()
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="productId">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Public Shared Function GetByProductId(ByVal productId As System.String) As Product
            Dim criteria As New ProductCriteria()
                        criteria.ProductId = productId
    
            Return DataPortal.Fetch(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Public Shared Function GetByCategoryId(ByVal categoryId As System.String) As Product
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
    
            Return DataPortal.Fetch(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Public Shared Function GetByName(ByVal name As System.String) As Product
            Dim criteria As New ProductCriteria()
                        criteria.Name = name
    
            Return DataPortal.Fetch(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Public Shared Function GetByCategoryIdName(ByVal categoryId As System.String, ByVal name As System.String) As Product
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
            criteria.Name = name
    
            Return DataPortal.Fetch(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <param name="productId">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Public Shared Function GetByCategoryIdProductIdName(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String) As Product
            Dim criteria As New ProductCriteria()
                        criteria.CategoryId = categoryId
            criteria.ProductId = productId
            criteria.Name = name
    
            Return DataPortal.Fetch(Of Product)(criteria)
        End Function
    
        Public Shared Sub DeleteProduct(ByVal productId As System.String)
            DataPortal.Delete(Of Product)(New ProductCriteria (productId))
        End Sub

        Friend Shared Function GetProduct(ByVal reader As SafeDataReader) As Product
            Return DataPortal.FetchChild(Of Product)(reader)
        End Function
#End Region
    
#Region "Asynchronous Root Factory Methods"
            
        Public Shared Sub NewProductAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub
    
        Public Shared Sub GetByProductIdAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.ProductId = productId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByCategoryIdAsync(ByVal categoryId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByNameAsync(ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.Name = name
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByCategoryIdNameAsync(ByVal categoryId As System.String, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
            criteria.Name = name
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub GetByCategoryIdProductIdNameAsync(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
            criteria.ProductId = productId
            criteria.Name = name
    
            dp.BeginFetch(criteria)
        End Sub
    
        Public Shared Sub DeleteProductAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.DeleteCompleted, handler
            dp.BeginDelete(New ProductCriteria (productId))
        End Sub
    
            
#End Region
    
#Region "Synchronous Child Factory Methods"
        ''' <summary>
        ''' Creates a new object of type <see cref="Product"/>. 
        ''' </summary>
        ''' <returns>Returns a newly instantiated collection of type <see cref="Product"/>.</returns>
        Friend Shared Function NewProductChild() As Product
            Return DataPortal.CreateChild(Of Product)()
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="productId">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Friend Shared Function GetByProductIdChild(ByVal productId As System.String) As Product
            Dim criteria As New ProductCriteria()
            criteria.ProductId = productId
    
            Return DataPortal.FetchChild(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Friend Shared Function GetByCategoryIdChild(ByVal categoryId As System.String) As Product
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
    
            Return DataPortal.FetchChild(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Friend Shared Function GetByNameChild(ByVal name As System.String) As Product
            Dim criteria As New ProductCriteria()
            criteria.Name = name
    
            Return DataPortal.FetchChild(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Friend Shared Function GetByCategoryIdNameChild(ByVal categoryId As System.String, ByVal name As System.String) As Product
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
            criteria.Name = name
    
            Return DataPortal.FetchChild(Of Product)(criteria)
        End Function
    
        ''' <summary>
        ''' Returns a <see cref="Product"/> object of the specified criteria. 
        ''' </summary>
        ''' <param name="categoryId">No additional detail available.</param>
        ''' <param name="productId">No additional detail available.</param>
        ''' <param name="name">No additional detail available.</param>
        ''' <returns>A <see cref="Product"/> object of the specified criteria.</returns>
        Friend Shared Function GetByCategoryIdProductIdNameChild(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String) As Product
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
            criteria.ProductId = productId
            criteria.Name = name
    
            Return DataPortal.FetchChild(Of Product)(criteria)
        End Function

#End Region
    
#Region "Asynchronous Child Factory Methods"
    
        Friend Shared Sub NewProductChildAsync(ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.CreateCompleted, handler
            dp.BeginCreate()
        End Sub

        Friend Shared Sub GetByProductIdChildAsync(ByVal productId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.ProductId = productId

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByCategoryIdChildAsync(ByVal categoryId As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByNameChildAsync(ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.Name = name

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByCategoryIdNameChildAsync(ByVal categoryId As System.String, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
            criteria.Name = name

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

        Friend Shared Sub GetByCategoryIdProductIdNameChildAsync(ByVal categoryId As System.String, ByVal productId As System.String, ByVal name As System.String, ByVal handler As EventHandler(Of DataPortalResult(Of Product)))
            Dim dp As New DataPortal(Of Product)()
            AddHandler dp.FetchCompleted, handler
        
            Dim criteria As New ProductCriteria()
            criteria.CategoryId = categoryId
            criteria.ProductId = productId
            criteria.Name = name

            ' Mark as child?
            dp.BeginFetch(criteria)
        End Sub

#End Region

#Region "DataPortal partial methods"
    
        ''' <summary>
        ''' CodeSmith generated stub method that is called when creating the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnCreating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object has been created. 
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when fetching the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ProductCriteria"/> object containing the criteria of the object to fetch.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        Partial Private Sub OnFetching(ByVal criteria As ProductCriteria, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object has been fetched. 
        ''' </summary>    
        Partial Private Sub OnFetched()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByRef cancel As Boolean)
        End Sub
 
        ''' <summary>
        ''' CodeSmith generated stub method that is called when mapping the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="reader"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        Partial Private Sub OnMapping(ByVal reader As SafeDataReader, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object has been mapped. 
        ''' </summary>
        Partial Private Sub OnMapped()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnInserting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object has been inserted. 
        ''' </summary>
        Partial Private Sub OnInserted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnUpdating(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object has been updated. 
        ''' </summary>
        Partial Private Sub OnUpdated()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when self deleting the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        Partial Private Sub OnSelfDeleting(ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object has been deleted. 
        ''' </summary>
        Partial Private Sub OnSelfDeleted()
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called when deleting the <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ProductCriteria"/> object containing the criteria of the object to delete.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        Partial Private Sub OnDeleting(ByVal criteria As ProductCriteria, ByRef cancel As Boolean)
        End Sub
        ''' <summary>
        ''' CodeSmith generated stub method that is called after the <see cref="Product"/> object with the specified criteria has been deleted. 
        ''' </summary>
        Partial Private Sub OnDeleted()
        End Sub
        Private Partial Sub OnChildLoading(ByVal childProperty As Global.Csla.Core.IPropertyInfo, ByRef cancel As Boolean)
        End Sub
    
#End Region
    
#Region "ChildPortal partial methods"


        ''' <summary>
        ''' CodeSmith generated stub method that is called when creating the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnChildCreating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been created. 
        ''' </summary>
        Partial Private Sub OnChildCreated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when fetching the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="criteria"><see cref="ProductCriteria"/> object containing the criteria of the object to fetch.</param>
        ''' <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        Partial Private Sub OnChildFetching(ByVal criteria As ProductCriteria, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been fetched. 
        ''' </summary>
        Partial Private Sub OnChildFetched()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnChildInserting(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="connection"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        Partial Private Sub OnChildInserting(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when inserting the child <see cref="Product"/> object. 
        ''' </summary>
        Partial Private Sub OnChildInserting(ByVal category As Category, ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been inserted. 
        ''' </summary>
        Partial Private Sub OnChildInserted()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnChildUpdating(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="connection"></param>
        ''' <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        Partial Private Sub OnChildUpdating(ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when updating the child <see cref="Product"/> object. 
        ''' </summary>
        Partial Private Sub OnChildUpdating(ByVal category As Category, ByVal connection As SqlConnection, ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been updated. 
        ''' </summary>
        Partial Private Sub OnChildUpdated()
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called when self deleting the child <see cref="Product"/> object. 
        ''' </summary>
        ''' <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        Partial Private Sub OnChildSelfDeleting(ByRef cancel As Boolean)
        End Sub

        ''' <summary>
        ''' CodeSmith generated stub method that is called after the child <see cref="Product"/> object has been deleted. 
        ''' </summary>
        Partial Private Sub OnChildSelfDeleted()
        End Sub
    
#End Region
#Region "Exists Command"

        ''' <summary>
        ''' Determines if a record exists in the [dbo].[Product] table in the database for the specified criteria. 
        ''' </summary>
        ''' <param name="criteria">The criteria parameter is an <see cref="Product"/> object.</param>
        ''' <returns>A boolean value of true is returned if a record is found.</returns>
        Public Shared Function Exists(ByVal criteria As ProductCriteria) As Boolean
            Return PetShop.Tests.StoredProcedures.ExistsCommand.Execute(criteria)
        End Function

        ''' <summary>
        ''' Determines if a record exists in the [dbo].[Product] table in the database for the specified criteria. 
        ''' </summary>
        Public Shared Sub ExistsAsync(ByVal criteria As ProductCriteria, ByVal handler As EventHandler(Of DataPortalResult(Of ExistsCommand)))
            PetShop.Tests.StoredProcedures.ExistsCommand.ExecuteAsync(criteria, handler)
        End Sub

#End Region
    End Class
End Namespace