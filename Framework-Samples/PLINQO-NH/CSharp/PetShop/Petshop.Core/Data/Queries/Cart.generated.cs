#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for Cart.
    /// </summary>
    public static partial class CartExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Petshop.Data.Entities.Cart GetByKey(this IQueryable<Petshop.Data.Entities.Cart> queryable
            , System.Int32 cartId
            )
        {
            return queryable
                .Where(c => c.CartId == cartId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CartId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cartId">CartId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCartId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Int32 cartId)
        {
            return queryable.Where(c => c.CartId == cartId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CartId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cartId">CartId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCartId(this IQueryable<Petshop.Data.Entities.Cart> queryable, ComparisonOperator comparisonOperator, System.Int32 cartId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.CartId > cartId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.CartId >= cartId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.CartId < cartId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.CartId <= cartId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.CartId != cartId);
                default:
                    return queryable.Where(c => c.CartId == cartId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CartId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cartId">CartId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCartId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Int32 cartId, params System.Int32[] additionalValues)
        {
            var cartIdList = new List<System.Int32> { cartId };

            if (additionalValues != null)
                cartIdList.AddRange(additionalValues);

            if (cartIdList.Count == 1)
                return queryable.ByCartId(cartIdList[0]);

            return queryable.ByCartId(cartIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CartId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCartId(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(c => values.Contains(c.CartId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByItemId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String itemId)
        {
            return queryable.Where(c => c.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByItemId(this IQueryable<Petshop.Data.Entities.Cart> queryable, ContainmentOperator containmentOperator, System.String itemId)
        {
            if (itemId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.ItemId.Contains(itemId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.ItemId.StartsWith(itemId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.ItemId.EndsWith(itemId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.ItemId.Contains(itemId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.ItemId != itemId);
                default:
                    return queryable.Where(c => c.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByItemId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String itemId, params System.String[] additionalValues)
        {
            var itemIdList = new List<System.String> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByItemId(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByName(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String name)
        {
            return queryable.Where(c => c.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByName(this IQueryable<Petshop.Data.Entities.Cart> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.Name != name);
                default:
                    return queryable.Where(c => c.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByName(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByName(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Type"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="type">Type to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByType(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String type)
        {
            return queryable.Where(c => c.Type == type);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Type"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="type">Type to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByType(this IQueryable<Petshop.Data.Entities.Cart> queryable, ContainmentOperator containmentOperator, System.String type)
        {
            if (type == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("type", "Parameter 'type' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Type.Contains(type));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Type.StartsWith(type));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Type.EndsWith(type));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Type.Contains(type) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.Type != type);
                default:
                    return queryable.Where(c => c.Type == type);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Type"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="type">Type to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByType(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String type, params System.String[] additionalValues)
        {
            var typeList = new List<System.String> { type };

            if (additionalValues != null)
                typeList.AddRange(additionalValues);

            if (typeList.Count == 1)
                return queryable.ByType(typeList[0]);

            return queryable.ByType(typeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Type"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByType(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.Type));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByPrice(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Decimal price)
        {
            return queryable.Where(c => c.Price == price);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByPrice(this IQueryable<Petshop.Data.Entities.Cart> queryable, ComparisonOperator comparisonOperator, System.Decimal price)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.Price > price);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.Price >= price);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.Price < price);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.Price <= price);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Price != price);
                default:
                    return queryable.Where(c => c.Price == price);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByPrice(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Decimal price, params System.Decimal[] additionalValues)
        {
            var priceList = new List<System.Decimal> { price };

            if (additionalValues != null)
                priceList.AddRange(additionalValues);

            if (priceList.Count == 1)
                return queryable.ByPrice(priceList[0]);

            return queryable.ByPrice(priceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByPrice(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(c => values.Contains(c.Price));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCategoryId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String categoryId)
        {
            return queryable.Where(c => c.CategoryId == categoryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCategoryId(this IQueryable<Petshop.Data.Entities.Cart> queryable, ContainmentOperator containmentOperator, System.String categoryId)
        {
            if (categoryId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryId", "Parameter 'categoryId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CategoryId.Contains(categoryId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CategoryId.StartsWith(categoryId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CategoryId.EndsWith(categoryId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CategoryId.Contains(categoryId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.CategoryId != categoryId);
                default:
                    return queryable.Where(c => c.CategoryId == categoryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCategoryId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String categoryId, params System.String[] additionalValues)
        {
            var categoryIdList = new List<System.String> { categoryId };

            if (additionalValues != null)
                categoryIdList.AddRange(additionalValues);

            if (categoryIdList.Count == 1)
                return queryable.ByCategoryId(categoryIdList[0]);

            return queryable.ByCategoryId(categoryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByCategoryId(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.CategoryId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProductId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String productId)
        {
            return queryable.Where(c => c.ProductId == productId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProductId(this IQueryable<Petshop.Data.Entities.Cart> queryable, ContainmentOperator containmentOperator, System.String productId)
        {
            if (productId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productId", "Parameter 'productId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.ProductId.Contains(productId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.ProductId.StartsWith(productId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.ProductId.EndsWith(productId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.ProductId.Contains(productId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.ProductId != productId);
                default:
                    return queryable.Where(c => c.ProductId == productId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProductId(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.String productId, params System.String[] additionalValues)
        {
            var productIdList = new List<System.String> { productId };

            if (additionalValues != null)
                productIdList.AddRange(additionalValues);

            if (productIdList.Count == 1)
                return queryable.ByProductId(productIdList[0]);

            return queryable.ByProductId(productIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProductId(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.ProductId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.IsShoppingCart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isShoppingCart">IsShoppingCart to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByIsShoppingCart(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Boolean isShoppingCart)
        {
            return queryable.Where(c => c.IsShoppingCart == isShoppingCart);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.IsShoppingCart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isShoppingCart">IsShoppingCart to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByIsShoppingCart(this IQueryable<Petshop.Data.Entities.Cart> queryable, ComparisonOperator comparisonOperator, System.Boolean isShoppingCart)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.IsShoppingCart != isShoppingCart);
                default:
                    return queryable.Where(c => c.IsShoppingCart == isShoppingCart);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.IsShoppingCart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isShoppingCart">IsShoppingCart to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByIsShoppingCart(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Boolean isShoppingCart, params System.Boolean[] additionalValues)
        {
            var isShoppingCartList = new List<System.Boolean> { isShoppingCart };

            if (additionalValues != null)
                isShoppingCartList.AddRange(additionalValues);

            if (isShoppingCartList.Count == 1)
                return queryable.ByIsShoppingCart(isShoppingCartList[0]);

            return queryable.ByIsShoppingCart(isShoppingCartList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.IsShoppingCart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByIsShoppingCart(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(c => values.Contains(c.IsShoppingCart));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByQuantity(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Int32 quantity)
        {
            return queryable.Where(c => c.Quantity == quantity);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByQuantity(this IQueryable<Petshop.Data.Entities.Cart> queryable, ComparisonOperator comparisonOperator, System.Int32 quantity)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.Quantity > quantity);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.Quantity >= quantity);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.Quantity < quantity);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.Quantity <= quantity);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Quantity != quantity);
                default:
                    return queryable.Where(c => c.Quantity == quantity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByQuantity(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Int32 quantity, params System.Int32[] additionalValues)
        {
            var quantityList = new List<System.Int32> { quantity };

            if (additionalValues != null)
                quantityList.AddRange(additionalValues);

            if (quantityList.Count == 1)
                return queryable.ByQuantity(quantityList[0]);

            return queryable.ByQuantity(quantityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByQuantity(this IQueryable<Petshop.Data.Entities.Cart> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(c => values.Contains(c.Quantity));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart by Profile's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="profile">Profile to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProfile(this IQueryable<Petshop.Data.Entities.Cart> queryable, Petshop.Data.Entities.Profile profile)
        {
            return queryable.ByProfile(ComparisonOperator.Equals, profile);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart by Profile's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="profile">Profile to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProfile(this IQueryable<Petshop.Data.Entities.Cart> queryable, ComparisonOperator comparisonOperator, Petshop.Data.Entities.Profile profile)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(c => c.Profile == profile);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Profile != profile);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart by Profile's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uniqueID">UniqueID to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProfile(this IQueryable<Petshop.Data.Entities.Cart> queryable, System.Int32 uniqueID)
        {
            return queryable.ByProfile(ComparisonOperator.Equals, uniqueID);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Cart by Profile's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="uniqueID">UniqueID to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Cart> ByProfile(this IQueryable<Petshop.Data.Entities.Cart> queryable, ComparisonOperator comparisonOperator, System.Int32 uniqueID)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(c => c.Profile.UniqueID == uniqueID);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Profile.UniqueID != uniqueID);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

