#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for Inventory.
    /// </summary>
    public static partial class InventoryExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Petshop.Data.Entities.Inventory GetByKey(this IQueryable<Petshop.Data.Entities.Inventory> queryable
            , System.String itemId
            )
        {
            return queryable
                .Where(i => i.ItemId == itemId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByItemId(this IQueryable<Petshop.Data.Entities.Inventory> queryable, System.String itemId)
        {
            return queryable.Where(i => i.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByItemId(this IQueryable<Petshop.Data.Entities.Inventory> queryable, ContainmentOperator containmentOperator, System.String itemId)
        {
            if (itemId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.ItemId.Contains(itemId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.ItemId.StartsWith(itemId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.ItemId.EndsWith(itemId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.ItemId.Contains(itemId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.ItemId != itemId);
                default:
                    return queryable.Where(i => i.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByItemId(this IQueryable<Petshop.Data.Entities.Inventory> queryable, System.String itemId, params System.String[] additionalValues)
        {
            var itemIdList = new List<System.String> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByItemId(this IQueryable<Petshop.Data.Entities.Inventory> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByQty(this IQueryable<Petshop.Data.Entities.Inventory> queryable, System.Int32 qty)
        {
            return queryable.Where(i => i.Qty == qty);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByQty(this IQueryable<Petshop.Data.Entities.Inventory> queryable, ComparisonOperator comparisonOperator, System.Int32 qty)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.Qty > qty);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.Qty >= qty);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.Qty < qty);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.Qty <= qty);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Qty != qty);
                default:
                    return queryable.Where(i => i.Qty == qty);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByQty(this IQueryable<Petshop.Data.Entities.Inventory> queryable, System.Int32 qty, params System.Int32[] additionalValues)
        {
            var qtyList = new List<System.Int32> { qty };

            if (additionalValues != null)
                qtyList.AddRange(additionalValues);

            if (qtyList.Count == 1)
                return queryable.ByQty(qtyList[0]);

            return queryable.ByQty(qtyList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Inventory> ByQty(this IQueryable<Petshop.Data.Entities.Inventory> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.Qty));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

