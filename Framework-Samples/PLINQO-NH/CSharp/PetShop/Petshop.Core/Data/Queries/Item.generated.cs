#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for Item.
    /// </summary>
    public static partial class ItemExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Petshop.Data.Entities.Item GetByKey(this IQueryable<Petshop.Data.Entities.Item> queryable
            , System.String itemId
            )
        {
            return queryable
                .Where(i => i.ItemId == itemId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByItemId(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String itemId)
        {
            return queryable.Where(i => i.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByItemId(this IQueryable<Petshop.Data.Entities.Item> queryable, ContainmentOperator containmentOperator, System.String itemId)
        {
            if (itemId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.ItemId.Contains(itemId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.ItemId.StartsWith(itemId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.ItemId.EndsWith(itemId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.ItemId.Contains(itemId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.ItemId != itemId);
                default:
                    return queryable.Where(i => i.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByItemId(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String itemId, params System.String[] additionalValues)
        {
            var itemIdList = new List<System.String> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByItemId(this IQueryable<Petshop.Data.Entities.Item> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByListPrice(this IQueryable<Petshop.Data.Entities.Item> queryable, System.Decimal? listPrice)
        {
            // support nulls
            return listPrice == null 
                ? queryable.Where(i => i.ListPrice == null) 
                : queryable.Where(i => i.ListPrice == listPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByListPrice(this IQueryable<Petshop.Data.Entities.Item> queryable, ComparisonOperator comparisonOperator, System.Decimal? listPrice)
        {
            if (listPrice == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("listPrice", "Parameter 'listPrice' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.ListPrice > listPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.ListPrice >= listPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.ListPrice < listPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.ListPrice <= listPrice);
                case ComparisonOperator.NotEquals:
                    return listPrice == null 
                        ? queryable.Where(i => i.ListPrice != null) 
                        : queryable.Where(i => i.ListPrice != listPrice);
                default:
                    return listPrice == null 
                        ? queryable.Where(i => i.ListPrice == null) 
                        : queryable.Where(i => i.ListPrice == listPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByListPrice(this IQueryable<Petshop.Data.Entities.Item> queryable, System.Decimal? listPrice, params System.Decimal?[] additionalValues)
        {
            var listPriceList = new List<System.Decimal?> { listPrice };

            if (additionalValues != null)
                listPriceList.AddRange(additionalValues);
            else
                listPriceList.Add(null);

            if (listPriceList.Count == 1)
                return queryable.ByListPrice(listPriceList[0]);

            return queryable.ByListPrice(listPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByListPrice(this IQueryable<Petshop.Data.Entities.Item> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Item, bool>("ListPrice", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByUnitCost(this IQueryable<Petshop.Data.Entities.Item> queryable, System.Decimal? unitCost)
        {
            // support nulls
            return unitCost == null 
                ? queryable.Where(i => i.UnitCost == null) 
                : queryable.Where(i => i.UnitCost == unitCost);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByUnitCost(this IQueryable<Petshop.Data.Entities.Item> queryable, ComparisonOperator comparisonOperator, System.Decimal? unitCost)
        {
            if (unitCost == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("unitCost", "Parameter 'unitCost' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.UnitCost > unitCost);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.UnitCost >= unitCost);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.UnitCost < unitCost);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.UnitCost <= unitCost);
                case ComparisonOperator.NotEquals:
                    return unitCost == null 
                        ? queryable.Where(i => i.UnitCost != null) 
                        : queryable.Where(i => i.UnitCost != unitCost);
                default:
                    return unitCost == null 
                        ? queryable.Where(i => i.UnitCost == null) 
                        : queryable.Where(i => i.UnitCost == unitCost);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByUnitCost(this IQueryable<Petshop.Data.Entities.Item> queryable, System.Decimal? unitCost, params System.Decimal?[] additionalValues)
        {
            var unitCostList = new List<System.Decimal?> { unitCost };

            if (additionalValues != null)
                unitCostList.AddRange(additionalValues);
            else
                unitCostList.Add(null);

            if (unitCostList.Count == 1)
                return queryable.ByUnitCost(unitCostList[0]);

            return queryable.ByUnitCost(unitCostList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByUnitCost(this IQueryable<Petshop.Data.Entities.Item> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Item, bool>("UnitCost", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByStatus(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String status)
        {
            // support nulls
            return status == null 
                ? queryable.Where(i => i.Status == null) 
                : queryable.Where(i => i.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByStatus(this IQueryable<Petshop.Data.Entities.Item> queryable, ContainmentOperator containmentOperator, System.String status)
        {
            if (status == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Status.Contains(status));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Status.StartsWith(status));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Status.EndsWith(status));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Status.Contains(status) == false);
                case ContainmentOperator.NotEquals:
                    return status == null 
                        ? queryable.Where(i => i.Status != null) 
                        : queryable.Where(i => i.Status != status);
                default:
                    return status == null 
                        ? queryable.Where(i => i.Status == null) 
                        : queryable.Where(i => i.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByStatus(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String status, params System.String[] additionalValues)
        {
            var statusList = new List<System.String> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);
            else
                statusList.Add(null);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByStatus(this IQueryable<Petshop.Data.Entities.Item> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Item, bool>("Status", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByName(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String name)
        {
            // support nulls
            return name == null 
                ? queryable.Where(i => i.Name == null) 
                : queryable.Where(i => i.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByName(this IQueryable<Petshop.Data.Entities.Item> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return name == null 
                        ? queryable.Where(i => i.Name != null) 
                        : queryable.Where(i => i.Name != name);
                default:
                    return name == null 
                        ? queryable.Where(i => i.Name == null) 
                        : queryable.Where(i => i.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByName(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);
            else
                nameList.Add(null);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByName(this IQueryable<Petshop.Data.Entities.Item> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Item, bool>("Name", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Image"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="image">Image to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByImage(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String image)
        {
            // support nulls
            return image == null 
                ? queryable.Where(i => i.Image == null) 
                : queryable.Where(i => i.Image == image);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Image"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="image">Image to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByImage(this IQueryable<Petshop.Data.Entities.Item> queryable, ContainmentOperator containmentOperator, System.String image)
        {
            if (image == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("image", "Parameter 'image' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Image.Contains(image));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Image.StartsWith(image));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Image.EndsWith(image));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Image.Contains(image) == false);
                case ContainmentOperator.NotEquals:
                    return image == null 
                        ? queryable.Where(i => i.Image != null) 
                        : queryable.Where(i => i.Image != image);
                default:
                    return image == null 
                        ? queryable.Where(i => i.Image == null) 
                        : queryable.Where(i => i.Image == image);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Image"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="image">Image to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByImage(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String image, params System.String[] additionalValues)
        {
            var imageList = new List<System.String> { image };

            if (additionalValues != null)
                imageList.AddRange(additionalValues);
            else
                imageList.Add(null);

            if (imageList.Count == 1)
                return queryable.ByImage(imageList[0]);

            return queryable.ByImage(imageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item.Image"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByImage(this IQueryable<Petshop.Data.Entities.Item> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Item, bool>("Image", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Product's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="product">Product to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByProduct(this IQueryable<Petshop.Data.Entities.Item> queryable, Petshop.Data.Entities.Product product)
        {
            return queryable.ByProduct(ComparisonOperator.Equals, product);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Product's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="product">Product to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByProduct(this IQueryable<Petshop.Data.Entities.Item> queryable, ComparisonOperator comparisonOperator, Petshop.Data.Entities.Product product)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(i => i.Product == product);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Product != product);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Product's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByProduct(this IQueryable<Petshop.Data.Entities.Item> queryable, System.String productId)
        {
            return queryable.ByProduct(ComparisonOperator.Equals, productId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Product's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> ByProduct(this IQueryable<Petshop.Data.Entities.Item> queryable, ComparisonOperator comparisonOperator, System.String productId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(i => i.Product.ProductId == productId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Product.ProductId != productId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Supplier's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="supplier">Supplier to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> BySupplier(this IQueryable<Petshop.Data.Entities.Item> queryable, Petshop.Data.Entities.Supplier supplier)
        {
            return queryable.BySupplier(ComparisonOperator.Equals, supplier);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Supplier's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="supplier">Supplier to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> BySupplier(this IQueryable<Petshop.Data.Entities.Item> queryable, ComparisonOperator comparisonOperator, Petshop.Data.Entities.Supplier supplier)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(i => i.Supplier == supplier);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Supplier != supplier);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Supplier's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suppId">SuppId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> BySupplier(this IQueryable<Petshop.Data.Entities.Item> queryable, System.Int32 suppId)
        {
            return queryable.BySupplier(ComparisonOperator.Equals, suppId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Item by Supplier's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="suppId">SuppId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Item> BySupplier(this IQueryable<Petshop.Data.Entities.Item> queryable, ComparisonOperator comparisonOperator, System.Int32 suppId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(i => i.Supplier.SuppId == suppId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Supplier.SuppId != suppId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

