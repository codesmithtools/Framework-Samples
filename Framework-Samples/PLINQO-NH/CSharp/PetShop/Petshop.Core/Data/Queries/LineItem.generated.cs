#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for LineItem.
    /// </summary>
    public static partial class LineItemExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Petshop.Data.Entities.LineItem GetByKey(this IQueryable<Petshop.Data.Entities.LineItem> queryable
            , System.Int32 lineNum
            , System.Int32 orderId
            )
        {
            return queryable
                .Where(l => l.Order.OrderId == orderId)
                .Where(l => l.LineNum == lineNum)
                .FirstOrDefault();
        }
        
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByLineNum(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.Int32 lineNum)
        {
            return queryable.Where(l => l.LineNum == lineNum);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByLineNum(this IQueryable<Petshop.Data.Entities.LineItem> queryable, ComparisonOperator comparisonOperator, System.Int32 lineNum)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.LineNum > lineNum);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.LineNum >= lineNum);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.LineNum < lineNum);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.LineNum <= lineNum);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.LineNum != lineNum);
                default:
                    return queryable.Where(l => l.LineNum == lineNum);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByLineNum(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.Int32 lineNum, params System.Int32[] additionalValues)
        {
            var lineNumList = new List<System.Int32> { lineNum };

            if (additionalValues != null)
                lineNumList.AddRange(additionalValues);

            if (lineNumList.Count == 1)
                return queryable.ByLineNum(lineNumList[0]);

            return queryable.ByLineNum(lineNumList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByLineNum(this IQueryable<Petshop.Data.Entities.LineItem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.LineNum));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByItemId(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.String itemId)
        {
            return queryable.Where(l => l.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByItemId(this IQueryable<Petshop.Data.Entities.LineItem> queryable, ContainmentOperator containmentOperator, System.String itemId)
        {
            if (itemId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.ItemId.Contains(itemId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.ItemId.StartsWith(itemId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.ItemId.EndsWith(itemId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.ItemId.Contains(itemId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.ItemId != itemId);
                default:
                    return queryable.Where(l => l.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByItemId(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.String itemId, params System.String[] additionalValues)
        {
            var itemIdList = new List<System.String> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByItemId(this IQueryable<Petshop.Data.Entities.LineItem> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(l => values.Contains(l.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByQuantity(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.Int32 quantity)
        {
            return queryable.Where(l => l.Quantity == quantity);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByQuantity(this IQueryable<Petshop.Data.Entities.LineItem> queryable, ComparisonOperator comparisonOperator, System.Int32 quantity)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.Quantity > quantity);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.Quantity >= quantity);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.Quantity < quantity);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.Quantity <= quantity);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.Quantity != quantity);
                default:
                    return queryable.Where(l => l.Quantity == quantity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByQuantity(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.Int32 quantity, params System.Int32[] additionalValues)
        {
            var quantityList = new List<System.Int32> { quantity };

            if (additionalValues != null)
                quantityList.AddRange(additionalValues);

            if (quantityList.Count == 1)
                return queryable.ByQuantity(quantityList[0]);

            return queryable.ByQuantity(quantityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByQuantity(this IQueryable<Petshop.Data.Entities.LineItem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.Quantity));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitPrice">UnitPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByUnitPrice(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.Decimal unitPrice)
        {
            return queryable.Where(l => l.UnitPrice == unitPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitPrice">UnitPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByUnitPrice(this IQueryable<Petshop.Data.Entities.LineItem> queryable, ComparisonOperator comparisonOperator, System.Decimal unitPrice)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.UnitPrice > unitPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.UnitPrice >= unitPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.UnitPrice < unitPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.UnitPrice <= unitPrice);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.UnitPrice != unitPrice);
                default:
                    return queryable.Where(l => l.UnitPrice == unitPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitPrice">UnitPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByUnitPrice(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.Decimal unitPrice, params System.Decimal[] additionalValues)
        {
            var unitPriceList = new List<System.Decimal> { unitPrice };

            if (additionalValues != null)
                unitPriceList.AddRange(additionalValues);

            if (unitPriceList.Count == 1)
                return queryable.ByUnitPrice(unitPriceList[0]);

            return queryable.ByUnitPrice(unitPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByUnitPrice(this IQueryable<Petshop.Data.Entities.LineItem> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(l => values.Contains(l.UnitPrice));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="order">Order to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByOrder(this IQueryable<Petshop.Data.Entities.LineItem> queryable, Petshop.Data.Entities.Order order)
        {
            return queryable.ByOrder(ComparisonOperator.Equals, order);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="order">Order to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByOrder(this IQueryable<Petshop.Data.Entities.LineItem> queryable, ComparisonOperator comparisonOperator, Petshop.Data.Entities.Order order)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(l => l.Order == order);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.Order != order);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByOrder(this IQueryable<Petshop.Data.Entities.LineItem> queryable, System.Int32 orderId)
        {
            return queryable.ByOrder(ComparisonOperator.Equals, orderId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.LineItem by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.LineItem> ByOrder(this IQueryable<Petshop.Data.Entities.LineItem> queryable, ComparisonOperator comparisonOperator, System.Int32 orderId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(l => l.Order.OrderId == orderId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.Order.OrderId != orderId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

