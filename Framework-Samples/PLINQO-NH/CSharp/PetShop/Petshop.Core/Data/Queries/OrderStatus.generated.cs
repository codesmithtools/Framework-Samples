#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for OrderStatus.
    /// </summary>
    public static partial class OrderStatusExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Petshop.Data.Entities.OrderStatus GetByKey(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable
            , System.Int32 lineNum
            , System.Int32 orderId
            )
        {
            return queryable
                .Where(o => o.Order.OrderId == orderId)
                .Where(o => o.LineNum == lineNum)
                .FirstOrDefault();
        }
        
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByLineNum(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, System.Int32 lineNum)
        {
            return queryable.Where(o => o.LineNum == lineNum);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByLineNum(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, ComparisonOperator comparisonOperator, System.Int32 lineNum)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => o.LineNum > lineNum);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => o.LineNum >= lineNum);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => o.LineNum < lineNum);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => o.LineNum <= lineNum);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.LineNum != lineNum);
                default:
                    return queryable.Where(o => o.LineNum == lineNum);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByLineNum(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, System.Int32 lineNum, params System.Int32[] additionalValues)
        {
            var lineNumList = new List<System.Int32> { lineNum };

            if (additionalValues != null)
                lineNumList.AddRange(additionalValues);

            if (lineNumList.Count == 1)
                return queryable.ByLineNum(lineNumList[0]);

            return queryable.ByLineNum(lineNumList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByLineNum(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(o => values.Contains(o.LineNum));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Timestamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timestamp">Timestamp to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByTimestamp(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, System.DateTime timestamp)
        {
            return queryable.Where(o => o.Timestamp == timestamp);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Timestamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timestamp">Timestamp to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByTimestamp(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, ComparisonOperator comparisonOperator, System.DateTime timestamp)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => o.Timestamp > timestamp);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => o.Timestamp >= timestamp);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => o.Timestamp < timestamp);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => o.Timestamp <= timestamp);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.Timestamp != timestamp);
                default:
                    return queryable.Where(o => o.Timestamp == timestamp);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Timestamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timestamp">Timestamp to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByTimestamp(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, System.DateTime timestamp, params System.DateTime[] additionalValues)
        {
            var timestampList = new List<System.DateTime> { timestamp };

            if (additionalValues != null)
                timestampList.AddRange(additionalValues);

            if (timestampList.Count == 1)
                return queryable.ByTimestamp(timestampList[0]);

            return queryable.ByTimestamp(timestampList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Timestamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByTimestamp(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(o => values.Contains(o.Timestamp));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByStatus(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, System.String status)
        {
            return queryable.Where(o => o.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByStatus(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, ContainmentOperator containmentOperator, System.String status)
        {
            if (status == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.Status.Contains(status));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.Status.StartsWith(status));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.Status.EndsWith(status));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.Status.Contains(status) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.Status != status);
                default:
                    return queryable.Where(o => o.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByStatus(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, System.String status, params System.String[] additionalValues)
        {
            var statusList = new List<System.String> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByStatus(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(o => values.Contains(o.Status));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="order">Order to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByOrder(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, Petshop.Data.Entities.Order order)
        {
            return queryable.ByOrder(ComparisonOperator.Equals, order);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="order">Order to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByOrder(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, ComparisonOperator comparisonOperator, Petshop.Data.Entities.Order order)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(o => o.Order == order);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.Order != order);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByOrder(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, System.Int32 orderId)
        {
            return queryable.ByOrder(ComparisonOperator.Equals, orderId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.OrderStatus by Order's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.OrderStatus> ByOrder(this IQueryable<Petshop.Data.Entities.OrderStatus> queryable, ComparisonOperator comparisonOperator, System.Int32 orderId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(o => o.Order.OrderId == orderId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.Order.OrderId != orderId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

