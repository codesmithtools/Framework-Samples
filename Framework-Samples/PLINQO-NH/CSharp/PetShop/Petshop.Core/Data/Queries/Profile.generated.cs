#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for Profile.
    /// </summary>
    public static partial class ProfileExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Petshop.Data.Entities.Profile GetByKey(this IQueryable<Petshop.Data.Entities.Profile> queryable
            , System.Int32 uniqueID
            )
        {
            return queryable
                .Where(p => p.UniqueID == uniqueID)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uniqueID">UniqueID to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUniqueID(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.Int32 uniqueID)
        {
            return queryable.Where(p => p.UniqueID == uniqueID);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uniqueID">UniqueID to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUniqueID(this IQueryable<Petshop.Data.Entities.Profile> queryable, ComparisonOperator comparisonOperator, System.Int32 uniqueID)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.UniqueID > uniqueID);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.UniqueID >= uniqueID);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.UniqueID < uniqueID);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.UniqueID <= uniqueID);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(p => p.UniqueID != uniqueID);
                default:
                    return queryable.Where(p => p.UniqueID == uniqueID);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uniqueID">UniqueID to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUniqueID(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.Int32 uniqueID, params System.Int32[] additionalValues)
        {
            var uniqueIDList = new List<System.Int32> { uniqueID };

            if (additionalValues != null)
                uniqueIDList.AddRange(additionalValues);

            if (uniqueIDList.Count == 1)
                return queryable.ByUniqueID(uniqueIDList[0]);

            return queryable.ByUniqueID(uniqueIDList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUniqueID(this IQueryable<Petshop.Data.Entities.Profile> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(p => values.Contains(p.UniqueID));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUsername(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.String username)
        {
            return queryable.Where(p => p.Username == username);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUsername(this IQueryable<Petshop.Data.Entities.Profile> queryable, ContainmentOperator containmentOperator, System.String username)
        {
            if (username == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("username", "Parameter 'username' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Username.Contains(username));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Username.StartsWith(username));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Username.EndsWith(username));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Username.Contains(username) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.Username != username);
                default:
                    return queryable.Where(p => p.Username == username);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUsername(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.String username, params System.String[] additionalValues)
        {
            var usernameList = new List<System.String> { username };

            if (additionalValues != null)
                usernameList.AddRange(additionalValues);

            if (usernameList.Count == 1)
                return queryable.ByUsername(usernameList[0]);

            return queryable.ByUsername(usernameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByUsername(this IQueryable<Petshop.Data.Entities.Profile> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.Username));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.ApplicationName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applicationName">ApplicationName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByApplicationName(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.String applicationName)
        {
            return queryable.Where(p => p.ApplicationName == applicationName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.ApplicationName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applicationName">ApplicationName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByApplicationName(this IQueryable<Petshop.Data.Entities.Profile> queryable, ContainmentOperator containmentOperator, System.String applicationName)
        {
            if (applicationName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("applicationName", "Parameter 'applicationName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.ApplicationName.Contains(applicationName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.ApplicationName.StartsWith(applicationName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.ApplicationName.EndsWith(applicationName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.ApplicationName.Contains(applicationName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.ApplicationName != applicationName);
                default:
                    return queryable.Where(p => p.ApplicationName == applicationName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.ApplicationName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applicationName">ApplicationName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByApplicationName(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.String applicationName, params System.String[] additionalValues)
        {
            var applicationNameList = new List<System.String> { applicationName };

            if (additionalValues != null)
                applicationNameList.AddRange(additionalValues);

            if (applicationNameList.Count == 1)
                return queryable.ByApplicationName(applicationNameList[0]);

            return queryable.ByApplicationName(applicationNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.ApplicationName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByApplicationName(this IQueryable<Petshop.Data.Entities.Profile> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.ApplicationName));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.IsAnonymous"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isAnonymous">IsAnonymous to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByIsAnonymous(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.Boolean? isAnonymous)
        {
            // support nulls
            return isAnonymous == null 
                ? queryable.Where(p => p.IsAnonymous == null) 
                : queryable.Where(p => p.IsAnonymous == isAnonymous);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.IsAnonymous"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isAnonymous">IsAnonymous to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByIsAnonymous(this IQueryable<Petshop.Data.Entities.Profile> queryable, ComparisonOperator comparisonOperator, System.Boolean? isAnonymous)
        {
            if (isAnonymous == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isAnonymous", "Parameter 'isAnonymous' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return isAnonymous == null 
                        ? queryable.Where(p => p.IsAnonymous != null) 
                        : queryable.Where(p => p.IsAnonymous != isAnonymous);
                default:
                    return isAnonymous == null 
                        ? queryable.Where(p => p.IsAnonymous == null) 
                        : queryable.Where(p => p.IsAnonymous == isAnonymous);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.IsAnonymous"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isAnonymous">IsAnonymous to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByIsAnonymous(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.Boolean? isAnonymous, params System.Boolean?[] additionalValues)
        {
            var isAnonymousList = new List<System.Boolean?> { isAnonymous };

            if (additionalValues != null)
                isAnonymousList.AddRange(additionalValues);
            else
                isAnonymousList.Add(null);

            if (isAnonymousList.Count == 1)
                return queryable.ByIsAnonymous(isAnonymousList[0]);

            return queryable.ByIsAnonymous(isAnonymousList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.IsAnonymous"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByIsAnonymous(this IQueryable<Petshop.Data.Entities.Profile> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Profile, bool>("IsAnonymous", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastActivityDate">LastActivityDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastActivityDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.DateTime? lastActivityDate)
        {
            // support nulls
            return lastActivityDate == null 
                ? queryable.Where(p => p.LastActivityDate == null) 
                : queryable.Where(p => p.LastActivityDate == lastActivityDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastActivityDate">LastActivityDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastActivityDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastActivityDate)
        {
            if (lastActivityDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastActivityDate", "Parameter 'lastActivityDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.LastActivityDate > lastActivityDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.LastActivityDate >= lastActivityDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.LastActivityDate < lastActivityDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.LastActivityDate <= lastActivityDate);
                case ComparisonOperator.NotEquals:
                    return lastActivityDate == null 
                        ? queryable.Where(p => p.LastActivityDate != null) 
                        : queryable.Where(p => p.LastActivityDate != lastActivityDate);
                default:
                    return lastActivityDate == null 
                        ? queryable.Where(p => p.LastActivityDate == null) 
                        : queryable.Where(p => p.LastActivityDate == lastActivityDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastActivityDate">LastActivityDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastActivityDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.DateTime? lastActivityDate, params System.DateTime?[] additionalValues)
        {
            var lastActivityDateList = new List<System.DateTime?> { lastActivityDate };

            if (additionalValues != null)
                lastActivityDateList.AddRange(additionalValues);
            else
                lastActivityDateList.Add(null);

            if (lastActivityDateList.Count == 1)
                return queryable.ByLastActivityDate(lastActivityDateList[0]);

            return queryable.ByLastActivityDate(lastActivityDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastActivityDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Profile, bool>("LastActivityDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastUpdatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdatedDate">LastUpdatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastUpdatedDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.DateTime? lastUpdatedDate)
        {
            // support nulls
            return lastUpdatedDate == null 
                ? queryable.Where(p => p.LastUpdatedDate == null) 
                : queryable.Where(p => p.LastUpdatedDate == lastUpdatedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastUpdatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdatedDate">LastUpdatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastUpdatedDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastUpdatedDate)
        {
            if (lastUpdatedDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastUpdatedDate", "Parameter 'lastUpdatedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.LastUpdatedDate > lastUpdatedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.LastUpdatedDate >= lastUpdatedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.LastUpdatedDate < lastUpdatedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.LastUpdatedDate <= lastUpdatedDate);
                case ComparisonOperator.NotEquals:
                    return lastUpdatedDate == null 
                        ? queryable.Where(p => p.LastUpdatedDate != null) 
                        : queryable.Where(p => p.LastUpdatedDate != lastUpdatedDate);
                default:
                    return lastUpdatedDate == null 
                        ? queryable.Where(p => p.LastUpdatedDate == null) 
                        : queryable.Where(p => p.LastUpdatedDate == lastUpdatedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastUpdatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdatedDate">LastUpdatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastUpdatedDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, System.DateTime? lastUpdatedDate, params System.DateTime?[] additionalValues)
        {
            var lastUpdatedDateList = new List<System.DateTime?> { lastUpdatedDate };

            if (additionalValues != null)
                lastUpdatedDateList.AddRange(additionalValues);
            else
                lastUpdatedDateList.Add(null);

            if (lastUpdatedDateList.Count == 1)
                return queryable.ByLastUpdatedDate(lastUpdatedDateList[0]);

            return queryable.ByLastUpdatedDate(lastUpdatedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Profile.LastUpdatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Profile> ByLastUpdatedDate(this IQueryable<Petshop.Data.Entities.Profile> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Profile, bool>("LastUpdatedDate", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

