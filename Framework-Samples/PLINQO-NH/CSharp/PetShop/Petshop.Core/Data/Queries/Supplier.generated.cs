#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for Supplier.
    /// </summary>
    public static partial class SupplierExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Petshop.Data.Entities.Supplier GetByKey(this IQueryable<Petshop.Data.Entities.Supplier> queryable
            , System.Int32 suppId
            )
        {
            return queryable
                .Where(s => s.SuppId == suppId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suppId">SuppId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> BySuppId(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.Int32 suppId)
        {
            return queryable.Where(s => s.SuppId == suppId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suppId">SuppId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> BySuppId(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ComparisonOperator comparisonOperator, System.Int32 suppId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.SuppId > suppId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.SuppId >= suppId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.SuppId < suppId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.SuppId <= suppId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.SuppId != suppId);
                default:
                    return queryable.Where(s => s.SuppId == suppId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suppId">SuppId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> BySuppId(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.Int32 suppId, params System.Int32[] additionalValues)
        {
            var suppIdList = new List<System.Int32> { suppId };

            if (additionalValues != null)
                suppIdList.AddRange(additionalValues);

            if (suppIdList.Count == 1)
                return queryable.BySuppId(suppIdList[0]);

            return queryable.BySuppId(suppIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> BySuppId(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(s => values.Contains(s.SuppId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByName(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String name)
        {
            // support nulls
            return name == null 
                ? queryable.Where(s => s.Name == null) 
                : queryable.Where(s => s.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByName(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return name == null 
                        ? queryable.Where(s => s.Name != null) 
                        : queryable.Where(s => s.Name != name);
                default:
                    return name == null 
                        ? queryable.Where(s => s.Name == null) 
                        : queryable.Where(s => s.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByName(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);
            else
                nameList.Add(null);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByName(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Supplier, bool>("Name", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByStatus(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String status)
        {
            return queryable.Where(s => s.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByStatus(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String status)
        {
            if (status == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Status.Contains(status));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Status.StartsWith(status));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Status.EndsWith(status));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Status.Contains(status) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Status != status);
                default:
                    return queryable.Where(s => s.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByStatus(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String status, params System.String[] additionalValues)
        {
            var statusList = new List<System.String> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByStatus(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Status));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr1">Addr1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr1(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String addr1)
        {
            // support nulls
            return addr1 == null 
                ? queryable.Where(s => s.Addr1 == null) 
                : queryable.Where(s => s.Addr1 == addr1);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr1">Addr1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr1(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String addr1)
        {
            if (addr1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("addr1", "Parameter 'addr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Addr1.Contains(addr1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Addr1.StartsWith(addr1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Addr1.EndsWith(addr1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Addr1.Contains(addr1) == false);
                case ContainmentOperator.NotEquals:
                    return addr1 == null 
                        ? queryable.Where(s => s.Addr1 != null) 
                        : queryable.Where(s => s.Addr1 != addr1);
                default:
                    return addr1 == null 
                        ? queryable.Where(s => s.Addr1 == null) 
                        : queryable.Where(s => s.Addr1 == addr1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr1">Addr1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr1(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String addr1, params System.String[] additionalValues)
        {
            var addr1List = new List<System.String> { addr1 };

            if (additionalValues != null)
                addr1List.AddRange(additionalValues);
            else
                addr1List.Add(null);

            if (addr1List.Count == 1)
                return queryable.ByAddr1(addr1List[0]);

            return queryable.ByAddr1(addr1List);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr1(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Supplier, bool>("Addr1", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr2">Addr2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr2(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String addr2)
        {
            // support nulls
            return addr2 == null 
                ? queryable.Where(s => s.Addr2 == null) 
                : queryable.Where(s => s.Addr2 == addr2);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr2">Addr2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr2(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String addr2)
        {
            if (addr2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("addr2", "Parameter 'addr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Addr2.Contains(addr2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Addr2.StartsWith(addr2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Addr2.EndsWith(addr2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Addr2.Contains(addr2) == false);
                case ContainmentOperator.NotEquals:
                    return addr2 == null 
                        ? queryable.Where(s => s.Addr2 != null) 
                        : queryable.Where(s => s.Addr2 != addr2);
                default:
                    return addr2 == null 
                        ? queryable.Where(s => s.Addr2 == null) 
                        : queryable.Where(s => s.Addr2 == addr2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr2">Addr2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr2(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String addr2, params System.String[] additionalValues)
        {
            var addr2List = new List<System.String> { addr2 };

            if (additionalValues != null)
                addr2List.AddRange(additionalValues);
            else
                addr2List.Add(null);

            if (addr2List.Count == 1)
                return queryable.ByAddr2(addr2List[0]);

            return queryable.ByAddr2(addr2List);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByAddr2(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Supplier, bool>("Addr2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByCity(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String city)
        {
            // support nulls
            return city == null 
                ? queryable.Where(s => s.City == null) 
                : queryable.Where(s => s.City == city);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByCity(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String city)
        {
            if (city == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("city", "Parameter 'city' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.City.Contains(city));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.City.StartsWith(city));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.City.EndsWith(city));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.City.Contains(city) == false);
                case ContainmentOperator.NotEquals:
                    return city == null 
                        ? queryable.Where(s => s.City != null) 
                        : queryable.Where(s => s.City != city);
                default:
                    return city == null 
                        ? queryable.Where(s => s.City == null) 
                        : queryable.Where(s => s.City == city);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByCity(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String city, params System.String[] additionalValues)
        {
            var cityList = new List<System.String> { city };

            if (additionalValues != null)
                cityList.AddRange(additionalValues);
            else
                cityList.Add(null);

            if (cityList.Count == 1)
                return queryable.ByCity(cityList[0]);

            return queryable.ByCity(cityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByCity(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Supplier, bool>("City", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByState(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String state)
        {
            // support nulls
            return state == null 
                ? queryable.Where(s => s.State == null) 
                : queryable.Where(s => s.State == state);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByState(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String state)
        {
            if (state == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("state", "Parameter 'state' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.State.Contains(state));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.State.StartsWith(state));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.State.EndsWith(state));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.State.Contains(state) == false);
                case ContainmentOperator.NotEquals:
                    return state == null 
                        ? queryable.Where(s => s.State != null) 
                        : queryable.Where(s => s.State != state);
                default:
                    return state == null 
                        ? queryable.Where(s => s.State == null) 
                        : queryable.Where(s => s.State == state);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByState(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String state, params System.String[] additionalValues)
        {
            var stateList = new List<System.String> { state };

            if (additionalValues != null)
                stateList.AddRange(additionalValues);
            else
                stateList.Add(null);

            if (stateList.Count == 1)
                return queryable.ByState(stateList[0]);

            return queryable.ByState(stateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByState(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Supplier, bool>("State", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByZip(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String zip)
        {
            // support nulls
            return zip == null 
                ? queryable.Where(s => s.Zip == null) 
                : queryable.Where(s => s.Zip == zip);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByZip(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String zip)
        {
            if (zip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("zip", "Parameter 'zip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Zip.Contains(zip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Zip.StartsWith(zip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Zip.EndsWith(zip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Zip.Contains(zip) == false);
                case ContainmentOperator.NotEquals:
                    return zip == null 
                        ? queryable.Where(s => s.Zip != null) 
                        : queryable.Where(s => s.Zip != zip);
                default:
                    return zip == null 
                        ? queryable.Where(s => s.Zip == null) 
                        : queryable.Where(s => s.Zip == zip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByZip(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String zip, params System.String[] additionalValues)
        {
            var zipList = new List<System.String> { zip };

            if (additionalValues != null)
                zipList.AddRange(additionalValues);
            else
                zipList.Add(null);

            if (zipList.Count == 1)
                return queryable.ByZip(zipList[0]);

            return queryable.ByZip(zipList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByZip(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Supplier, bool>("Zip", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByPhone(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String phone)
        {
            // support nulls
            return phone == null 
                ? queryable.Where(s => s.Phone == null) 
                : queryable.Where(s => s.Phone == phone);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByPhone(this IQueryable<Petshop.Data.Entities.Supplier> queryable, ContainmentOperator containmentOperator, System.String phone)
        {
            if (phone == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("phone", "Parameter 'phone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Phone.Contains(phone));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Phone.StartsWith(phone));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Phone.EndsWith(phone));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Phone.Contains(phone) == false);
                case ContainmentOperator.NotEquals:
                    return phone == null 
                        ? queryable.Where(s => s.Phone != null) 
                        : queryable.Where(s => s.Phone != phone);
                default:
                    return phone == null 
                        ? queryable.Where(s => s.Phone == null) 
                        : queryable.Where(s => s.Phone == phone);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByPhone(this IQueryable<Petshop.Data.Entities.Supplier> queryable, System.String phone, params System.String[] additionalValues)
        {
            var phoneList = new List<System.String> { phone };

            if (additionalValues != null)
                phoneList.AddRange(additionalValues);
            else
                phoneList.Add(null);

            if (phoneList.Count == 1)
                return queryable.ByPhone(phoneList[0]);

            return queryable.ByPhone(phoneList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.Supplier> ByPhone(this IQueryable<Petshop.Data.Entities.Supplier> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.Supplier, bool>("Phone", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

