#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for VwALLOrdersExtendedInfo.
    /// </summary>
    public static partial class VwALLOrdersExtendedInfoExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Petshop.Data.Entities.VwALLOrdersExtendedInfo GetByKey(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 orderId, System.String userId, System.DateTime orderDate, System.String shipAddr1, System.String shipCity, System.String shipState, System.String shipZip, System.String shipCountry, System.String billAddr1, System.String billCity, System.String billState, System.String billZip, System.String billCountry, System.String courier, System.Decimal totalPrice, System.String billToFirstName, System.String billToLastName, System.String shipToFirstName, System.String shipToLastName, System.Int32 authorizationNumber, System.String locale, System.Int32 lineNum, System.Int32 quantity, System.Decimal unitPrice, System.String productId, System.String categoryId, System.String itemId)
        {
            return queryable.FirstOrDefault(v => v.OrderId == orderId 
					&& v.UserId == userId 
					&& v.OrderDate == orderDate 
					&& v.ShipAddr1 == shipAddr1 
					&& v.ShipCity == shipCity 
					&& v.ShipState == shipState 
					&& v.ShipZip == shipZip 
					&& v.ShipCountry == shipCountry 
					&& v.BillAddr1 == billAddr1 
					&& v.BillCity == billCity 
					&& v.BillState == billState 
					&& v.BillZip == billZip 
					&& v.BillCountry == billCountry 
					&& v.Courier == courier 
					&& v.TotalPrice == totalPrice 
					&& v.BillToFirstName == billToFirstName 
					&& v.BillToLastName == billToLastName 
					&& v.ShipToFirstName == shipToFirstName 
					&& v.ShipToLastName == shipToLastName 
					&& v.AuthorizationNumber == authorizationNumber 
					&& v.Locale == locale 
					&& v.LineNum == lineNum 
					&& v.Quantity == quantity 
					&& v.UnitPrice == unitPrice 
					&& v.ProductId == productId 
					&& v.CategoryId == categoryId 
					&& v.ItemId == itemId);
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 orderId)
        {
            return queryable.Where(v => v.OrderId == orderId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Int32 orderId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.OrderId > orderId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.OrderId >= orderId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.OrderId < orderId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.OrderId <= orderId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.OrderId != orderId);
                default:
                    return queryable.Where(v => v.OrderId == orderId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 orderId, params System.Int32[] additionalValues)
        {
            var orderIdList = new List<System.Int32> { orderId };

            if (additionalValues != null)
                orderIdList.AddRange(additionalValues);

            if (orderIdList.Count == 1)
                return queryable.ByOrderId(orderIdList[0]);

            return queryable.ByOrderId(orderIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(v => values.Contains(v.OrderId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUserId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String userId)
        {
            return queryable.Where(v => v.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUserId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.UserId != userId);
                default:
                    return queryable.Where(v => v.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUserId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUserId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderDate">OrderDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderDate(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.DateTime orderDate)
        {
            return queryable.Where(v => v.OrderDate == orderDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderDate">OrderDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderDate(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.DateTime orderDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.OrderDate > orderDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.OrderDate >= orderDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.OrderDate < orderDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.OrderDate <= orderDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.OrderDate != orderDate);
                default:
                    return queryable.Where(v => v.OrderDate == orderDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderDate">OrderDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderDate(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.DateTime orderDate, params System.DateTime[] additionalValues)
        {
            var orderDateList = new List<System.DateTime> { orderDate };

            if (additionalValues != null)
                orderDateList.AddRange(additionalValues);

            if (orderDateList.Count == 1)
                return queryable.ByOrderDate(orderDateList[0]);

            return queryable.ByOrderDate(orderDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByOrderDate(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(v => values.Contains(v.OrderDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr1">ShipAddr1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipAddr1)
        {
            return queryable.Where(v => v.ShipAddr1 == shipAddr1);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr1">ShipAddr1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipAddr1)
        {
            if (shipAddr1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipAddr1", "Parameter 'shipAddr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipAddr1.Contains(shipAddr1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipAddr1.StartsWith(shipAddr1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipAddr1.EndsWith(shipAddr1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipAddr1.Contains(shipAddr1) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ShipAddr1 != shipAddr1);
                default:
                    return queryable.Where(v => v.ShipAddr1 == shipAddr1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr1">ShipAddr1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipAddr1, params System.String[] additionalValues)
        {
            var shipAddr1List = new List<System.String> { shipAddr1 };

            if (additionalValues != null)
                shipAddr1List.AddRange(additionalValues);

            if (shipAddr1List.Count == 1)
                return queryable.ByShipAddr1(shipAddr1List[0]);

            return queryable.ByShipAddr1(shipAddr1List);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ShipAddr1));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCity">ShipCity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipCity)
        {
            return queryable.Where(v => v.ShipCity == shipCity);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCity">ShipCity to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipCity)
        {
            if (shipCity == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipCity", "Parameter 'shipCity' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipCity.Contains(shipCity));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipCity.StartsWith(shipCity));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipCity.EndsWith(shipCity));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipCity.Contains(shipCity) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ShipCity != shipCity);
                default:
                    return queryable.Where(v => v.ShipCity == shipCity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCity">ShipCity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipCity, params System.String[] additionalValues)
        {
            var shipCityList = new List<System.String> { shipCity };

            if (additionalValues != null)
                shipCityList.AddRange(additionalValues);

            if (shipCityList.Count == 1)
                return queryable.ByShipCity(shipCityList[0]);

            return queryable.ByShipCity(shipCityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ShipCity));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipState">ShipState to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipState)
        {
            return queryable.Where(v => v.ShipState == shipState);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipState">ShipState to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipState)
        {
            if (shipState == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipState", "Parameter 'shipState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipState.Contains(shipState));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipState.StartsWith(shipState));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipState.EndsWith(shipState));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipState.Contains(shipState) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ShipState != shipState);
                default:
                    return queryable.Where(v => v.ShipState == shipState);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipState">ShipState to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipState, params System.String[] additionalValues)
        {
            var shipStateList = new List<System.String> { shipState };

            if (additionalValues != null)
                shipStateList.AddRange(additionalValues);

            if (shipStateList.Count == 1)
                return queryable.ByShipState(shipStateList[0]);

            return queryable.ByShipState(shipStateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ShipState));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipZip">ShipZip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipZip)
        {
            return queryable.Where(v => v.ShipZip == shipZip);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipZip">ShipZip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipZip)
        {
            if (shipZip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipZip", "Parameter 'shipZip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipZip.Contains(shipZip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipZip.StartsWith(shipZip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipZip.EndsWith(shipZip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipZip.Contains(shipZip) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ShipZip != shipZip);
                default:
                    return queryable.Where(v => v.ShipZip == shipZip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipZip">ShipZip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipZip, params System.String[] additionalValues)
        {
            var shipZipList = new List<System.String> { shipZip };

            if (additionalValues != null)
                shipZipList.AddRange(additionalValues);

            if (shipZipList.Count == 1)
                return queryable.ByShipZip(shipZipList[0]);

            return queryable.ByShipZip(shipZipList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ShipZip));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCountry">ShipCountry to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipCountry)
        {
            return queryable.Where(v => v.ShipCountry == shipCountry);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCountry">ShipCountry to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipCountry)
        {
            if (shipCountry == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipCountry", "Parameter 'shipCountry' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipCountry.Contains(shipCountry));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipCountry.StartsWith(shipCountry));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipCountry.EndsWith(shipCountry));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipCountry.Contains(shipCountry) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ShipCountry != shipCountry);
                default:
                    return queryable.Where(v => v.ShipCountry == shipCountry);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCountry">ShipCountry to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipCountry, params System.String[] additionalValues)
        {
            var shipCountryList = new List<System.String> { shipCountry };

            if (additionalValues != null)
                shipCountryList.AddRange(additionalValues);

            if (shipCountryList.Count == 1)
                return queryable.ByShipCountry(shipCountryList[0]);

            return queryable.ByShipCountry(shipCountryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ShipCountry));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr1">BillAddr1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billAddr1)
        {
            return queryable.Where(v => v.BillAddr1 == billAddr1);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr1">BillAddr1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billAddr1)
        {
            if (billAddr1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billAddr1", "Parameter 'billAddr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillAddr1.Contains(billAddr1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillAddr1.StartsWith(billAddr1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillAddr1.EndsWith(billAddr1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillAddr1.Contains(billAddr1) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.BillAddr1 != billAddr1);
                default:
                    return queryable.Where(v => v.BillAddr1 == billAddr1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr1">BillAddr1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billAddr1, params System.String[] additionalValues)
        {
            var billAddr1List = new List<System.String> { billAddr1 };

            if (additionalValues != null)
                billAddr1List.AddRange(additionalValues);

            if (billAddr1List.Count == 1)
                return queryable.ByBillAddr1(billAddr1List[0]);

            return queryable.ByBillAddr1(billAddr1List);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr1(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.BillAddr1));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCity">BillCity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billCity)
        {
            return queryable.Where(v => v.BillCity == billCity);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCity">BillCity to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billCity)
        {
            if (billCity == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billCity", "Parameter 'billCity' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillCity.Contains(billCity));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillCity.StartsWith(billCity));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillCity.EndsWith(billCity));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillCity.Contains(billCity) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.BillCity != billCity);
                default:
                    return queryable.Where(v => v.BillCity == billCity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCity">BillCity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billCity, params System.String[] additionalValues)
        {
            var billCityList = new List<System.String> { billCity };

            if (additionalValues != null)
                billCityList.AddRange(additionalValues);

            if (billCityList.Count == 1)
                return queryable.ByBillCity(billCityList[0]);

            return queryable.ByBillCity(billCityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.BillCity));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billState">BillState to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billState)
        {
            return queryable.Where(v => v.BillState == billState);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billState">BillState to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billState)
        {
            if (billState == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billState", "Parameter 'billState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillState.Contains(billState));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillState.StartsWith(billState));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillState.EndsWith(billState));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillState.Contains(billState) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.BillState != billState);
                default:
                    return queryable.Where(v => v.BillState == billState);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billState">BillState to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billState, params System.String[] additionalValues)
        {
            var billStateList = new List<System.String> { billState };

            if (additionalValues != null)
                billStateList.AddRange(additionalValues);

            if (billStateList.Count == 1)
                return queryable.ByBillState(billStateList[0]);

            return queryable.ByBillState(billStateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillState(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.BillState));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billZip">BillZip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billZip)
        {
            return queryable.Where(v => v.BillZip == billZip);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billZip">BillZip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billZip)
        {
            if (billZip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billZip", "Parameter 'billZip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillZip.Contains(billZip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillZip.StartsWith(billZip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillZip.EndsWith(billZip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillZip.Contains(billZip) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.BillZip != billZip);
                default:
                    return queryable.Where(v => v.BillZip == billZip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billZip">BillZip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billZip, params System.String[] additionalValues)
        {
            var billZipList = new List<System.String> { billZip };

            if (additionalValues != null)
                billZipList.AddRange(additionalValues);

            if (billZipList.Count == 1)
                return queryable.ByBillZip(billZipList[0]);

            return queryable.ByBillZip(billZipList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillZip(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.BillZip));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCountry">BillCountry to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billCountry)
        {
            return queryable.Where(v => v.BillCountry == billCountry);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCountry">BillCountry to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billCountry)
        {
            if (billCountry == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billCountry", "Parameter 'billCountry' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillCountry.Contains(billCountry));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillCountry.StartsWith(billCountry));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillCountry.EndsWith(billCountry));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillCountry.Contains(billCountry) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.BillCountry != billCountry);
                default:
                    return queryable.Where(v => v.BillCountry == billCountry);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCountry">BillCountry to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billCountry, params System.String[] additionalValues)
        {
            var billCountryList = new List<System.String> { billCountry };

            if (additionalValues != null)
                billCountryList.AddRange(additionalValues);

            if (billCountryList.Count == 1)
                return queryable.ByBillCountry(billCountryList[0]);

            return queryable.ByBillCountry(billCountryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillCountry(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.BillCountry));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courier">Courier to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCourier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String courier)
        {
            return queryable.Where(v => v.Courier == courier);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courier">Courier to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCourier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String courier)
        {
            if (courier == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("courier", "Parameter 'courier' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.Courier.Contains(courier));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.Courier.StartsWith(courier));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.Courier.EndsWith(courier));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.Courier.Contains(courier) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.Courier != courier);
                default:
                    return queryable.Where(v => v.Courier == courier);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courier">Courier to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCourier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String courier, params System.String[] additionalValues)
        {
            var courierList = new List<System.String> { courier };

            if (additionalValues != null)
                courierList.AddRange(additionalValues);

            if (courierList.Count == 1)
                return queryable.ByCourier(courierList[0]);

            return queryable.ByCourier(courierList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCourier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.Courier));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalPrice">TotalPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByTotalPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal totalPrice)
        {
            return queryable.Where(v => v.TotalPrice == totalPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalPrice">TotalPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByTotalPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Decimal totalPrice)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.TotalPrice > totalPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.TotalPrice >= totalPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.TotalPrice < totalPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.TotalPrice <= totalPrice);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.TotalPrice != totalPrice);
                default:
                    return queryable.Where(v => v.TotalPrice == totalPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalPrice">TotalPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByTotalPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal totalPrice, params System.Decimal[] additionalValues)
        {
            var totalPriceList = new List<System.Decimal> { totalPrice };

            if (additionalValues != null)
                totalPriceList.AddRange(additionalValues);

            if (totalPriceList.Count == 1)
                return queryable.ByTotalPrice(totalPriceList[0]);

            return queryable.ByTotalPrice(totalPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByTotalPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(v => values.Contains(v.TotalPrice));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToFirstName">BillToFirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billToFirstName)
        {
            return queryable.Where(v => v.BillToFirstName == billToFirstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToFirstName">BillToFirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billToFirstName)
        {
            if (billToFirstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billToFirstName", "Parameter 'billToFirstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillToFirstName.Contains(billToFirstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillToFirstName.StartsWith(billToFirstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillToFirstName.EndsWith(billToFirstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillToFirstName.Contains(billToFirstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.BillToFirstName != billToFirstName);
                default:
                    return queryable.Where(v => v.BillToFirstName == billToFirstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToFirstName">BillToFirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billToFirstName, params System.String[] additionalValues)
        {
            var billToFirstNameList = new List<System.String> { billToFirstName };

            if (additionalValues != null)
                billToFirstNameList.AddRange(additionalValues);

            if (billToFirstNameList.Count == 1)
                return queryable.ByBillToFirstName(billToFirstNameList[0]);

            return queryable.ByBillToFirstName(billToFirstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.BillToFirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToLastName">BillToLastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billToLastName)
        {
            return queryable.Where(v => v.BillToLastName == billToLastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToLastName">BillToLastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billToLastName)
        {
            if (billToLastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billToLastName", "Parameter 'billToLastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillToLastName.Contains(billToLastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillToLastName.StartsWith(billToLastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillToLastName.EndsWith(billToLastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillToLastName.Contains(billToLastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.BillToLastName != billToLastName);
                default:
                    return queryable.Where(v => v.BillToLastName == billToLastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToLastName">BillToLastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billToLastName, params System.String[] additionalValues)
        {
            var billToLastNameList = new List<System.String> { billToLastName };

            if (additionalValues != null)
                billToLastNameList.AddRange(additionalValues);

            if (billToLastNameList.Count == 1)
                return queryable.ByBillToLastName(billToLastNameList[0]);

            return queryable.ByBillToLastName(billToLastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.BillToLastName));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToFirstName">ShipToFirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipToFirstName)
        {
            return queryable.Where(v => v.ShipToFirstName == shipToFirstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToFirstName">ShipToFirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipToFirstName)
        {
            if (shipToFirstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipToFirstName", "Parameter 'shipToFirstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipToFirstName.Contains(shipToFirstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipToFirstName.StartsWith(shipToFirstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipToFirstName.EndsWith(shipToFirstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipToFirstName.Contains(shipToFirstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ShipToFirstName != shipToFirstName);
                default:
                    return queryable.Where(v => v.ShipToFirstName == shipToFirstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToFirstName">ShipToFirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipToFirstName, params System.String[] additionalValues)
        {
            var shipToFirstNameList = new List<System.String> { shipToFirstName };

            if (additionalValues != null)
                shipToFirstNameList.AddRange(additionalValues);

            if (shipToFirstNameList.Count == 1)
                return queryable.ByShipToFirstName(shipToFirstNameList[0]);

            return queryable.ByShipToFirstName(shipToFirstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToFirstName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ShipToFirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToLastName">ShipToLastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipToLastName)
        {
            return queryable.Where(v => v.ShipToLastName == shipToLastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToLastName">ShipToLastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipToLastName)
        {
            if (shipToLastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipToLastName", "Parameter 'shipToLastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipToLastName.Contains(shipToLastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipToLastName.StartsWith(shipToLastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipToLastName.EndsWith(shipToLastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipToLastName.Contains(shipToLastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ShipToLastName != shipToLastName);
                default:
                    return queryable.Where(v => v.ShipToLastName == shipToLastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToLastName">ShipToLastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipToLastName, params System.String[] additionalValues)
        {
            var shipToLastNameList = new List<System.String> { shipToLastName };

            if (additionalValues != null)
                shipToLastNameList.AddRange(additionalValues);

            if (shipToLastNameList.Count == 1)
                return queryable.ByShipToLastName(shipToLastNameList[0]);

            return queryable.ByShipToLastName(shipToLastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipToLastName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ShipToLastName));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByAuthorizationNumber(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 authorizationNumber)
        {
            return queryable.Where(v => v.AuthorizationNumber == authorizationNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationNumber">AuthorizationNumber to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByAuthorizationNumber(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Int32 authorizationNumber)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.AuthorizationNumber > authorizationNumber);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.AuthorizationNumber >= authorizationNumber);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.AuthorizationNumber < authorizationNumber);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.AuthorizationNumber <= authorizationNumber);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.AuthorizationNumber != authorizationNumber);
                default:
                    return queryable.Where(v => v.AuthorizationNumber == authorizationNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByAuthorizationNumber(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 authorizationNumber, params System.Int32[] additionalValues)
        {
            var authorizationNumberList = new List<System.Int32> { authorizationNumber };

            if (additionalValues != null)
                authorizationNumberList.AddRange(additionalValues);

            if (authorizationNumberList.Count == 1)
                return queryable.ByAuthorizationNumber(authorizationNumberList[0]);

            return queryable.ByAuthorizationNumber(authorizationNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByAuthorizationNumber(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(v => values.Contains(v.AuthorizationNumber));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locale">Locale to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLocale(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String locale)
        {
            return queryable.Where(v => v.Locale == locale);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locale">Locale to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLocale(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String locale)
        {
            if (locale == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("locale", "Parameter 'locale' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.Locale.Contains(locale));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.Locale.StartsWith(locale));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.Locale.EndsWith(locale));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.Locale.Contains(locale) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.Locale != locale);
                default:
                    return queryable.Where(v => v.Locale == locale);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locale">Locale to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLocale(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String locale, params System.String[] additionalValues)
        {
            var localeList = new List<System.String> { locale };

            if (additionalValues != null)
                localeList.AddRange(additionalValues);

            if (localeList.Count == 1)
                return queryable.ByLocale(localeList[0]);

            return queryable.ByLocale(localeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLocale(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.Locale));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLineNum(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 lineNum)
        {
            return queryable.Where(v => v.LineNum == lineNum);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLineNum(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Int32 lineNum)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.LineNum > lineNum);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.LineNum >= lineNum);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.LineNum < lineNum);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.LineNum <= lineNum);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.LineNum != lineNum);
                default:
                    return queryable.Where(v => v.LineNum == lineNum);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lineNum">LineNum to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLineNum(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 lineNum, params System.Int32[] additionalValues)
        {
            var lineNumList = new List<System.Int32> { lineNum };

            if (additionalValues != null)
                lineNumList.AddRange(additionalValues);

            if (lineNumList.Count == 1)
                return queryable.ByLineNum(lineNumList[0]);

            return queryable.ByLineNum(lineNumList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.LineNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByLineNum(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(v => values.Contains(v.LineNum));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByQuantity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 quantity)
        {
            return queryable.Where(v => v.Quantity == quantity);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByQuantity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Int32 quantity)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.Quantity > quantity);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.Quantity >= quantity);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.Quantity < quantity);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.Quantity <= quantity);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.Quantity != quantity);
                default:
                    return queryable.Where(v => v.Quantity == quantity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByQuantity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32 quantity, params System.Int32[] additionalValues)
        {
            var quantityList = new List<System.Int32> { quantity };

            if (additionalValues != null)
                quantityList.AddRange(additionalValues);

            if (quantityList.Count == 1)
                return queryable.ByQuantity(quantityList[0]);

            return queryable.ByQuantity(quantityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByQuantity(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(v => values.Contains(v.Quantity));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitPrice">UnitPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal unitPrice)
        {
            return queryable.Where(v => v.UnitPrice == unitPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitPrice">UnitPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Decimal unitPrice)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.UnitPrice > unitPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.UnitPrice >= unitPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.UnitPrice < unitPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.UnitPrice <= unitPrice);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.UnitPrice != unitPrice);
                default:
                    return queryable.Where(v => v.UnitPrice == unitPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitPrice">UnitPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal unitPrice, params System.Decimal[] additionalValues)
        {
            var unitPriceList = new List<System.Decimal> { unitPrice };

            if (additionalValues != null)
                unitPriceList.AddRange(additionalValues);

            if (unitPriceList.Count == 1)
                return queryable.ByUnitPrice(unitPriceList[0]);

            return queryable.ByUnitPrice(unitPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(v => values.Contains(v.UnitPrice));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String productId)
        {
            return queryable.Where(v => v.ProductId == productId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String productId)
        {
            if (productId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productId", "Parameter 'productId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ProductId.Contains(productId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ProductId.StartsWith(productId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ProductId.EndsWith(productId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ProductId.Contains(productId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ProductId != productId);
                default:
                    return queryable.Where(v => v.ProductId == productId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String productId, params System.String[] additionalValues)
        {
            var productIdList = new List<System.String> { productId };

            if (additionalValues != null)
                productIdList.AddRange(additionalValues);

            if (productIdList.Count == 1)
                return queryable.ByProductId(productIdList[0]);

            return queryable.ByProductId(productIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ProductId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String categoryId)
        {
            return queryable.Where(v => v.CategoryId == categoryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String categoryId)
        {
            if (categoryId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryId", "Parameter 'categoryId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.CategoryId.Contains(categoryId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.CategoryId.StartsWith(categoryId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.CategoryId.EndsWith(categoryId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.CategoryId.Contains(categoryId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.CategoryId != categoryId);
                default:
                    return queryable.Where(v => v.CategoryId == categoryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String categoryId, params System.String[] additionalValues)
        {
            var categoryIdList = new List<System.String> { categoryId };

            if (additionalValues != null)
                categoryIdList.AddRange(additionalValues);

            if (categoryIdList.Count == 1)
                return queryable.ByCategoryId(categoryIdList[0]);

            return queryable.ByCategoryId(categoryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.CategoryId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String itemId)
        {
            return queryable.Where(v => v.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String itemId)
        {
            if (itemId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ItemId.Contains(itemId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ItemId.StartsWith(itemId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ItemId.EndsWith(itemId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ItemId.Contains(itemId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ItemId != itemId);
                default:
                    return queryable.Where(v => v.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String itemId, params System.String[] additionalValues)
        {
            var itemIdList = new List<System.String> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemId(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr2">ShipAddr2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipAddr2)
        {
            // support nulls
            return shipAddr2 == null 
                ? queryable.Where(v => v.ShipAddr2 == null) 
                : queryable.Where(v => v.ShipAddr2 == shipAddr2);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr2">ShipAddr2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String shipAddr2)
        {
            if (shipAddr2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipAddr2", "Parameter 'shipAddr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ShipAddr2.Contains(shipAddr2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ShipAddr2.StartsWith(shipAddr2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ShipAddr2.EndsWith(shipAddr2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ShipAddr2.Contains(shipAddr2) == false);
                case ContainmentOperator.NotEquals:
                    return shipAddr2 == null 
                        ? queryable.Where(v => v.ShipAddr2 != null) 
                        : queryable.Where(v => v.ShipAddr2 != shipAddr2);
                default:
                    return shipAddr2 == null 
                        ? queryable.Where(v => v.ShipAddr2 == null) 
                        : queryable.Where(v => v.ShipAddr2 == shipAddr2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr2">ShipAddr2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String shipAddr2, params System.String[] additionalValues)
        {
            var shipAddr2List = new List<System.String> { shipAddr2 };

            if (additionalValues != null)
                shipAddr2List.AddRange(additionalValues);
            else
                shipAddr2List.Add(null);

            if (shipAddr2List.Count == 1)
                return queryable.ByShipAddr2(shipAddr2List[0]);

            return queryable.ByShipAddr2(shipAddr2List);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByShipAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("ShipAddr2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr2">BillAddr2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billAddr2)
        {
            // support nulls
            return billAddr2 == null 
                ? queryable.Where(v => v.BillAddr2 == null) 
                : queryable.Where(v => v.BillAddr2 == billAddr2);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr2">BillAddr2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String billAddr2)
        {
            if (billAddr2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billAddr2", "Parameter 'billAddr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.BillAddr2.Contains(billAddr2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.BillAddr2.StartsWith(billAddr2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.BillAddr2.EndsWith(billAddr2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.BillAddr2.Contains(billAddr2) == false);
                case ContainmentOperator.NotEquals:
                    return billAddr2 == null 
                        ? queryable.Where(v => v.BillAddr2 != null) 
                        : queryable.Where(v => v.BillAddr2 != billAddr2);
                default:
                    return billAddr2 == null 
                        ? queryable.Where(v => v.BillAddr2 == null) 
                        : queryable.Where(v => v.BillAddr2 == billAddr2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr2">BillAddr2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String billAddr2, params System.String[] additionalValues)
        {
            var billAddr2List = new List<System.String> { billAddr2 };

            if (additionalValues != null)
                billAddr2List.AddRange(additionalValues);
            else
                billAddr2List.Add(null);

            if (billAddr2List.Count == 1)
                return queryable.ByBillAddr2(billAddr2List[0]);

            return queryable.ByBillAddr2(billAddr2List);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByBillAddr2(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("BillAddr2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productName">ProductName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String productName)
        {
            // support nulls
            return productName == null 
                ? queryable.Where(v => v.ProductName == null) 
                : queryable.Where(v => v.ProductName == productName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productName">ProductName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String productName)
        {
            if (productName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productName", "Parameter 'productName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ProductName.Contains(productName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ProductName.StartsWith(productName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ProductName.EndsWith(productName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ProductName.Contains(productName) == false);
                case ContainmentOperator.NotEquals:
                    return productName == null 
                        ? queryable.Where(v => v.ProductName != null) 
                        : queryable.Where(v => v.ProductName != productName);
                default:
                    return productName == null 
                        ? queryable.Where(v => v.ProductName == null) 
                        : queryable.Where(v => v.ProductName == productName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productName">ProductName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String productName, params System.String[] additionalValues)
        {
            var productNameList = new List<System.String> { productName };

            if (additionalValues != null)
                productNameList.AddRange(additionalValues);
            else
                productNameList.Add(null);

            if (productNameList.Count == 1)
                return queryable.ByProductName(productNameList[0]);

            return queryable.ByProductName(productNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("ProductName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Descn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="descn">Descn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByDescn(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String descn)
        {
            // support nulls
            return descn == null 
                ? queryable.Where(v => v.Descn == null) 
                : queryable.Where(v => v.Descn == descn);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Descn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="descn">Descn to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByDescn(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String descn)
        {
            if (descn == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("descn", "Parameter 'descn' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.Descn.Contains(descn));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.Descn.StartsWith(descn));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.Descn.EndsWith(descn));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.Descn.Contains(descn) == false);
                case ContainmentOperator.NotEquals:
                    return descn == null 
                        ? queryable.Where(v => v.Descn != null) 
                        : queryable.Where(v => v.Descn != descn);
                default:
                    return descn == null 
                        ? queryable.Where(v => v.Descn == null) 
                        : queryable.Where(v => v.Descn == descn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Descn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="descn">Descn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByDescn(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String descn, params System.String[] additionalValues)
        {
            var descnList = new List<System.String> { descn };

            if (additionalValues != null)
                descnList.AddRange(additionalValues);
            else
                descnList.Add(null);

            if (descnList.Count == 1)
                return queryable.ByDescn(descnList[0]);

            return queryable.ByDescn(descnList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Descn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByDescn(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("Descn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productImage">ProductImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String productImage)
        {
            // support nulls
            return productImage == null 
                ? queryable.Where(v => v.ProductImage == null) 
                : queryable.Where(v => v.ProductImage == productImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productImage">ProductImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String productImage)
        {
            if (productImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productImage", "Parameter 'productImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ProductImage.Contains(productImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ProductImage.StartsWith(productImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ProductImage.EndsWith(productImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ProductImage.Contains(productImage) == false);
                case ContainmentOperator.NotEquals:
                    return productImage == null 
                        ? queryable.Where(v => v.ProductImage != null) 
                        : queryable.Where(v => v.ProductImage != productImage);
                default:
                    return productImage == null 
                        ? queryable.Where(v => v.ProductImage == null) 
                        : queryable.Where(v => v.ProductImage == productImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productImage">ProductImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String productImage, params System.String[] additionalValues)
        {
            var productImageList = new List<System.String> { productImage };

            if (additionalValues != null)
                productImageList.AddRange(additionalValues);
            else
                productImageList.Add(null);

            if (productImageList.Count == 1)
                return queryable.ByProductImage(productImageList[0]);

            return queryable.ByProductImage(productImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByProductImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("ProductImage", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByListPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal? listPrice)
        {
            // support nulls
            return listPrice == null 
                ? queryable.Where(v => v.ListPrice == null) 
                : queryable.Where(v => v.ListPrice == listPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByListPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Decimal? listPrice)
        {
            if (listPrice == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("listPrice", "Parameter 'listPrice' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.ListPrice > listPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.ListPrice >= listPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.ListPrice < listPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.ListPrice <= listPrice);
                case ComparisonOperator.NotEquals:
                    return listPrice == null 
                        ? queryable.Where(v => v.ListPrice != null) 
                        : queryable.Where(v => v.ListPrice != listPrice);
                default:
                    return listPrice == null 
                        ? queryable.Where(v => v.ListPrice == null) 
                        : queryable.Where(v => v.ListPrice == listPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByListPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal? listPrice, params System.Decimal?[] additionalValues)
        {
            var listPriceList = new List<System.Decimal?> { listPrice };

            if (additionalValues != null)
                listPriceList.AddRange(additionalValues);
            else
                listPriceList.Add(null);

            if (listPriceList.Count == 1)
                return queryable.ByListPrice(listPriceList[0]);

            return queryable.ByListPrice(listPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByListPrice(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("ListPrice", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal? unitCost)
        {
            // support nulls
            return unitCost == null 
                ? queryable.Where(v => v.UnitCost == null) 
                : queryable.Where(v => v.UnitCost == unitCost);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Decimal? unitCost)
        {
            if (unitCost == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("unitCost", "Parameter 'unitCost' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.UnitCost > unitCost);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.UnitCost >= unitCost);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.UnitCost < unitCost);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.UnitCost <= unitCost);
                case ComparisonOperator.NotEquals:
                    return unitCost == null 
                        ? queryable.Where(v => v.UnitCost != null) 
                        : queryable.Where(v => v.UnitCost != unitCost);
                default:
                    return unitCost == null 
                        ? queryable.Where(v => v.UnitCost == null) 
                        : queryable.Where(v => v.UnitCost == unitCost);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Decimal? unitCost, params System.Decimal?[] additionalValues)
        {
            var unitCostList = new List<System.Decimal?> { unitCost };

            if (additionalValues != null)
                unitCostList.AddRange(additionalValues);
            else
                unitCostList.Add(null);

            if (unitCostList.Count == 1)
                return queryable.ByUnitCost(unitCostList[0]);

            return queryable.ByUnitCost(unitCostList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("UnitCost", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="supplier">Supplier to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> BySupplier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32? supplier)
        {
            // support nulls
            return supplier == null 
                ? queryable.Where(v => v.Supplier == null) 
                : queryable.Where(v => v.Supplier == supplier);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="supplier">Supplier to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> BySupplier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ComparisonOperator comparisonOperator, System.Int32? supplier)
        {
            if (supplier == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("supplier", "Parameter 'supplier' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.Supplier > supplier);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.Supplier >= supplier);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.Supplier < supplier);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.Supplier <= supplier);
                case ComparisonOperator.NotEquals:
                    return supplier == null 
                        ? queryable.Where(v => v.Supplier != null) 
                        : queryable.Where(v => v.Supplier != supplier);
                default:
                    return supplier == null 
                        ? queryable.Where(v => v.Supplier == null) 
                        : queryable.Where(v => v.Supplier == supplier);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="supplier">Supplier to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> BySupplier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.Int32? supplier, params System.Int32?[] additionalValues)
        {
            var supplierList = new List<System.Int32?> { supplier };

            if (additionalValues != null)
                supplierList.AddRange(additionalValues);
            else
                supplierList.Add(null);

            if (supplierList.Count == 1)
                return queryable.BySupplier(supplierList[0]);

            return queryable.BySupplier(supplierList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> BySupplier(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("Supplier", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByStatus(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String status)
        {
            // support nulls
            return status == null 
                ? queryable.Where(v => v.Status == null) 
                : queryable.Where(v => v.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByStatus(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String status)
        {
            if (status == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.Status.Contains(status));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.Status.StartsWith(status));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.Status.EndsWith(status));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.Status.Contains(status) == false);
                case ContainmentOperator.NotEquals:
                    return status == null 
                        ? queryable.Where(v => v.Status != null) 
                        : queryable.Where(v => v.Status != status);
                default:
                    return status == null 
                        ? queryable.Where(v => v.Status == null) 
                        : queryable.Where(v => v.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByStatus(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String status, params System.String[] additionalValues)
        {
            var statusList = new List<System.String> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);
            else
                statusList.Add(null);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByStatus(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("Status", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String itemName)
        {
            // support nulls
            return itemName == null 
                ? queryable.Where(v => v.ItemName == null) 
                : queryable.Where(v => v.ItemName == itemName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String itemName)
        {
            if (itemName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemName", "Parameter 'itemName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ItemName.Contains(itemName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ItemName.StartsWith(itemName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ItemName.EndsWith(itemName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ItemName.Contains(itemName) == false);
                case ContainmentOperator.NotEquals:
                    return itemName == null 
                        ? queryable.Where(v => v.ItemName != null) 
                        : queryable.Where(v => v.ItemName != itemName);
                default:
                    return itemName == null 
                        ? queryable.Where(v => v.ItemName == null) 
                        : queryable.Where(v => v.ItemName == itemName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String itemName, params System.String[] additionalValues)
        {
            var itemNameList = new List<System.String> { itemName };

            if (additionalValues != null)
                itemNameList.AddRange(additionalValues);
            else
                itemNameList.Add(null);

            if (itemNameList.Count == 1)
                return queryable.ByItemName(itemNameList[0]);

            return queryable.ByItemName(itemNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("ItemName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemImage">ItemImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String itemImage)
        {
            // support nulls
            return itemImage == null 
                ? queryable.Where(v => v.ItemImage == null) 
                : queryable.Where(v => v.ItemImage == itemImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemImage">ItemImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String itemImage)
        {
            if (itemImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemImage", "Parameter 'itemImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ItemImage.Contains(itemImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ItemImage.StartsWith(itemImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ItemImage.EndsWith(itemImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ItemImage.Contains(itemImage) == false);
                case ContainmentOperator.NotEquals:
                    return itemImage == null 
                        ? queryable.Where(v => v.ItemImage != null) 
                        : queryable.Where(v => v.ItemImage != itemImage);
                default:
                    return itemImage == null 
                        ? queryable.Where(v => v.ItemImage == null) 
                        : queryable.Where(v => v.ItemImage == itemImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemImage">ItemImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String itemImage, params System.String[] additionalValues)
        {
            var itemImageList = new List<System.String> { itemImage };

            if (additionalValues != null)
                itemImageList.AddRange(additionalValues);
            else
                itemImageList.Add(null);

            if (itemImageList.Count == 1)
                return queryable.ByItemImage(itemImageList[0]);

            return queryable.ByItemImage(itemImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByItemImage(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("ItemImage", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryName">CategoryName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String categoryName)
        {
            // support nulls
            return categoryName == null 
                ? queryable.Where(v => v.CategoryName == null) 
                : queryable.Where(v => v.CategoryName == categoryName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryName">CategoryName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, ContainmentOperator containmentOperator, System.String categoryName)
        {
            if (categoryName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryName", "Parameter 'categoryName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.CategoryName.Contains(categoryName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.CategoryName.StartsWith(categoryName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.CategoryName.EndsWith(categoryName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.CategoryName.Contains(categoryName) == false);
                case ContainmentOperator.NotEquals:
                    return categoryName == null 
                        ? queryable.Where(v => v.CategoryName != null) 
                        : queryable.Where(v => v.CategoryName != categoryName);
                default:
                    return categoryName == null 
                        ? queryable.Where(v => v.CategoryName == null) 
                        : queryable.Where(v => v.CategoryName == categoryName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryName">CategoryName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, System.String categoryName, params System.String[] additionalValues)
        {
            var categoryNameList = new List<System.String> { categoryName };

            if (additionalValues != null)
                categoryNameList.AddRange(additionalValues);
            else
                categoryNameList.Add(null);

            if (categoryNameList.Count == 1)
                return queryable.ByCategoryName(categoryNameList[0]);

            return queryable.ByCategoryName(categoryNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwALLOrdersExtendedInfo.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwALLOrdersExtendedInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwALLOrdersExtendedInfo, bool>("CategoryName", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

