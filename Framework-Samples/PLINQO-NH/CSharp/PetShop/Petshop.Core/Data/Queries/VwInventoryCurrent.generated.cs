#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Petshop.Data
{
    /// <summary>
    /// The query extension class for VwInventoryCurrent.
    /// </summary>
    public static partial class VwInventoryCurrentExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Petshop.Data.Entities.VwInventoryCurrent GetByKey(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String categoryId, System.Int32 qty, System.String itemId, System.String productId)
        {
            return queryable.FirstOrDefault(v => v.CategoryId == categoryId 
					&& v.Qty == qty 
					&& v.ItemId == itemId 
					&& v.ProductId == productId);
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String categoryId)
        {
            return queryable.Where(v => v.CategoryId == categoryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String categoryId)
        {
            if (categoryId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryId", "Parameter 'categoryId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.CategoryId.Contains(categoryId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.CategoryId.StartsWith(categoryId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.CategoryId.EndsWith(categoryId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.CategoryId.Contains(categoryId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.CategoryId != categoryId);
                default:
                    return queryable.Where(v => v.CategoryId == categoryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String categoryId, params System.String[] additionalValues)
        {
            var categoryIdList = new List<System.String> { categoryId };

            if (additionalValues != null)
                categoryIdList.AddRange(additionalValues);

            if (categoryIdList.Count == 1)
                return queryable.ByCategoryId(categoryIdList[0]);

            return queryable.ByCategoryId(categoryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.CategoryId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByQty(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Int32 qty)
        {
            return queryable.Where(v => v.Qty == qty);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByQty(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ComparisonOperator comparisonOperator, System.Int32 qty)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.Qty > qty);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.Qty >= qty);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.Qty < qty);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.Qty <= qty);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(v => v.Qty != qty);
                default:
                    return queryable.Where(v => v.Qty == qty);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByQty(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Int32 qty, params System.Int32[] additionalValues)
        {
            var qtyList = new List<System.Int32> { qty };

            if (additionalValues != null)
                qtyList.AddRange(additionalValues);

            if (qtyList.Count == 1)
                return queryable.ByQty(qtyList[0]);

            return queryable.ByQty(qtyList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByQty(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(v => values.Contains(v.Qty));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String itemId)
        {
            return queryable.Where(v => v.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String itemId)
        {
            if (itemId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ItemId.Contains(itemId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ItemId.StartsWith(itemId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ItemId.EndsWith(itemId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ItemId.Contains(itemId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ItemId != itemId);
                default:
                    return queryable.Where(v => v.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String itemId, params System.String[] additionalValues)
        {
            var itemIdList = new List<System.String> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productId)
        {
            return queryable.Where(v => v.ProductId == productId);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String productId)
        {
            if (productId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productId", "Parameter 'productId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ProductId.Contains(productId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ProductId.StartsWith(productId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ProductId.EndsWith(productId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ProductId.Contains(productId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(v => v.ProductId != productId);
                default:
                    return queryable.Where(v => v.ProductId == productId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productId">ProductId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productId, params System.String[] additionalValues)
        {
            var productIdList = new List<System.String> { productId };

            if (additionalValues != null)
                productIdList.AddRange(additionalValues);

            if (productIdList.Count == 1)
                return queryable.ByProductId(productIdList[0]);

            return queryable.ByProductId(productIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductId(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(v => values.Contains(v.ProductId));
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryName">CategoryName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String categoryName)
        {
            // support nulls
            return categoryName == null 
                ? queryable.Where(v => v.CategoryName == null) 
                : queryable.Where(v => v.CategoryName == categoryName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryName">CategoryName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String categoryName)
        {
            if (categoryName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryName", "Parameter 'categoryName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.CategoryName.Contains(categoryName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.CategoryName.StartsWith(categoryName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.CategoryName.EndsWith(categoryName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.CategoryName.Contains(categoryName) == false);
                case ContainmentOperator.NotEquals:
                    return categoryName == null 
                        ? queryable.Where(v => v.CategoryName != null) 
                        : queryable.Where(v => v.CategoryName != categoryName);
                default:
                    return categoryName == null 
                        ? queryable.Where(v => v.CategoryName == null) 
                        : queryable.Where(v => v.CategoryName == categoryName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryName">CategoryName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String categoryName, params System.String[] additionalValues)
        {
            var categoryNameList = new List<System.String> { categoryName };

            if (additionalValues != null)
                categoryNameList.AddRange(additionalValues);
            else
                categoryNameList.Add(null);

            if (categoryNameList.Count == 1)
                return queryable.ByCategoryName(categoryNameList[0]);

            return queryable.ByCategoryName(categoryNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("CategoryName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryDescription">CategoryDescription to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String categoryDescription)
        {
            // support nulls
            return categoryDescription == null 
                ? queryable.Where(v => v.CategoryDescription == null) 
                : queryable.Where(v => v.CategoryDescription == categoryDescription);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryDescription">CategoryDescription to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String categoryDescription)
        {
            if (categoryDescription == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryDescription", "Parameter 'categoryDescription' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.CategoryDescription.Contains(categoryDescription));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.CategoryDescription.StartsWith(categoryDescription));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.CategoryDescription.EndsWith(categoryDescription));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.CategoryDescription.Contains(categoryDescription) == false);
                case ContainmentOperator.NotEquals:
                    return categoryDescription == null 
                        ? queryable.Where(v => v.CategoryDescription != null) 
                        : queryable.Where(v => v.CategoryDescription != categoryDescription);
                default:
                    return categoryDescription == null 
                        ? queryable.Where(v => v.CategoryDescription == null) 
                        : queryable.Where(v => v.CategoryDescription == categoryDescription);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryDescription">CategoryDescription to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String categoryDescription, params System.String[] additionalValues)
        {
            var categoryDescriptionList = new List<System.String> { categoryDescription };

            if (additionalValues != null)
                categoryDescriptionList.AddRange(additionalValues);
            else
                categoryDescriptionList.Add(null);

            if (categoryDescriptionList.Count == 1)
                return queryable.ByCategoryDescription(categoryDescriptionList[0]);

            return queryable.ByCategoryDescription(categoryDescriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.CategoryDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByCategoryDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("CategoryDescription", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByListPrice(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Decimal? listPrice)
        {
            // support nulls
            return listPrice == null 
                ? queryable.Where(v => v.ListPrice == null) 
                : queryable.Where(v => v.ListPrice == listPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByListPrice(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ComparisonOperator comparisonOperator, System.Decimal? listPrice)
        {
            if (listPrice == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("listPrice", "Parameter 'listPrice' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.ListPrice > listPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.ListPrice >= listPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.ListPrice < listPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.ListPrice <= listPrice);
                case ComparisonOperator.NotEquals:
                    return listPrice == null 
                        ? queryable.Where(v => v.ListPrice != null) 
                        : queryable.Where(v => v.ListPrice != listPrice);
                default:
                    return listPrice == null 
                        ? queryable.Where(v => v.ListPrice == null) 
                        : queryable.Where(v => v.ListPrice == listPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPrice">ListPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByListPrice(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Decimal? listPrice, params System.Decimal?[] additionalValues)
        {
            var listPriceList = new List<System.Decimal?> { listPrice };

            if (additionalValues != null)
                listPriceList.AddRange(additionalValues);
            else
                listPriceList.Add(null);

            if (listPriceList.Count == 1)
                return queryable.ByListPrice(listPriceList[0]);

            return queryable.ByListPrice(listPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ListPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByListPrice(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("ListPrice", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Decimal? unitCost)
        {
            // support nulls
            return unitCost == null 
                ? queryable.Where(v => v.UnitCost == null) 
                : queryable.Where(v => v.UnitCost == unitCost);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ComparisonOperator comparisonOperator, System.Decimal? unitCost)
        {
            if (unitCost == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("unitCost", "Parameter 'unitCost' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.UnitCost > unitCost);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.UnitCost >= unitCost);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.UnitCost < unitCost);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.UnitCost <= unitCost);
                case ComparisonOperator.NotEquals:
                    return unitCost == null 
                        ? queryable.Where(v => v.UnitCost != null) 
                        : queryable.Where(v => v.UnitCost != unitCost);
                default:
                    return unitCost == null 
                        ? queryable.Where(v => v.UnitCost == null) 
                        : queryable.Where(v => v.UnitCost == unitCost);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="unitCost">UnitCost to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Decimal? unitCost, params System.Decimal?[] additionalValues)
        {
            var unitCostList = new List<System.Decimal?> { unitCost };

            if (additionalValues != null)
                unitCostList.AddRange(additionalValues);
            else
                unitCostList.Add(null);

            if (unitCostList.Count == 1)
                return queryable.ByUnitCost(unitCostList[0]);

            return queryable.ByUnitCost(unitCostList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.UnitCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByUnitCost(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("UnitCost", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="supplier">Supplier to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> BySupplier(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Int32? supplier)
        {
            // support nulls
            return supplier == null 
                ? queryable.Where(v => v.Supplier == null) 
                : queryable.Where(v => v.Supplier == supplier);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="supplier">Supplier to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> BySupplier(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ComparisonOperator comparisonOperator, System.Int32? supplier)
        {
            if (supplier == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("supplier", "Parameter 'supplier' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(v => v.Supplier > supplier);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(v => v.Supplier >= supplier);
                case ComparisonOperator.LessThan:
                    return queryable.Where(v => v.Supplier < supplier);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(v => v.Supplier <= supplier);
                case ComparisonOperator.NotEquals:
                    return supplier == null 
                        ? queryable.Where(v => v.Supplier != null) 
                        : queryable.Where(v => v.Supplier != supplier);
                default:
                    return supplier == null 
                        ? queryable.Where(v => v.Supplier == null) 
                        : queryable.Where(v => v.Supplier == supplier);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="supplier">Supplier to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> BySupplier(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.Int32? supplier, params System.Int32?[] additionalValues)
        {
            var supplierList = new List<System.Int32?> { supplier };

            if (additionalValues != null)
                supplierList.AddRange(additionalValues);
            else
                supplierList.Add(null);

            if (supplierList.Count == 1)
                return queryable.BySupplier(supplierList[0]);

            return queryable.BySupplier(supplierList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Supplier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> BySupplier(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("Supplier", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByStatus(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String status)
        {
            // support nulls
            return status == null 
                ? queryable.Where(v => v.Status == null) 
                : queryable.Where(v => v.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByStatus(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String status)
        {
            if (status == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.Status.Contains(status));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.Status.StartsWith(status));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.Status.EndsWith(status));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.Status.Contains(status) == false);
                case ContainmentOperator.NotEquals:
                    return status == null 
                        ? queryable.Where(v => v.Status != null) 
                        : queryable.Where(v => v.Status != status);
                default:
                    return status == null 
                        ? queryable.Where(v => v.Status == null) 
                        : queryable.Where(v => v.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByStatus(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String status, params System.String[] additionalValues)
        {
            var statusList = new List<System.String> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);
            else
                statusList.Add(null);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByStatus(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("Status", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String itemName)
        {
            // support nulls
            return itemName == null 
                ? queryable.Where(v => v.ItemName == null) 
                : queryable.Where(v => v.ItemName == itemName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String itemName)
        {
            if (itemName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemName", "Parameter 'itemName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ItemName.Contains(itemName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ItemName.StartsWith(itemName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ItemName.EndsWith(itemName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ItemName.Contains(itemName) == false);
                case ContainmentOperator.NotEquals:
                    return itemName == null 
                        ? queryable.Where(v => v.ItemName != null) 
                        : queryable.Where(v => v.ItemName != itemName);
                default:
                    return itemName == null 
                        ? queryable.Where(v => v.ItemName == null) 
                        : queryable.Where(v => v.ItemName == itemName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String itemName, params System.String[] additionalValues)
        {
            var itemNameList = new List<System.String> { itemName };

            if (additionalValues != null)
                itemNameList.AddRange(additionalValues);
            else
                itemNameList.Add(null);

            if (itemNameList.Count == 1)
                return queryable.ByItemName(itemNameList[0]);

            return queryable.ByItemName(itemNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("ItemName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemImage">ItemImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String itemImage)
        {
            // support nulls
            return itemImage == null 
                ? queryable.Where(v => v.ItemImage == null) 
                : queryable.Where(v => v.ItemImage == itemImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemImage">ItemImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String itemImage)
        {
            if (itemImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemImage", "Parameter 'itemImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ItemImage.Contains(itemImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ItemImage.StartsWith(itemImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ItemImage.EndsWith(itemImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ItemImage.Contains(itemImage) == false);
                case ContainmentOperator.NotEquals:
                    return itemImage == null 
                        ? queryable.Where(v => v.ItemImage != null) 
                        : queryable.Where(v => v.ItemImage != itemImage);
                default:
                    return itemImage == null 
                        ? queryable.Where(v => v.ItemImage == null) 
                        : queryable.Where(v => v.ItemImage == itemImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemImage">ItemImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String itemImage, params System.String[] additionalValues)
        {
            var itemImageList = new List<System.String> { itemImage };

            if (additionalValues != null)
                itemImageList.AddRange(additionalValues);
            else
                itemImageList.Add(null);

            if (itemImageList.Count == 1)
                return queryable.ByItemImage(itemImageList[0]);

            return queryable.ByItemImage(itemImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ItemImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByItemImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("ItemImage", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productName">ProductName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productName)
        {
            // support nulls
            return productName == null 
                ? queryable.Where(v => v.ProductName == null) 
                : queryable.Where(v => v.ProductName == productName);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productName">ProductName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String productName)
        {
            if (productName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productName", "Parameter 'productName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ProductName.Contains(productName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ProductName.StartsWith(productName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ProductName.EndsWith(productName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ProductName.Contains(productName) == false);
                case ContainmentOperator.NotEquals:
                    return productName == null 
                        ? queryable.Where(v => v.ProductName != null) 
                        : queryable.Where(v => v.ProductName != productName);
                default:
                    return productName == null 
                        ? queryable.Where(v => v.ProductName == null) 
                        : queryable.Where(v => v.ProductName == productName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productName">ProductName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productName, params System.String[] additionalValues)
        {
            var productNameList = new List<System.String> { productName };

            if (additionalValues != null)
                productNameList.AddRange(additionalValues);
            else
                productNameList.Add(null);

            if (productNameList.Count == 1)
                return queryable.ByProductName(productNameList[0]);

            return queryable.ByProductName(productNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductName(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("ProductName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productDescription">ProductDescription to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productDescription)
        {
            // support nulls
            return productDescription == null 
                ? queryable.Where(v => v.ProductDescription == null) 
                : queryable.Where(v => v.ProductDescription == productDescription);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productDescription">ProductDescription to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String productDescription)
        {
            if (productDescription == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productDescription", "Parameter 'productDescription' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ProductDescription.Contains(productDescription));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ProductDescription.StartsWith(productDescription));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ProductDescription.EndsWith(productDescription));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ProductDescription.Contains(productDescription) == false);
                case ContainmentOperator.NotEquals:
                    return productDescription == null 
                        ? queryable.Where(v => v.ProductDescription != null) 
                        : queryable.Where(v => v.ProductDescription != productDescription);
                default:
                    return productDescription == null 
                        ? queryable.Where(v => v.ProductDescription == null) 
                        : queryable.Where(v => v.ProductDescription == productDescription);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productDescription">ProductDescription to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productDescription, params System.String[] additionalValues)
        {
            var productDescriptionList = new List<System.String> { productDescription };

            if (additionalValues != null)
                productDescriptionList.AddRange(additionalValues);
            else
                productDescriptionList.Add(null);

            if (productDescriptionList.Count == 1)
                return queryable.ByProductDescription(productDescriptionList[0]);

            return queryable.ByProductDescription(productDescriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductDescription(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("ProductDescription", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productImage">ProductImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productImage)
        {
            // support nulls
            return productImage == null 
                ? queryable.Where(v => v.ProductImage == null) 
                : queryable.Where(v => v.ProductImage == productImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productImage">ProductImage to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, ContainmentOperator containmentOperator, System.String productImage)
        {
            if (productImage == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("productImage", "Parameter 'productImage' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(v => v.ProductImage.Contains(productImage));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(v => v.ProductImage.StartsWith(productImage));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(v => v.ProductImage.EndsWith(productImage));
                case ContainmentOperator.NotContains:
                    return queryable.Where(v => v.ProductImage.Contains(productImage) == false);
                case ContainmentOperator.NotEquals:
                    return productImage == null 
                        ? queryable.Where(v => v.ProductImage != null) 
                        : queryable.Where(v => v.ProductImage != productImage);
                default:
                    return productImage == null 
                        ? queryable.Where(v => v.ProductImage == null) 
                        : queryable.Where(v => v.ProductImage == productImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="productImage">ProductImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, System.String productImage, params System.String[] additionalValues)
        {
            var productImageList = new List<System.String> { productImage };

            if (additionalValues != null)
                productImageList.AddRange(additionalValues);
            else
                productImageList.Add(null);

            if (productImageList.Count == 1)
                return queryable.ByProductImage(productImageList[0]);

            return queryable.ByProductImage(productImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Petshop.Data.Entities.VwInventoryCurrent.ProductImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Petshop.Data.Entities.VwInventoryCurrent> ByProductImage(this IQueryable<Petshop.Data.Entities.VwInventoryCurrent> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Petshop.Data.Entities.VwInventoryCurrent, bool>("ProductImage", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

