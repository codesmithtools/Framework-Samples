#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Sakila.Data
{
    /// <summary>
    /// The query extension class for Actor.
    /// </summary>
    public static partial class ActorExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.Actor GetByKey(this IQueryable<Sakila.Data.Entities.Actor> queryable
            , System.Int16 actorId
            )
        {
            return queryable
                .Where(a => a.ActorId == actorId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.ActorId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="actorId">ActorId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByActorId(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.Int16 actorId)
        {
            return queryable.Where(a => a.ActorId == actorId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.ActorId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="actorId">ActorId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByActorId(this IQueryable<Sakila.Data.Entities.Actor> queryable, ComparisonOperator comparisonOperator, System.Int16 actorId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ActorId > actorId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ActorId >= actorId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ActorId < actorId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ActorId <= actorId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.ActorId != actorId);
                default:
                    return queryable.Where(a => a.ActorId == actorId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.ActorId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="actorId">ActorId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByActorId(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.Int16 actorId, params System.Int16[] additionalValues)
        {
            var actorIdList = new List<System.Int16> { actorId };

            if (additionalValues != null)
                actorIdList.AddRange(additionalValues);

            if (actorIdList.Count == 1)
                return queryable.ByActorId(actorIdList[0]);

            return queryable.ByActorId(actorIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.ActorId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByActorId(this IQueryable<Sakila.Data.Entities.Actor> queryable, IEnumerable<System.Int16> values)
        {
            return queryable.Where(a => values.Contains(a.ActorId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByFirstName(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.String firstName)
        {
            return queryable.Where(a => a.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByFirstName(this IQueryable<Sakila.Data.Entities.Actor> queryable, ContainmentOperator containmentOperator, System.String firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.FirstName != firstName);
                default:
                    return queryable.Where(a => a.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByFirstName(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.String firstName, params System.String[] additionalValues)
        {
            var firstNameList = new List<System.String> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByFirstName(this IQueryable<Sakila.Data.Entities.Actor> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.FirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastName(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.String lastName)
        {
            return queryable.Where(a => a.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastName(this IQueryable<Sakila.Data.Entities.Actor> queryable, ContainmentOperator containmentOperator, System.String lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.LastName != lastName);
                default:
                    return queryable.Where(a => a.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastName(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.String lastName, params System.String[] additionalValues)
        {
            var lastNameList = new List<System.String> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastName(this IQueryable<Sakila.Data.Entities.Actor> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.LastName));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(a => a.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Actor> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(a => a.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Actor> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Actor.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Actor> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Actor> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

