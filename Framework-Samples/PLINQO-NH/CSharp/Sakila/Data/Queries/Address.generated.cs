#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Sakila.Data
{
    /// <summary>
    /// The query extension class for Address.
    /// </summary>
    public static partial class AddressExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.Address GetByKey(this IQueryable<Sakila.Data.Entities.Address> queryable
            , System.Int16 addressId
            )
        {
            return queryable
                .Where(a => a.AddressId == addressId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressId(this IQueryable<Sakila.Data.Entities.Address> queryable, System.Int16 addressId)
        {
            return queryable.Where(a => a.AddressId == addressId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressId(this IQueryable<Sakila.Data.Entities.Address> queryable, ComparisonOperator comparisonOperator, System.Int16 addressId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.AddressId > addressId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.AddressId >= addressId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.AddressId < addressId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.AddressId <= addressId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.AddressId != addressId);
                default:
                    return queryable.Where(a => a.AddressId == addressId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressId(this IQueryable<Sakila.Data.Entities.Address> queryable, System.Int16 addressId, params System.Int16[] additionalValues)
        {
            var addressIdList = new List<System.Int16> { addressId };

            if (additionalValues != null)
                addressIdList.AddRange(additionalValues);

            if (addressIdList.Count == 1)
                return queryable.ByAddressId(addressIdList[0]);

            return queryable.ByAddressId(addressIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressId(this IQueryable<Sakila.Data.Entities.Address> queryable, IEnumerable<System.Int16> values)
        {
            return queryable.Where(a => values.Contains(a.AddressId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressMember">AddressMember to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressMember(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String addressMember)
        {
            return queryable.Where(a => a.AddressMember == addressMember);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressMember">AddressMember to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressMember(this IQueryable<Sakila.Data.Entities.Address> queryable, ContainmentOperator containmentOperator, System.String addressMember)
        {
            if (addressMember == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("addressMember", "Parameter 'addressMember' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AddressMember.Contains(addressMember));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AddressMember.StartsWith(addressMember));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AddressMember.EndsWith(addressMember));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AddressMember.Contains(addressMember) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.AddressMember != addressMember);
                default:
                    return queryable.Where(a => a.AddressMember == addressMember);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressMember">AddressMember to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressMember(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String addressMember, params System.String[] additionalValues)
        {
            var addressMemberList = new List<System.String> { addressMember };

            if (additionalValues != null)
                addressMemberList.AddRange(additionalValues);

            if (addressMemberList.Count == 1)
                return queryable.ByAddressMember(addressMemberList[0]);

            return queryable.ByAddressMember(addressMemberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.AddressMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddressMember(this IQueryable<Sakila.Data.Entities.Address> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.AddressMember));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddress2(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String address2)
        {
            // support nulls
            return address2 == null 
                ? queryable.Where(a => a.Address2 == null) 
                : queryable.Where(a => a.Address2 == address2);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddress2(this IQueryable<Sakila.Data.Entities.Address> queryable, ContainmentOperator containmentOperator, System.String address2)
        {
            if (address2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address2", "Parameter 'address2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Address2.Contains(address2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Address2.StartsWith(address2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Address2.EndsWith(address2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Address2.Contains(address2) == false);
                case ContainmentOperator.NotEquals:
                    return address2 == null 
                        ? queryable.Where(a => a.Address2 != null) 
                        : queryable.Where(a => a.Address2 != address2);
                default:
                    return address2 == null 
                        ? queryable.Where(a => a.Address2 == null) 
                        : queryable.Where(a => a.Address2 == address2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddress2(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String address2, params System.String[] additionalValues)
        {
            var address2List = new List<System.String> { address2 };

            if (additionalValues != null)
                address2List.AddRange(additionalValues);
            else
                address2List.Add(null);

            if (address2List.Count == 1)
                return queryable.ByAddress2(address2List[0]);

            return queryable.ByAddress2(address2List);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByAddress2(this IQueryable<Sakila.Data.Entities.Address> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Address, bool>("Address2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.District"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="district">District to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByDistrict(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String district)
        {
            return queryable.Where(a => a.District == district);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.District"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="district">District to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByDistrict(this IQueryable<Sakila.Data.Entities.Address> queryable, ContainmentOperator containmentOperator, System.String district)
        {
            if (district == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("district", "Parameter 'district' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.District.Contains(district));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.District.StartsWith(district));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.District.EndsWith(district));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.District.Contains(district) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.District != district);
                default:
                    return queryable.Where(a => a.District == district);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.District"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="district">District to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByDistrict(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String district, params System.String[] additionalValues)
        {
            var districtList = new List<System.String> { district };

            if (additionalValues != null)
                districtList.AddRange(additionalValues);

            if (districtList.Count == 1)
                return queryable.ByDistrict(districtList[0]);

            return queryable.ByDistrict(districtList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.District"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByDistrict(this IQueryable<Sakila.Data.Entities.Address> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.District));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.PostalCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postalCode">PostalCode to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPostalCode(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String postalCode)
        {
            // support nulls
            return postalCode == null 
                ? queryable.Where(a => a.PostalCode == null) 
                : queryable.Where(a => a.PostalCode == postalCode);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.PostalCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postalCode">PostalCode to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPostalCode(this IQueryable<Sakila.Data.Entities.Address> queryable, ContainmentOperator containmentOperator, System.String postalCode)
        {
            if (postalCode == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("postalCode", "Parameter 'postalCode' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.PostalCode.Contains(postalCode));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.PostalCode.StartsWith(postalCode));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.PostalCode.EndsWith(postalCode));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.PostalCode.Contains(postalCode) == false);
                case ContainmentOperator.NotEquals:
                    return postalCode == null 
                        ? queryable.Where(a => a.PostalCode != null) 
                        : queryable.Where(a => a.PostalCode != postalCode);
                default:
                    return postalCode == null 
                        ? queryable.Where(a => a.PostalCode == null) 
                        : queryable.Where(a => a.PostalCode == postalCode);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.PostalCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postalCode">PostalCode to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPostalCode(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String postalCode, params System.String[] additionalValues)
        {
            var postalCodeList = new List<System.String> { postalCode };

            if (additionalValues != null)
                postalCodeList.AddRange(additionalValues);
            else
                postalCodeList.Add(null);

            if (postalCodeList.Count == 1)
                return queryable.ByPostalCode(postalCodeList[0]);

            return queryable.ByPostalCode(postalCodeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.PostalCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPostalCode(this IQueryable<Sakila.Data.Entities.Address> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Address, bool>("PostalCode", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPhone(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String phone)
        {
            return queryable.Where(a => a.Phone == phone);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPhone(this IQueryable<Sakila.Data.Entities.Address> queryable, ContainmentOperator containmentOperator, System.String phone)
        {
            if (phone == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("phone", "Parameter 'phone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Phone.Contains(phone));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Phone.StartsWith(phone));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Phone.EndsWith(phone));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Phone.Contains(phone) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Phone != phone);
                default:
                    return queryable.Where(a => a.Phone == phone);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPhone(this IQueryable<Sakila.Data.Entities.Address> queryable, System.String phone, params System.String[] additionalValues)
        {
            var phoneList = new List<System.String> { phone };

            if (additionalValues != null)
                phoneList.AddRange(additionalValues);

            if (phoneList.Count == 1)
                return queryable.ByPhone(phoneList[0]);

            return queryable.ByPhone(phoneList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByPhone(this IQueryable<Sakila.Data.Entities.Address> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.Phone));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Address> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(a => a.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Address> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(a => a.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Address> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Address> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address by City's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByCity(this IQueryable<Sakila.Data.Entities.Address> queryable, Sakila.Data.Entities.City city)
        {
            return queryable.ByCity(ComparisonOperator.Equals, city);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address by City's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="city">City to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByCity(this IQueryable<Sakila.Data.Entities.Address> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.City city)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.City == city);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.City != city);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address by City's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityId">CityId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByCity(this IQueryable<Sakila.Data.Entities.Address> queryable, System.Int16 cityId)
        {
            return queryable.ByCity(ComparisonOperator.Equals, cityId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Address by City's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="cityId">CityId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Address> ByCity(this IQueryable<Sakila.Data.Entities.Address> queryable, ComparisonOperator comparisonOperator, System.Int16 cityId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.City.CityId == cityId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.City.CityId != cityId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

