#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Sakila.Data
{
    /// <summary>
    /// The query extension class for City.
    /// </summary>
    public static partial class CityExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.City GetByKey(this IQueryable<Sakila.Data.Entities.City> queryable
            , System.Int16 cityId
            )
        {
            return queryable
                .Where(c => c.CityId == cityId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityId">CityId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityId(this IQueryable<Sakila.Data.Entities.City> queryable, System.Int16 cityId)
        {
            return queryable.Where(c => c.CityId == cityId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityId">CityId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityId(this IQueryable<Sakila.Data.Entities.City> queryable, ComparisonOperator comparisonOperator, System.Int16 cityId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.CityId > cityId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.CityId >= cityId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.CityId < cityId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.CityId <= cityId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.CityId != cityId);
                default:
                    return queryable.Where(c => c.CityId == cityId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityId">CityId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityId(this IQueryable<Sakila.Data.Entities.City> queryable, System.Int16 cityId, params System.Int16[] additionalValues)
        {
            var cityIdList = new List<System.Int16> { cityId };

            if (additionalValues != null)
                cityIdList.AddRange(additionalValues);

            if (cityIdList.Count == 1)
                return queryable.ByCityId(cityIdList[0]);

            return queryable.ByCityId(cityIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityId(this IQueryable<Sakila.Data.Entities.City> queryable, IEnumerable<System.Int16> values)
        {
            return queryable.Where(c => values.Contains(c.CityId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityMember">CityMember to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityMember(this IQueryable<Sakila.Data.Entities.City> queryable, System.String cityMember)
        {
            return queryable.Where(c => c.CityMember == cityMember);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityMember">CityMember to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityMember(this IQueryable<Sakila.Data.Entities.City> queryable, ContainmentOperator containmentOperator, System.String cityMember)
        {
            if (cityMember == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cityMember", "Parameter 'cityMember' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CityMember.Contains(cityMember));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CityMember.StartsWith(cityMember));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CityMember.EndsWith(cityMember));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CityMember.Contains(cityMember) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.CityMember != cityMember);
                default:
                    return queryable.Where(c => c.CityMember == cityMember);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityMember">CityMember to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityMember(this IQueryable<Sakila.Data.Entities.City> queryable, System.String cityMember, params System.String[] additionalValues)
        {
            var cityMemberList = new List<System.String> { cityMember };

            if (additionalValues != null)
                cityMemberList.AddRange(additionalValues);

            if (cityMemberList.Count == 1)
                return queryable.ByCityMember(cityMemberList[0]);

            return queryable.ByCityMember(cityMemberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.CityMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCityMember(this IQueryable<Sakila.Data.Entities.City> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.CityMember));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByLastUpdate(this IQueryable<Sakila.Data.Entities.City> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(c => c.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByLastUpdate(this IQueryable<Sakila.Data.Entities.City> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(c => c.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByLastUpdate(this IQueryable<Sakila.Data.Entities.City> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByLastUpdate(this IQueryable<Sakila.Data.Entities.City> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(c => values.Contains(c.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City by Country's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCountry(this IQueryable<Sakila.Data.Entities.City> queryable, Sakila.Data.Entities.Country country)
        {
            return queryable.ByCountry(ComparisonOperator.Equals, country);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City by Country's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="country">Country to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCountry(this IQueryable<Sakila.Data.Entities.City> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Country country)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(c => c.Country == country);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Country != country);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City by Country's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryId">CountryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCountry(this IQueryable<Sakila.Data.Entities.City> queryable, System.Int16 countryId)
        {
            return queryable.ByCountry(ComparisonOperator.Equals, countryId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.City by Country's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="countryId">CountryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.City> ByCountry(this IQueryable<Sakila.Data.Entities.City> queryable, ComparisonOperator comparisonOperator, System.Int16 countryId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(c => c.Country.CountryId == countryId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Country.CountryId != countryId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

