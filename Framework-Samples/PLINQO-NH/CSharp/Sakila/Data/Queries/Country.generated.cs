#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using Sakila.Data;

namespace Sakila.Data.Entities
{
    /// <summary>
    /// The query extension class for Country.
    /// </summary>
    public static partial class CountryExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.Country GetByKey(this IQueryable<Sakila.Data.Entities.Country> queryable
            , System.Int16 countryId
            )
        {
            return queryable
                .Where(c => c.CountryId == countryId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryId">CountryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryId(this IQueryable<Sakila.Data.Entities.Country> queryable, System.Int16 countryId)
        {
            return queryable.Where(c => c.CountryId == countryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryId">CountryId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryId(this IQueryable<Sakila.Data.Entities.Country> queryable, ComparisonOperator comparisonOperator, System.Int16 countryId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.CountryId > countryId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.CountryId >= countryId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.CountryId < countryId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.CountryId <= countryId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.CountryId != countryId);
                default:
                    return queryable.Where(c => c.CountryId == countryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryId">CountryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryId(this IQueryable<Sakila.Data.Entities.Country> queryable, System.Int16 countryId, params System.Int16[] additionalValues)
        {
            var countryIdList = new List<System.Int16> { countryId };

            if (additionalValues != null)
                countryIdList.AddRange(additionalValues);

            if (countryIdList.Count == 1)
                return queryable.ByCountryId(countryIdList[0]);

            return queryable.ByCountryId(countryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryId(this IQueryable<Sakila.Data.Entities.Country> queryable, IEnumerable<System.Int16> values)
        {
            return queryable.Where(c => values.Contains(c.CountryId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryMember">CountryMember to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryMember(this IQueryable<Sakila.Data.Entities.Country> queryable, System.String countryMember)
        {
            return queryable.Where(c => c.CountryMember == countryMember);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryMember">CountryMember to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryMember(this IQueryable<Sakila.Data.Entities.Country> queryable, ContainmentOperator containmentOperator, System.String countryMember)
        {
            if (countryMember == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("countryMember", "Parameter 'countryMember' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CountryMember.Contains(countryMember));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CountryMember.StartsWith(countryMember));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CountryMember.EndsWith(countryMember));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CountryMember.Contains(countryMember) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.CountryMember != countryMember);
                default:
                    return queryable.Where(c => c.CountryMember == countryMember);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryMember">CountryMember to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryMember(this IQueryable<Sakila.Data.Entities.Country> queryable, System.String countryMember, params System.String[] additionalValues)
        {
            var countryMemberList = new List<System.String> { countryMember };

            if (additionalValues != null)
                countryMemberList.AddRange(additionalValues);

            if (countryMemberList.Count == 1)
                return queryable.ByCountryMember(countryMemberList[0]);

            return queryable.ByCountryMember(countryMemberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.CountryMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByCountryMember(this IQueryable<Sakila.Data.Entities.Country> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.CountryMember));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Country> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(c => c.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Country> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(c => c.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Country> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Country.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Country> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Country> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(c => values.Contains(c.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

