#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Sakila.Data
{
    /// <summary>
    /// The query extension class for Film.
    /// </summary>
    public static partial class FilmExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.Film GetByKey(this IQueryable<Sakila.Data.Entities.Film> queryable
            , System.Int16 filmId
            )
        {
            return queryable
                .Where(f => f.FilmId == filmId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="filmId">FilmId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByFilmId(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Int16 filmId)
        {
            return queryable.Where(f => f.FilmId == filmId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="filmId">FilmId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByFilmId(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Int16 filmId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FilmId > filmId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FilmId >= filmId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FilmId < filmId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FilmId <= filmId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FilmId != filmId);
                default:
                    return queryable.Where(f => f.FilmId == filmId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="filmId">FilmId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByFilmId(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Int16 filmId, params System.Int16[] additionalValues)
        {
            var filmIdList = new List<System.Int16> { filmId };

            if (additionalValues != null)
                filmIdList.AddRange(additionalValues);

            if (filmIdList.Count == 1)
                return queryable.ByFilmId(filmIdList[0]);

            return queryable.ByFilmId(filmIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByFilmId(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.Int16> values)
        {
            return queryable.Where(f => values.Contains(f.FilmId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByTitle(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String title)
        {
            return queryable.Where(f => f.Title == title);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByTitle(this IQueryable<Sakila.Data.Entities.Film> queryable, ContainmentOperator containmentOperator, System.String title)
        {
            if (title == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("title", "Parameter 'title' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Title.Contains(title));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Title.StartsWith(title));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Title.EndsWith(title));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Title.Contains(title) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Title != title);
                default:
                    return queryable.Where(f => f.Title == title);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByTitle(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String title, params System.String[] additionalValues)
        {
            var titleList = new List<System.String> { title };

            if (additionalValues != null)
                titleList.AddRange(additionalValues);

            if (titleList.Count == 1)
                return queryable.ByTitle(titleList[0]);

            return queryable.ByTitle(titleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByTitle(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Title));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByDescription(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String description)
        {
            // support nulls
            return description == null 
                ? queryable.Where(f => f.Description == null) 
                : queryable.Where(f => f.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByDescription(this IQueryable<Sakila.Data.Entities.Film> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return description == null 
                        ? queryable.Where(f => f.Description != null) 
                        : queryable.Where(f => f.Description != description);
                default:
                    return description == null 
                        ? queryable.Where(f => f.Description == null) 
                        : queryable.Where(f => f.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByDescription(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);
            else
                descriptionList.Add(null);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByDescription(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Film, bool>("Description", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReleaseYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="releaseYear">ReleaseYear to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReleaseYear(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Int32? releaseYear)
        {
            // support nulls
            return releaseYear == null 
                ? queryable.Where(f => f.ReleaseYear == null) 
                : queryable.Where(f => f.ReleaseYear == releaseYear);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReleaseYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="releaseYear">ReleaseYear to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReleaseYear(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Int32? releaseYear)
        {
            if (releaseYear == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("releaseYear", "Parameter 'releaseYear' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.ReleaseYear > releaseYear);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.ReleaseYear >= releaseYear);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.ReleaseYear < releaseYear);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.ReleaseYear <= releaseYear);
                case ComparisonOperator.NotEquals:
                    return releaseYear == null 
                        ? queryable.Where(f => f.ReleaseYear != null) 
                        : queryable.Where(f => f.ReleaseYear != releaseYear);
                default:
                    return releaseYear == null 
                        ? queryable.Where(f => f.ReleaseYear == null) 
                        : queryable.Where(f => f.ReleaseYear == releaseYear);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReleaseYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="releaseYear">ReleaseYear to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReleaseYear(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Int32? releaseYear, params System.Int32?[] additionalValues)
        {
            var releaseYearList = new List<System.Int32?> { releaseYear };

            if (additionalValues != null)
                releaseYearList.AddRange(additionalValues);
            else
                releaseYearList.Add(null);

            if (releaseYearList.Count == 1)
                return queryable.ByReleaseYear(releaseYearList[0]);

            return queryable.ByReleaseYear(releaseYearList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReleaseYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReleaseYear(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Film, bool>("ReleaseYear", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalDuration">RentalDuration to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalDuration(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Byte rentalDuration)
        {
            return queryable.Where(f => f.RentalDuration == rentalDuration);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalDuration">RentalDuration to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalDuration(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Byte rentalDuration)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.RentalDuration > rentalDuration);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.RentalDuration >= rentalDuration);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.RentalDuration < rentalDuration);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.RentalDuration <= rentalDuration);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.RentalDuration != rentalDuration);
                default:
                    return queryable.Where(f => f.RentalDuration == rentalDuration);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalDuration">RentalDuration to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalDuration(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Byte rentalDuration, params System.Byte[] additionalValues)
        {
            var rentalDurationList = new List<System.Byte> { rentalDuration };

            if (additionalValues != null)
                rentalDurationList.AddRange(additionalValues);

            if (rentalDurationList.Count == 1)
                return queryable.ByRentalDuration(rentalDurationList[0]);

            return queryable.ByRentalDuration(rentalDurationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalDuration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalDuration(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.Byte> values)
        {
            return queryable.Where(f => values.Contains(f.RentalDuration));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalRate">RentalRate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalRate(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Decimal rentalRate)
        {
            return queryable.Where(f => f.RentalRate == rentalRate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalRate">RentalRate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalRate(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Decimal rentalRate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.RentalRate > rentalRate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.RentalRate >= rentalRate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.RentalRate < rentalRate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.RentalRate <= rentalRate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.RentalRate != rentalRate);
                default:
                    return queryable.Where(f => f.RentalRate == rentalRate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalRate">RentalRate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalRate(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Decimal rentalRate, params System.Decimal[] additionalValues)
        {
            var rentalRateList = new List<System.Decimal> { rentalRate };

            if (additionalValues != null)
                rentalRateList.AddRange(additionalValues);

            if (rentalRateList.Count == 1)
                return queryable.ByRentalRate(rentalRateList[0]);

            return queryable.ByRentalRate(rentalRateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.RentalRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRentalRate(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(f => values.Contains(f.RentalRate));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Length"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="length">Length to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLength(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Int16? length)
        {
            // support nulls
            return length == null 
                ? queryable.Where(f => f.Length == null) 
                : queryable.Where(f => f.Length == length);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Length"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="length">Length to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLength(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Int16? length)
        {
            if (length == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("length", "Parameter 'length' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Length > length);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Length >= length);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Length < length);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Length <= length);
                case ComparisonOperator.NotEquals:
                    return length == null 
                        ? queryable.Where(f => f.Length != null) 
                        : queryable.Where(f => f.Length != length);
                default:
                    return length == null 
                        ? queryable.Where(f => f.Length == null) 
                        : queryable.Where(f => f.Length == length);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Length"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="length">Length to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLength(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Int16? length, params System.Int16?[] additionalValues)
        {
            var lengthList = new List<System.Int16?> { length };

            if (additionalValues != null)
                lengthList.AddRange(additionalValues);
            else
                lengthList.Add(null);

            if (lengthList.Count == 1)
                return queryable.ByLength(lengthList[0]);

            return queryable.ByLength(lengthList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Length"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLength(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.Int16?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Film, bool>("Length", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReplacementCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="replacementCost">ReplacementCost to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReplacementCost(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Decimal replacementCost)
        {
            return queryable.Where(f => f.ReplacementCost == replacementCost);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReplacementCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="replacementCost">ReplacementCost to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReplacementCost(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Decimal replacementCost)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.ReplacementCost > replacementCost);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.ReplacementCost >= replacementCost);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.ReplacementCost < replacementCost);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.ReplacementCost <= replacementCost);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.ReplacementCost != replacementCost);
                default:
                    return queryable.Where(f => f.ReplacementCost == replacementCost);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReplacementCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="replacementCost">ReplacementCost to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReplacementCost(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Decimal replacementCost, params System.Decimal[] additionalValues)
        {
            var replacementCostList = new List<System.Decimal> { replacementCost };

            if (additionalValues != null)
                replacementCostList.AddRange(additionalValues);

            if (replacementCostList.Count == 1)
                return queryable.ByReplacementCost(replacementCostList[0]);

            return queryable.ByReplacementCost(replacementCostList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.ReplacementCost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByReplacementCost(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(f => values.Contains(f.ReplacementCost));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Rating"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rating">Rating to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRating(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String rating)
        {
            // support nulls
            return rating == null 
                ? queryable.Where(f => f.Rating == null) 
                : queryable.Where(f => f.Rating == rating);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Rating"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rating">Rating to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRating(this IQueryable<Sakila.Data.Entities.Film> queryable, ContainmentOperator containmentOperator, System.String rating)
        {
            if (rating == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("rating", "Parameter 'rating' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Rating.Contains(rating));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Rating.StartsWith(rating));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Rating.EndsWith(rating));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Rating.Contains(rating) == false);
                case ContainmentOperator.NotEquals:
                    return rating == null 
                        ? queryable.Where(f => f.Rating != null) 
                        : queryable.Where(f => f.Rating != rating);
                default:
                    return rating == null 
                        ? queryable.Where(f => f.Rating == null) 
                        : queryable.Where(f => f.Rating == rating);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Rating"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rating">Rating to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRating(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String rating, params System.String[] additionalValues)
        {
            var ratingList = new List<System.String> { rating };

            if (additionalValues != null)
                ratingList.AddRange(additionalValues);
            else
                ratingList.Add(null);

            if (ratingList.Count == 1)
                return queryable.ByRating(ratingList[0]);

            return queryable.ByRating(ratingList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.Rating"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByRating(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Film, bool>("Rating", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.SpecialFeatures"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="specialFeatures">SpecialFeatures to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> BySpecialFeatures(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String specialFeatures)
        {
            // support nulls
            return specialFeatures == null 
                ? queryable.Where(f => f.SpecialFeatures == null) 
                : queryable.Where(f => f.SpecialFeatures == specialFeatures);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.SpecialFeatures"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="specialFeatures">SpecialFeatures to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> BySpecialFeatures(this IQueryable<Sakila.Data.Entities.Film> queryable, ContainmentOperator containmentOperator, System.String specialFeatures)
        {
            if (specialFeatures == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("specialFeatures", "Parameter 'specialFeatures' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.SpecialFeatures.Contains(specialFeatures));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.SpecialFeatures.StartsWith(specialFeatures));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.SpecialFeatures.EndsWith(specialFeatures));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.SpecialFeatures.Contains(specialFeatures) == false);
                case ContainmentOperator.NotEquals:
                    return specialFeatures == null 
                        ? queryable.Where(f => f.SpecialFeatures != null) 
                        : queryable.Where(f => f.SpecialFeatures != specialFeatures);
                default:
                    return specialFeatures == null 
                        ? queryable.Where(f => f.SpecialFeatures == null) 
                        : queryable.Where(f => f.SpecialFeatures == specialFeatures);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.SpecialFeatures"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="specialFeatures">SpecialFeatures to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> BySpecialFeatures(this IQueryable<Sakila.Data.Entities.Film> queryable, System.String specialFeatures, params System.String[] additionalValues)
        {
            var specialFeaturesList = new List<System.String> { specialFeatures };

            if (additionalValues != null)
                specialFeaturesList.AddRange(additionalValues);
            else
                specialFeaturesList.Add(null);

            if (specialFeaturesList.Count == 1)
                return queryable.BySpecialFeatures(specialFeaturesList[0]);

            return queryable.BySpecialFeatures(specialFeaturesList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.SpecialFeatures"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> BySpecialFeatures(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Film, bool>("SpecialFeatures", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Film> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(f => f.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(f => f.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Film> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Film> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(f => values.Contains(f.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language1's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="language1">Language1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage1(this IQueryable<Sakila.Data.Entities.Film> queryable, Sakila.Data.Entities.Language language1)
        {
            return queryable.ByLanguage1(ComparisonOperator.Equals, language1);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language1's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="language1">Language1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage1(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Language language1)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(f => f.Language1 == language1);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Language1 != language1);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="languageId">LanguageId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage1(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Byte languageId)
        {
            return queryable.ByLanguage1(ComparisonOperator.Equals, languageId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="languageId">LanguageId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage1(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Byte languageId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(f => f.Language1.LanguageId == languageId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Language1.LanguageId != languageId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language2's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="language2">Language2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage2(this IQueryable<Sakila.Data.Entities.Film> queryable, Sakila.Data.Entities.Language language2)
        {
            return queryable.ByLanguage2(ComparisonOperator.Equals, language2);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language2's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="language2">Language2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage2(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Language language2)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(f => f.Language2 == language2);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Language2 != language2);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="languageId">LanguageId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage2(this IQueryable<Sakila.Data.Entities.Film> queryable, System.Byte languageId)
        {
            return queryable.ByLanguage2(ComparisonOperator.Equals, languageId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Film by Language's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="languageId">LanguageId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Film> ByLanguage2(this IQueryable<Sakila.Data.Entities.Film> queryable, ComparisonOperator comparisonOperator, System.Byte languageId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(f => f.Language2.LanguageId == languageId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Language2.LanguageId != languageId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

