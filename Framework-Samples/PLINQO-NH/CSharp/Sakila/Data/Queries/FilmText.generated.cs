#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using Sakila.Data;

namespace Sakila.Data.Entities
{
    /// <summary>
    /// The query extension class for FilmText.
    /// </summary>
    public static partial class FilmTextExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.FilmText GetByKey(this IQueryable<Sakila.Data.Entities.FilmText> queryable
            , System.Int16 filmId
            )
        {
            return queryable
                .Where(f => f.FilmId == filmId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="filmId">FilmId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByFilmId(this IQueryable<Sakila.Data.Entities.FilmText> queryable, System.Int16 filmId)
        {
            return queryable.Where(f => f.FilmId == filmId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="filmId">FilmId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByFilmId(this IQueryable<Sakila.Data.Entities.FilmText> queryable, ComparisonOperator comparisonOperator, System.Int16 filmId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FilmId > filmId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FilmId >= filmId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FilmId < filmId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FilmId <= filmId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FilmId != filmId);
                default:
                    return queryable.Where(f => f.FilmId == filmId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="filmId">FilmId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByFilmId(this IQueryable<Sakila.Data.Entities.FilmText> queryable, System.Int16 filmId, params System.Int16[] additionalValues)
        {
            var filmIdList = new List<System.Int16> { filmId };

            if (additionalValues != null)
                filmIdList.AddRange(additionalValues);

            if (filmIdList.Count == 1)
                return queryable.ByFilmId(filmIdList[0]);

            return queryable.ByFilmId(filmIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.FilmId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByFilmId(this IQueryable<Sakila.Data.Entities.FilmText> queryable, IEnumerable<System.Int16> values)
        {
            return queryable.Where(f => values.Contains(f.FilmId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByTitle(this IQueryable<Sakila.Data.Entities.FilmText> queryable, System.String title)
        {
            return queryable.Where(f => f.Title == title);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByTitle(this IQueryable<Sakila.Data.Entities.FilmText> queryable, ContainmentOperator containmentOperator, System.String title)
        {
            if (title == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("title", "Parameter 'title' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Title.Contains(title));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Title.StartsWith(title));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Title.EndsWith(title));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Title.Contains(title) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Title != title);
                default:
                    return queryable.Where(f => f.Title == title);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByTitle(this IQueryable<Sakila.Data.Entities.FilmText> queryable, System.String title, params System.String[] additionalValues)
        {
            var titleList = new List<System.String> { title };

            if (additionalValues != null)
                titleList.AddRange(additionalValues);

            if (titleList.Count == 1)
                return queryable.ByTitle(titleList[0]);

            return queryable.ByTitle(titleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByTitle(this IQueryable<Sakila.Data.Entities.FilmText> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Title));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByDescription(this IQueryable<Sakila.Data.Entities.FilmText> queryable, System.String description)
        {
            // support nulls
            return description == null 
                ? queryable.Where(f => f.Description == null) 
                : queryable.Where(f => f.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByDescription(this IQueryable<Sakila.Data.Entities.FilmText> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return description == null 
                        ? queryable.Where(f => f.Description != null) 
                        : queryable.Where(f => f.Description != description);
                default:
                    return description == null 
                        ? queryable.Where(f => f.Description == null) 
                        : queryable.Where(f => f.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByDescription(this IQueryable<Sakila.Data.Entities.FilmText> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);
            else
                descriptionList.Add(null);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.FilmText.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.FilmText> ByDescription(this IQueryable<Sakila.Data.Entities.FilmText> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.FilmText, bool>("Description", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

