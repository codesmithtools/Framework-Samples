#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using Sakila.Data;

namespace Sakila.Data.Entities
{
    /// <summary>
    /// The query extension class for Rental.
    /// </summary>
    public static partial class RentalExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.Rental GetByKey(this IQueryable<Sakila.Data.Entities.Rental> queryable
            , System.Int32 rentalId
            )
        {
            return queryable
                .Where(r => r.RentalId == rentalId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalId">RentalId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalId(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.Int32 rentalId)
        {
            return queryable.Where(r => r.RentalId == rentalId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalId">RentalId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalId(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, System.Int32 rentalId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(r => r.RentalId > rentalId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(r => r.RentalId >= rentalId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(r => r.RentalId < rentalId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(r => r.RentalId <= rentalId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.RentalId != rentalId);
                default:
                    return queryable.Where(r => r.RentalId == rentalId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalId">RentalId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalId(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.Int32 rentalId, params System.Int32[] additionalValues)
        {
            var rentalIdList = new List<System.Int32> { rentalId };

            if (additionalValues != null)
                rentalIdList.AddRange(additionalValues);

            if (rentalIdList.Count == 1)
                return queryable.ByRentalId(rentalIdList[0]);

            return queryable.ByRentalId(rentalIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalId(this IQueryable<Sakila.Data.Entities.Rental> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(r => values.Contains(r.RentalId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalDate">RentalDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.DateTime rentalDate)
        {
            return queryable.Where(r => r.RentalDate == rentalDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalDate">RentalDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, System.DateTime rentalDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(r => r.RentalDate > rentalDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(r => r.RentalDate >= rentalDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(r => r.RentalDate < rentalDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(r => r.RentalDate <= rentalDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.RentalDate != rentalDate);
                default:
                    return queryable.Where(r => r.RentalDate == rentalDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="rentalDate">RentalDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.DateTime rentalDate, params System.DateTime[] additionalValues)
        {
            var rentalDateList = new List<System.DateTime> { rentalDate };

            if (additionalValues != null)
                rentalDateList.AddRange(additionalValues);

            if (rentalDateList.Count == 1)
                return queryable.ByRentalDate(rentalDateList[0]);

            return queryable.ByRentalDate(rentalDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.RentalDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByRentalDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(r => values.Contains(r.RentalDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.ReturnDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="returnDate">ReturnDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByReturnDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.DateTime? returnDate)
        {
            // support nulls
            return returnDate == null 
                ? queryable.Where(r => r.ReturnDate == null) 
                : queryable.Where(r => r.ReturnDate == returnDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.ReturnDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="returnDate">ReturnDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByReturnDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, System.DateTime? returnDate)
        {
            if (returnDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("returnDate", "Parameter 'returnDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(r => r.ReturnDate > returnDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(r => r.ReturnDate >= returnDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(r => r.ReturnDate < returnDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(r => r.ReturnDate <= returnDate);
                case ComparisonOperator.NotEquals:
                    return returnDate == null 
                        ? queryable.Where(r => r.ReturnDate != null) 
                        : queryable.Where(r => r.ReturnDate != returnDate);
                default:
                    return returnDate == null 
                        ? queryable.Where(r => r.ReturnDate == null) 
                        : queryable.Where(r => r.ReturnDate == returnDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.ReturnDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="returnDate">ReturnDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByReturnDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.DateTime? returnDate, params System.DateTime?[] additionalValues)
        {
            var returnDateList = new List<System.DateTime?> { returnDate };

            if (additionalValues != null)
                returnDateList.AddRange(additionalValues);
            else
                returnDateList.Add(null);

            if (returnDateList.Count == 1)
                return queryable.ByReturnDate(returnDateList[0]);

            return queryable.ByReturnDate(returnDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.ReturnDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByReturnDate(this IQueryable<Sakila.Data.Entities.Rental> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Rental, bool>("ReturnDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(r => r.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(r => r.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(r => r.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(r => r.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(r => r.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(r => r.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Rental> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(r => values.Contains(r.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Customer's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="customer">Customer to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByCustomer(this IQueryable<Sakila.Data.Entities.Rental> queryable, Sakila.Data.Entities.Customer customer)
        {
            return queryable.ByCustomer(ComparisonOperator.Equals, customer);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Customer's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="customer">Customer to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByCustomer(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Customer customer)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(r => r.Customer == customer);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.Customer != customer);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Customer's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="customerId">CustomerId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByCustomer(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.Int16 customerId)
        {
            return queryable.ByCustomer(ComparisonOperator.Equals, customerId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Customer's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="customerId">CustomerId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByCustomer(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, System.Int16 customerId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(r => r.Customer.CustomerId == customerId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.Customer.CustomerId != customerId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Inventory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inventory">Inventory to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByInventory(this IQueryable<Sakila.Data.Entities.Rental> queryable, Sakila.Data.Entities.Inventory inventory)
        {
            return queryable.ByInventory(ComparisonOperator.Equals, inventory);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Inventory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="inventory">Inventory to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByInventory(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Inventory inventory)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(r => r.Inventory == inventory);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.Inventory != inventory);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Inventory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="inventoryId">InventoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByInventory(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.Int32 inventoryId)
        {
            return queryable.ByInventory(ComparisonOperator.Equals, inventoryId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Inventory's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="inventoryId">InventoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByInventory(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, System.Int32 inventoryId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(r => r.Inventory.InventoryId == inventoryId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.Inventory.InventoryId != inventoryId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Staff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="staff">Staff to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByStaff(this IQueryable<Sakila.Data.Entities.Rental> queryable, Sakila.Data.Entities.Staff staff)
        {
            return queryable.ByStaff(ComparisonOperator.Equals, staff);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Staff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="staff">Staff to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByStaff(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Staff staff)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(r => r.Staff == staff);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.Staff != staff);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Staff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="staffId">StaffId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByStaff(this IQueryable<Sakila.Data.Entities.Rental> queryable, System.Byte staffId)
        {
            return queryable.ByStaff(ComparisonOperator.Equals, staffId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Rental by Staff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="staffId">StaffId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Rental> ByStaff(this IQueryable<Sakila.Data.Entities.Rental> queryable, ComparisonOperator comparisonOperator, System.Byte staffId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(r => r.Staff.StaffId == staffId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.Staff.StaffId != staffId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

