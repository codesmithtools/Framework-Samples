#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Sakila.Data
{
    /// <summary>
    /// The query extension class for Staff.
    /// </summary>
    public static partial class StaffExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.Staff GetByKey(this IQueryable<Sakila.Data.Entities.Staff> queryable
            , System.Byte staffId
            )
        {
            return queryable
                .Where(s => s.StaffId == staffId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.StaffId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="staffId">StaffId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStaffId(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.Byte staffId)
        {
            return queryable.Where(s => s.StaffId == staffId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.StaffId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="staffId">StaffId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStaffId(this IQueryable<Sakila.Data.Entities.Staff> queryable, ComparisonOperator comparisonOperator, System.Byte staffId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.StaffId > staffId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.StaffId >= staffId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.StaffId < staffId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.StaffId <= staffId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.StaffId != staffId);
                default:
                    return queryable.Where(s => s.StaffId == staffId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.StaffId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="staffId">StaffId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStaffId(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.Byte staffId, params System.Byte[] additionalValues)
        {
            var staffIdList = new List<System.Byte> { staffId };

            if (additionalValues != null)
                staffIdList.AddRange(additionalValues);

            if (staffIdList.Count == 1)
                return queryable.ByStaffId(staffIdList[0]);

            return queryable.ByStaffId(staffIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.StaffId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStaffId(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.Byte> values)
        {
            return queryable.Where(s => values.Contains(s.StaffId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByFirstName(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String firstName)
        {
            return queryable.Where(s => s.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByFirstName(this IQueryable<Sakila.Data.Entities.Staff> queryable, ContainmentOperator containmentOperator, System.String firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.FirstName != firstName);
                default:
                    return queryable.Where(s => s.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByFirstName(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String firstName, params System.String[] additionalValues)
        {
            var firstNameList = new List<System.String> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByFirstName(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.FirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastName(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String lastName)
        {
            return queryable.Where(s => s.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastName(this IQueryable<Sakila.Data.Entities.Staff> queryable, ContainmentOperator containmentOperator, System.String lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.LastName != lastName);
                default:
                    return queryable.Where(s => s.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastName(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String lastName, params System.String[] additionalValues)
        {
            var lastNameList = new List<System.String> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastName(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.LastName));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByEmail(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(s => s.Email == null) 
                : queryable.Where(s => s.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByEmail(this IQueryable<Sakila.Data.Entities.Staff> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(s => s.Email != null) 
                        : queryable.Where(s => s.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(s => s.Email == null) 
                        : queryable.Where(s => s.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByEmail(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByEmail(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Staff, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Active"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="active">Active to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByActive(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String active)
        {
            return queryable.Where(s => s.Active == active);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Active"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="active">Active to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByActive(this IQueryable<Sakila.Data.Entities.Staff> queryable, ContainmentOperator containmentOperator, System.String active)
        {
            if (active == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("active", "Parameter 'active' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Active.Contains(active));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Active.StartsWith(active));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Active.EndsWith(active));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Active.Contains(active) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Active != active);
                default:
                    return queryable.Where(s => s.Active == active);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Active"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="active">Active to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByActive(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String active, params System.String[] additionalValues)
        {
            var activeList = new List<System.String> { active };

            if (additionalValues != null)
                activeList.AddRange(additionalValues);

            if (activeList.Count == 1)
                return queryable.ByActive(activeList[0]);

            return queryable.ByActive(activeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Active"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByActive(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Active));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByUsername(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String username)
        {
            return queryable.Where(s => s.Username == username);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByUsername(this IQueryable<Sakila.Data.Entities.Staff> queryable, ContainmentOperator containmentOperator, System.String username)
        {
            if (username == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("username", "Parameter 'username' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Username.Contains(username));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Username.StartsWith(username));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Username.EndsWith(username));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Username.Contains(username) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Username != username);
                default:
                    return queryable.Where(s => s.Username == username);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByUsername(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String username, params System.String[] additionalValues)
        {
            var usernameList = new List<System.String> { username };

            if (additionalValues != null)
                usernameList.AddRange(additionalValues);

            if (usernameList.Count == 1)
                return queryable.ByUsername(usernameList[0]);

            return queryable.ByUsername(usernameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByUsername(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Username));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByPassword(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String password)
        {
            // support nulls
            return password == null 
                ? queryable.Where(s => s.Password == null) 
                : queryable.Where(s => s.Password == password);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByPassword(this IQueryable<Sakila.Data.Entities.Staff> queryable, ContainmentOperator containmentOperator, System.String password)
        {
            if (password == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("password", "Parameter 'password' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Password.Contains(password));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Password.StartsWith(password));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Password.EndsWith(password));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Password.Contains(password) == false);
                case ContainmentOperator.NotEquals:
                    return password == null 
                        ? queryable.Where(s => s.Password != null) 
                        : queryable.Where(s => s.Password != password);
                default:
                    return password == null 
                        ? queryable.Where(s => s.Password == null) 
                        : queryable.Where(s => s.Password == password);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByPassword(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.String password, params System.String[] additionalValues)
        {
            var passwordList = new List<System.String> { password };

            if (additionalValues != null)
                passwordList.AddRange(additionalValues);
            else
                passwordList.Add(null);

            if (passwordList.Count == 1)
                return queryable.ByPassword(passwordList[0]);

            return queryable.ByPassword(passwordList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByPassword(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Sakila.Data.Entities.Staff, bool>("Password", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(s => s.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Staff> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(s => s.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Staff> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(s => values.Contains(s.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByAddress(this IQueryable<Sakila.Data.Entities.Staff> queryable, Sakila.Data.Entities.Address address)
        {
            return queryable.ByAddress(ComparisonOperator.Equals, address);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByAddress(this IQueryable<Sakila.Data.Entities.Staff> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Address address)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.Address == address);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Address != address);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByAddress(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.Int16 addressId)
        {
            return queryable.ByAddress(ComparisonOperator.Equals, addressId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByAddress(this IQueryable<Sakila.Data.Entities.Staff> queryable, ComparisonOperator comparisonOperator, System.Int16 addressId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.Address.AddressId == addressId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Address.AddressId != addressId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Store's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="store">Store to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStore(this IQueryable<Sakila.Data.Entities.Staff> queryable, Sakila.Data.Entities.Store store)
        {
            return queryable.ByStore(ComparisonOperator.Equals, store);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Store's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="store">Store to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStore(this IQueryable<Sakila.Data.Entities.Staff> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Store store)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.Store == store);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Store != store);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Store's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="storeId">StoreId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStore(this IQueryable<Sakila.Data.Entities.Staff> queryable, System.Byte storeId)
        {
            return queryable.ByStore(ComparisonOperator.Equals, storeId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Staff by Store's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="storeId">StoreId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Staff> ByStore(this IQueryable<Sakila.Data.Entities.Staff> queryable, ComparisonOperator comparisonOperator, System.Byte storeId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.Store.StoreId == storeId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Store.StoreId != storeId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

