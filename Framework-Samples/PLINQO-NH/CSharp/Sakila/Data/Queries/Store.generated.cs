#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Sakila.Data
{
    /// <summary>
    /// The query extension class for Store.
    /// </summary>
    public static partial class StoreExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Sakila.Data.Entities.Store GetByKey(this IQueryable<Sakila.Data.Entities.Store> queryable
            , System.Byte storeId
            )
        {
            return queryable
                .Where(s => s.StoreId == storeId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.StoreId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="storeId">StoreId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByStoreId(this IQueryable<Sakila.Data.Entities.Store> queryable, System.Byte storeId)
        {
            return queryable.Where(s => s.StoreId == storeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.StoreId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="storeId">StoreId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByStoreId(this IQueryable<Sakila.Data.Entities.Store> queryable, ComparisonOperator comparisonOperator, System.Byte storeId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.StoreId > storeId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.StoreId >= storeId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.StoreId < storeId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.StoreId <= storeId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.StoreId != storeId);
                default:
                    return queryable.Where(s => s.StoreId == storeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.StoreId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="storeId">StoreId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByStoreId(this IQueryable<Sakila.Data.Entities.Store> queryable, System.Byte storeId, params System.Byte[] additionalValues)
        {
            var storeIdList = new List<System.Byte> { storeId };

            if (additionalValues != null)
                storeIdList.AddRange(additionalValues);

            if (storeIdList.Count == 1)
                return queryable.ByStoreId(storeIdList[0]);

            return queryable.ByStoreId(storeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.StoreId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByStoreId(this IQueryable<Sakila.Data.Entities.Store> queryable, IEnumerable<System.Byte> values)
        {
            return queryable.Where(s => values.Contains(s.StoreId));
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Store> queryable, System.DateTime lastUpdate)
        {
            return queryable.Where(s => s.LastUpdate == lastUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Store> queryable, ComparisonOperator comparisonOperator, System.DateTime lastUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.LastUpdate > lastUpdate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.LastUpdate >= lastUpdate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.LastUpdate < lastUpdate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.LastUpdate <= lastUpdate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.LastUpdate != lastUpdate);
                default:
                    return queryable.Where(s => s.LastUpdate == lastUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastUpdate">LastUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Store> queryable, System.DateTime lastUpdate, params System.DateTime[] additionalValues)
        {
            var lastUpdateList = new List<System.DateTime> { lastUpdate };

            if (additionalValues != null)
                lastUpdateList.AddRange(additionalValues);

            if (lastUpdateList.Count == 1)
                return queryable.ByLastUpdate(lastUpdateList[0]);

            return queryable.ByLastUpdate(lastUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store.LastUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByLastUpdate(this IQueryable<Sakila.Data.Entities.Store> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(s => values.Contains(s.LastUpdate));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByAddress(this IQueryable<Sakila.Data.Entities.Store> queryable, Sakila.Data.Entities.Address address)
        {
            return queryable.ByAddress(ComparisonOperator.Equals, address);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByAddress(this IQueryable<Sakila.Data.Entities.Store> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Address address)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.Address == address);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Address != address);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByAddress(this IQueryable<Sakila.Data.Entities.Store> queryable, System.Int16 addressId)
        {
            return queryable.ByAddress(ComparisonOperator.Equals, addressId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by Address's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByAddress(this IQueryable<Sakila.Data.Entities.Store> queryable, ComparisonOperator comparisonOperator, System.Int16 addressId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.Address.AddressId == addressId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Address.AddressId != addressId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by ManagerStaff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="managerStaff">ManagerStaff to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByManagerStaff(this IQueryable<Sakila.Data.Entities.Store> queryable, Sakila.Data.Entities.Staff managerStaff)
        {
            return queryable.ByManagerStaff(ComparisonOperator.Equals, managerStaff);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by ManagerStaff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="managerStaff">ManagerStaff to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByManagerStaff(this IQueryable<Sakila.Data.Entities.Store> queryable, ComparisonOperator comparisonOperator, Sakila.Data.Entities.Staff managerStaff)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.ManagerStaff == managerStaff);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.ManagerStaff != managerStaff);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by Staff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="staffId">StaffId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByManagerStaff(this IQueryable<Sakila.Data.Entities.Store> queryable, System.Byte staffId)
        {
            return queryable.ByManagerStaff(ComparisonOperator.Equals, staffId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Sakila.Data.Entities.Store by Staff's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="staffId">StaffId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Sakila.Data.Entities.Store> ByManagerStaff(this IQueryable<Sakila.Data.Entities.Store> queryable, ComparisonOperator comparisonOperator, System.Byte staffId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.ManagerStaff.StaffId == staffId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.ManagerStaff.StaffId != staffId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

