#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Tracker.Data
{
    /// <summary>
    /// The query extension class for Audit.
    /// </summary>
    public static partial class AuditExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Tracker.Data.Entities.Audit GetByKey(this IQueryable<Tracker.Data.Entities.Audit> queryable
            , System.Int32 id
            )
        {
            return queryable
                .Where(a => a.Id == id)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ById(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.Int32 id)
        {
            return queryable.Where(a => a.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ById(this IQueryable<Tracker.Data.Entities.Audit> queryable, ComparisonOperator comparisonOperator, System.Int32 id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Id != id);
                default:
                    return queryable.Where(a => a.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ById(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.Int32 id, params System.Int32[] additionalValues)
        {
            var idList = new List<System.Int32> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ById(this IQueryable<Tracker.Data.Entities.Audit> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="date">Date to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.DateTime date)
        {
            return queryable.Where(a => a.Date == date);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="date">Date to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, ComparisonOperator comparisonOperator, System.DateTime date)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Date > date);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Date >= date);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Date < date);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Date <= date);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Date != date);
                default:
                    return queryable.Where(a => a.Date == date);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="date">Date to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.DateTime date, params System.DateTime[] additionalValues)
        {
            var dateList = new List<System.DateTime> { date };

            if (additionalValues != null)
                dateList.AddRange(additionalValues);

            if (dateList.Count == 1)
                return queryable.ByDate(dateList[0]);

            return queryable.ByDate(dateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.Date));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="content">Content to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByContent(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.String content)
        {
            return queryable.Where(a => a.Content == content);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="content">Content to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByContent(this IQueryable<Tracker.Data.Entities.Audit> queryable, ContainmentOperator containmentOperator, System.String content)
        {
            if (content == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("content", "Parameter 'content' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Content.Contains(content));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Content.StartsWith(content));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Content.EndsWith(content));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Content.Contains(content) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Content != content);
                default:
                    return queryable.Where(a => a.Content == content);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="content">Content to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByContent(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.String content, params System.String[] additionalValues)
        {
            var contentList = new List<System.String> { content };

            if (additionalValues != null)
                contentList.AddRange(additionalValues);

            if (contentList.Count == 1)
                return queryable.ByContent(contentList[0]);

            return queryable.ByContent(contentList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByContent(this IQueryable<Tracker.Data.Entities.Audit> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.Content));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUsername(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.String username)
        {
            return queryable.Where(a => a.Username == username);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUsername(this IQueryable<Tracker.Data.Entities.Audit> queryable, ContainmentOperator containmentOperator, System.String username)
        {
            if (username == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("username", "Parameter 'username' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Username.Contains(username));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Username.StartsWith(username));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Username.EndsWith(username));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Username.Contains(username) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Username != username);
                default:
                    return queryable.Where(a => a.Username == username);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUsername(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.String username, params System.String[] additionalValues)
        {
            var usernameList = new List<System.String> { username };

            if (additionalValues != null)
                usernameList.AddRange(additionalValues);

            if (usernameList.Count == 1)
                return queryable.ByUsername(usernameList[0]);

            return queryable.ByUsername(usernameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUsername(this IQueryable<Tracker.Data.Entities.Audit> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.Username));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.DateTime createdDate)
        {
            return queryable.Where(a => a.CreatedDate == createdDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, ComparisonOperator comparisonOperator, System.DateTime createdDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.CreatedDate > createdDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.CreatedDate >= createdDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.CreatedDate < createdDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.CreatedDate <= createdDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.CreatedDate != createdDate);
                default:
                    return queryable.Where(a => a.CreatedDate == createdDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> { createdDate };

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            return queryable.ByCreatedDate(createdDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Audit> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.CreatedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Myxml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="myxml">Myxml to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByMyxml(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.String myxml)
        {
            // support nulls
            return myxml == null 
                ? queryable.Where(a => a.Myxml == null) 
                : queryable.Where(a => a.Myxml == myxml);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Myxml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="myxml">Myxml to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByMyxml(this IQueryable<Tracker.Data.Entities.Audit> queryable, ContainmentOperator containmentOperator, System.String myxml)
        {
            if (myxml == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("myxml", "Parameter 'myxml' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Myxml.Contains(myxml));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Myxml.StartsWith(myxml));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Myxml.EndsWith(myxml));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Myxml.Contains(myxml) == false);
                case ContainmentOperator.NotEquals:
                    return myxml == null 
                        ? queryable.Where(a => a.Myxml != null) 
                        : queryable.Where(a => a.Myxml != myxml);
                default:
                    return myxml == null 
                        ? queryable.Where(a => a.Myxml == null) 
                        : queryable.Where(a => a.Myxml == myxml);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Myxml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="myxml">Myxml to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByMyxml(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.String myxml, params System.String[] additionalValues)
        {
            var myxmlList = new List<System.String> { myxml };

            if (additionalValues != null)
                myxmlList.AddRange(additionalValues);
            else
                myxmlList.Add(null);

            if (myxmlList.Count == 1)
                return queryable.ByMyxml(myxmlList[0]);

            return queryable.ByMyxml(myxmlList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit.Myxml"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByMyxml(this IQueryable<Tracker.Data.Entities.Audit> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Data.Entities.Audit, bool>("Myxml", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by Task's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="task">Task to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByTask(this IQueryable<Tracker.Data.Entities.Audit> queryable, Tracker.Data.Entities.Task task)
        {
            return queryable.ByTask(ComparisonOperator.Equals, task);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by Task's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="task">Task to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByTask(this IQueryable<Tracker.Data.Entities.Audit> queryable, ComparisonOperator comparisonOperator, Tracker.Data.Entities.Task task)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.Task == task);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Task != task);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by Task's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByTask(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.Int32 id)
        {
            return queryable.ByTask(ComparisonOperator.Equals, id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by Task's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByTask(this IQueryable<Tracker.Data.Entities.Audit> queryable, ComparisonOperator comparisonOperator, System.Int32 id)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.Task.Id == id);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Task.Id != id);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by User's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="user">User to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUser(this IQueryable<Tracker.Data.Entities.Audit> queryable, Tracker.Data.Entities.User user)
        {
            return queryable.ByUser(ComparisonOperator.Equals, user);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by User's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="user">User to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUser(this IQueryable<Tracker.Data.Entities.Audit> queryable, ComparisonOperator comparisonOperator, Tracker.Data.Entities.User user)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.User == user);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.User != user);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by User's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUser(this IQueryable<Tracker.Data.Entities.Audit> queryable, System.Int32 id)
        {
            return queryable.ByUser(ComparisonOperator.Equals, id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Audit by User's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Audit> ByUser(this IQueryable<Tracker.Data.Entities.Audit> queryable, ComparisonOperator comparisonOperator, System.Int32 id)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.User.Id == id);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.User.Id != id);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

