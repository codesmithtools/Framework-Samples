#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Tracker.Data
{
    /// <summary>
    /// The query extension class for Self.
    /// </summary>
    public static partial class SelfExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Tracker.Data.Entities.Self GetByKey(this IQueryable<Tracker.Data.Entities.Self> queryable
            , System.Int32 id
            )
        {
            return queryable
                .Where(s => s.Id == id)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ById(this IQueryable<Tracker.Data.Entities.Self> queryable, System.Int32 id)
        {
            return queryable.Where(s => s.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ById(this IQueryable<Tracker.Data.Entities.Self> queryable, ComparisonOperator comparisonOperator, System.Int32 id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Id != id);
                default:
                    return queryable.Where(s => s.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ById(this IQueryable<Tracker.Data.Entities.Self> queryable, System.Int32 id, params System.Int32[] additionalValues)
        {
            var idList = new List<System.Int32> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ById(this IQueryable<Tracker.Data.Entities.Self> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(s => values.Contains(s.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByName(this IQueryable<Tracker.Data.Entities.Self> queryable, System.String name)
        {
            return queryable.Where(s => s.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByName(this IQueryable<Tracker.Data.Entities.Self> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Name != name);
                default:
                    return queryable.Where(s => s.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByName(this IQueryable<Tracker.Data.Entities.Self> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByName(this IQueryable<Tracker.Data.Entities.Self> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Name));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self by MySelf's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mySelf">MySelf to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByMySelf(this IQueryable<Tracker.Data.Entities.Self> queryable, Tracker.Data.Entities.Self mySelf)
        {
            return queryable.ByMySelf(ComparisonOperator.Equals, mySelf);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self by MySelf's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="mySelf">MySelf to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByMySelf(this IQueryable<Tracker.Data.Entities.Self> queryable, ComparisonOperator comparisonOperator, Tracker.Data.Entities.Self mySelf)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.MySelf == mySelf);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.MySelf != mySelf);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self by Self's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByMySelf(this IQueryable<Tracker.Data.Entities.Self> queryable, System.Int32 id)
        {
            return queryable.ByMySelf(ComparisonOperator.Equals, id);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Self by Self's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Self> ByMySelf(this IQueryable<Tracker.Data.Entities.Self> queryable, ComparisonOperator comparisonOperator, System.Int32 id)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(s => s.MySelf.Id == id);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.MySelf.Id != id);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

