#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Plinqo.NHibernate;

namespace Tracker.Data
{
    /// <summary>
    /// The query extension class for Task.
    /// </summary>
    public static partial class TaskExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Tracker.Data.Entities.Task GetByKey(this IQueryable<Tracker.Data.Entities.Task> queryable, System.Int32 id)
        {
            return queryable.FirstOrDefault(t => t.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Summary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="summary">Summary to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> BySummary(this IQueryable<Tracker.Data.Entities.Task> queryable, System.String summary)
        {
            return queryable.Where(t => t.Summary == summary);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Summary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="summary">Summary to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> BySummary(this IQueryable<Tracker.Data.Entities.Task> queryable, ContainmentOperator containmentOperator, System.String summary)
        {
            if (summary == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("summary", "Parameter 'summary' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Summary.Contains(summary));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Summary.StartsWith(summary));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Summary.EndsWith(summary));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Summary.Contains(summary) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(t => t.Summary != summary);
                default:
                    return queryable.Where(t => t.Summary == summary);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Summary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="summary">Summary to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> BySummary(this IQueryable<Tracker.Data.Entities.Task> queryable, System.String summary, params System.String[] additionalValues)
        {
            var summaryList = new List<System.String> { summary };

            if (additionalValues != null)
                summaryList.AddRange(additionalValues);

            if (summaryList.Count == 1)
                return queryable.BySummary(summaryList[0]);

            return queryable.BySummary(summaryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Summary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> BySummary(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(t => values.Contains(t.Summary));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Details"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="details">Details to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDetails(this IQueryable<Tracker.Data.Entities.Task> queryable, System.String details)
        {
            return queryable.Where(t => t.Details == details);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Details"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="details">Details to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDetails(this IQueryable<Tracker.Data.Entities.Task> queryable, ContainmentOperator containmentOperator, System.String details)
        {
            if (details == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("details", "Parameter 'details' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Details.Contains(details));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Details.StartsWith(details));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Details.EndsWith(details));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Details.Contains(details) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(t => t.Details != details);
                default:
                    return queryable.Where(t => t.Details == details);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Details"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="details">Details to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDetails(this IQueryable<Tracker.Data.Entities.Task> queryable, System.String details, params System.String[] additionalValues)
        {
            var detailsList = new List<System.String> { details };

            if (additionalValues != null)
                detailsList.AddRange(additionalValues);

            if (detailsList.Count == 1)
                return queryable.ByDetails(detailsList[0]);

            return queryable.ByDetails(detailsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.Details"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDetails(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(t => values.Contains(t.Details));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByStartDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime startDate)
        {
            return queryable.Where(t => t.StartDate == startDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByStartDate(this IQueryable<Tracker.Data.Entities.Task> queryable, ComparisonOperator comparisonOperator, System.DateTime startDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.StartDate > startDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.StartDate >= startDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.StartDate < startDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.StartDate <= startDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.StartDate != startDate);
                default:
                    return queryable.Where(t => t.StartDate == startDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByStartDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime startDate, params System.DateTime[] additionalValues)
        {
            var startDateList = new List<System.DateTime> { startDate };

            if (additionalValues != null)
                startDateList.AddRange(additionalValues);

            if (startDateList.Count == 1)
                return queryable.ByStartDate(startDateList[0]);

            return queryable.ByStartDate(startDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByStartDate(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(t => values.Contains(t.StartDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.DueDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dueDate">DueDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDueDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime dueDate)
        {
            return queryable.Where(t => t.DueDate == dueDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.DueDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dueDate">DueDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDueDate(this IQueryable<Tracker.Data.Entities.Task> queryable, ComparisonOperator comparisonOperator, System.DateTime dueDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.DueDate > dueDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.DueDate >= dueDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.DueDate < dueDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.DueDate <= dueDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.DueDate != dueDate);
                default:
                    return queryable.Where(t => t.DueDate == dueDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.DueDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dueDate">DueDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDueDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime dueDate, params System.DateTime[] additionalValues)
        {
            var dueDateList = new List<System.DateTime> { dueDate };

            if (additionalValues != null)
                dueDateList.AddRange(additionalValues);

            if (dueDateList.Count == 1)
                return queryable.ByDueDate(dueDateList[0]);

            return queryable.ByDueDate(dueDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.DueDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByDueDate(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(t => values.Contains(t.DueDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CompleteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completeDate">CompleteDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCompleteDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime completeDate)
        {
            return queryable.Where(t => t.CompleteDate == completeDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CompleteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completeDate">CompleteDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCompleteDate(this IQueryable<Tracker.Data.Entities.Task> queryable, ComparisonOperator comparisonOperator, System.DateTime completeDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.CompleteDate > completeDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.CompleteDate >= completeDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.CompleteDate < completeDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.CompleteDate <= completeDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.CompleteDate != completeDate);
                default:
                    return queryable.Where(t => t.CompleteDate == completeDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CompleteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="completeDate">CompleteDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCompleteDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime completeDate, params System.DateTime[] additionalValues)
        {
            var completeDateList = new List<System.DateTime> { completeDate };

            if (additionalValues != null)
                completeDateList.AddRange(additionalValues);

            if (completeDateList.Count == 1)
                return queryable.ByCompleteDate(completeDateList[0]);

            return queryable.ByCompleteDate(completeDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CompleteDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCompleteDate(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(t => values.Contains(t.CompleteDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime createdDate)
        {
            return queryable.Where(t => t.CreatedDate == createdDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, ComparisonOperator comparisonOperator, System.DateTime createdDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.CreatedDate > createdDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.CreatedDate >= createdDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.CreatedDate < createdDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.CreatedDate <= createdDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.CreatedDate != createdDate);
                default:
                    return queryable.Where(t => t.CreatedDate == createdDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> { createdDate };

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            return queryable.ByCreatedDate(createdDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByCreatedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(t => values.Contains(t.CreatedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByModifiedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime modifiedDate)
        {
            return queryable.Where(t => t.ModifiedDate == modifiedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByModifiedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, ComparisonOperator comparisonOperator, System.DateTime modifiedDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.ModifiedDate > modifiedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.ModifiedDate >= modifiedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.ModifiedDate < modifiedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.ModifiedDate <= modifiedDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.ModifiedDate != modifiedDate);
                default:
                    return queryable.Where(t => t.ModifiedDate == modifiedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByModifiedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, System.DateTime modifiedDate, params System.DateTime[] additionalValues)
        {
            var modifiedDateList = new List<System.DateTime> { modifiedDate };

            if (additionalValues != null)
                modifiedDateList.AddRange(additionalValues);

            if (modifiedDateList.Count == 1)
                return queryable.ByModifiedDate(modifiedDateList[0]);

            return queryable.ByModifiedDate(modifiedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByModifiedDate(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(t => values.Contains(t.ModifiedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.LastModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByLastModifiedBy(this IQueryable<Tracker.Data.Entities.Task> queryable, System.String lastModifiedBy)
        {
            return queryable.Where(t => t.LastModifiedBy == lastModifiedBy);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.LastModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByLastModifiedBy(this IQueryable<Tracker.Data.Entities.Task> queryable, ContainmentOperator containmentOperator, System.String lastModifiedBy)
        {
            if (lastModifiedBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastModifiedBy", "Parameter 'lastModifiedBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.LastModifiedBy.Contains(lastModifiedBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.LastModifiedBy.StartsWith(lastModifiedBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.LastModifiedBy.EndsWith(lastModifiedBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.LastModifiedBy.Contains(lastModifiedBy) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(t => t.LastModifiedBy != lastModifiedBy);
                default:
                    return queryable.Where(t => t.LastModifiedBy == lastModifiedBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.LastModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByLastModifiedBy(this IQueryable<Tracker.Data.Entities.Task> queryable, System.String lastModifiedBy, params System.String[] additionalValues)
        {
            var lastModifiedByList = new List<System.String> { lastModifiedBy };

            if (additionalValues != null)
                lastModifiedByList.AddRange(additionalValues);

            if (lastModifiedByList.Count == 1)
                return queryable.ByLastModifiedBy(lastModifiedByList[0]);

            return queryable.ByLastModifiedBy(lastModifiedByList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Data.Entities.Task.LastModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Data.Entities.Task> ByLastModifiedBy(this IQueryable<Tracker.Data.Entities.Task> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(t => values.Contains(t.LastModifiedBy));
        }
    }
}
#pragma warning restore 1591

