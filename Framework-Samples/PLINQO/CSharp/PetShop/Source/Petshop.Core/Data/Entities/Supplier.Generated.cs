//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The class representing the dbo.Supplier table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.Supplier")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(Metadata))]
    [System.Data.Services.Common.DataServiceKey("SuppId")]
    [System.Diagnostics.DebuggerDisplay("SuppId: {SuppId}")]
    public partial class Supplier
        : LinqEntityBase, ICloneable 
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="Supplier"/> class.
        /// </summary>
        static Supplier()
        {
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Supplier"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public Supplier()
        {
            Initialize();
        }

        private void Initialize()
        {
            _itemList = new System.Data.Linq.EntitySet<Item>(OnItemListAdd, OnItemListRemove);
            OnCreated();
        }
        #endregion

        #region Column Mapped Properties

        private int _suppId;

        /// <summary>
        /// Gets or sets the SuppId column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "SuppId", Storage = "_suppId", DbType = "int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        public int SuppId
        {
            get { return _suppId; }
            set
            {
                if (_suppId != value)
                {
                    OnSuppIdChanging(value);
                    SendPropertyChanging("SuppId");
                    _suppId = value;
                    SendPropertyChanged("SuppId");
                    OnSuppIdChanged();
                }
            }
        }

        private string _name;

        /// <summary>
        /// Gets or sets the Name column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Name", Storage = "_name", DbType = "varchar(80)")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    OnNameChanging(value);
                    SendPropertyChanging("Name");
                    _name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        private string _status;

        /// <summary>
        /// Gets or sets the Status column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Status", Storage = "_status", DbType = "varchar(2) NOT NULL", CanBeNull = false)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    OnStatusChanging(value);
                    SendPropertyChanging("Status");
                    _status = value;
                    SendPropertyChanged("Status");
                    OnStatusChanged();
                }
            }
        }

        private string _addr1;

        /// <summary>
        /// Gets or sets the Addr1 column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Addr1", Storage = "_addr1", DbType = "varchar(80)")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        public string Addr1
        {
            get { return _addr1; }
            set
            {
                if (_addr1 != value)
                {
                    OnAddr1Changing(value);
                    SendPropertyChanging("Addr1");
                    _addr1 = value;
                    SendPropertyChanged("Addr1");
                    OnAddr1Changed();
                }
            }
        }

        private string _addr2;

        /// <summary>
        /// Gets or sets the Addr2 column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Addr2", Storage = "_addr2", DbType = "varchar(80)")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        [System.Runtime.Serialization.DataMember(Order = 5)]
        public string Addr2
        {
            get { return _addr2; }
            set
            {
                if (_addr2 != value)
                {
                    OnAddr2Changing(value);
                    SendPropertyChanging("Addr2");
                    _addr2 = value;
                    SendPropertyChanged("Addr2");
                    OnAddr2Changed();
                }
            }
        }

        private string _city;

        /// <summary>
        /// Gets or sets the City column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "City", Storage = "_city", DbType = "varchar(80)")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        [System.Runtime.Serialization.DataMember(Order = 6)]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    OnCityChanging(value);
                    SendPropertyChanging("City");
                    _city = value;
                    SendPropertyChanged("City");
                    OnCityChanged();
                }
            }
        }

        private string _state;

        /// <summary>
        /// Gets or sets the State column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "State", Storage = "_state", DbType = "varchar(80)")]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        [System.Runtime.Serialization.DataMember(Order = 7)]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    OnStateChanging(value);
                    SendPropertyChanging("State");
                    _state = value;
                    SendPropertyChanged("State");
                    OnStateChanged();
                }
            }
        }

        private string _zip;

        /// <summary>
        /// Gets or sets the Zip column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Zip", Storage = "_zip", DbType = "varchar(5)")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        [System.Runtime.Serialization.DataMember(Order = 8)]
        public string Zip
        {
            get { return _zip; }
            set
            {
                if (_zip != value)
                {
                    OnZipChanging(value);
                    SendPropertyChanging("Zip");
                    _zip = value;
                    SendPropertyChanged("Zip");
                    OnZipChanged();
                }
            }
        }

        private string _phone;

        /// <summary>
        /// Gets or sets the Phone column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Phone", Storage = "_phone", DbType = "varchar(40)")]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        [System.Runtime.Serialization.DataMember(Order = 9)]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    OnPhoneChanging(value);
                    SendPropertyChanging("Phone");
                    _phone = value;
                    SendPropertyChanged("Phone");
                    OnPhoneChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        private System.Data.Linq.EntitySet<Item> _itemList;

        /// <summary>
        /// Gets or sets the <see cref="Item"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "Supplier_Item", Storage = "_itemList", ThisKey = "SuppId", OtherKey = "Supplier")]
        [System.Runtime.Serialization.DataMember(Order=10, EmitDefaultValue=false)]
        public System.Data.Linq.EntitySet<Item> ItemList
        {
            get { return (serializing && !_itemList.HasLoadedOrAssignedValues) ? null : _itemList; }
            set { _itemList.Assign(value); }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        private void OnItemListAdd(Item entity)
        {
            SendPropertyChanging(null);
            entity.Supplier1 = this;
            SendPropertyChanged(null);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        private void OnItemListRemove(Item entity)
        {
            SendPropertyChanging(null);
            entity.Supplier1 = null;
            SendPropertyChanged(null);
        }
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when <see cref="SuppId"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSuppIdChanging(int value);
        /// <summary>Called after <see cref="SuppId"/> has Changed.</summary>
        partial void OnSuppIdChanged();
        /// <summary>Called when <see cref="Name"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNameChanging(string value);
        /// <summary>Called after <see cref="Name"/> has Changed.</summary>
        partial void OnNameChanged();
        /// <summary>Called when <see cref="Status"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusChanging(string value);
        /// <summary>Called after <see cref="Status"/> has Changed.</summary>
        partial void OnStatusChanged();
        /// <summary>Called when <see cref="Addr1"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAddr1Changing(string value);
        /// <summary>Called after <see cref="Addr1"/> has Changed.</summary>
        partial void OnAddr1Changed();
        /// <summary>Called when <see cref="Addr2"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAddr2Changing(string value);
        /// <summary>Called after <see cref="Addr2"/> has Changed.</summary>
        partial void OnAddr2Changed();
        /// <summary>Called when <see cref="City"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCityChanging(string value);
        /// <summary>Called after <see cref="City"/> has Changed.</summary>
        partial void OnCityChanged();
        /// <summary>Called when <see cref="State"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStateChanging(string value);
        /// <summary>Called after <see cref="State"/> has Changed.</summary>
        partial void OnStateChanged();
        /// <summary>Called when <see cref="Zip"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnZipChanging(string value);
        /// <summary>Called after <see cref="Zip"/> has Changed.</summary>
        partial void OnZipChanged();
        /// <summary>Called when <see cref="Phone"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPhoneChanging(string value);
        /// <summary>Called after <see cref="Phone"/> has Changed.</summary>
        partial void OnPhoneChanged();

        #endregion

        #region Serialization
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }

        /// <summary>
        /// Deserializes an instance of <see cref="Supplier"/> from XML.
        /// </summary>
        /// <param name="xml">The XML string representing a <see cref="Supplier"/> instance.</param>
        /// <returns>An instance of <see cref="Supplier"/> that is deserialized from the XML string.</returns>
        public static Supplier FromXml(string xml)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(Supplier));

            using (var sr = new System.IO.StringReader(xml))
            using (var reader = System.Xml.XmlReader.Create(sr))
            {
                return deserializer.ReadObject(reader) as Supplier;
            }
        }

        /// <summary>
        /// Deserializes an instance of <see cref="Supplier"/> from a byte array.
        /// </summary>
        /// <param name="buffer">The byte array representing a <see cref="Supplier"/> instance.</param>
        /// <returns>An instance of <see cref="Supplier"/> that is deserialized from the byte array.</returns>
        public static Supplier FromBinary(byte[] buffer)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(Supplier));

            using (var ms = new System.IO.MemoryStream(buffer))
            using (var reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max))
            {
                return deserializer.ReadObject(reader) as Supplier;
            }
        }
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        public Supplier Clone()
        {
            return (Supplier)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _itemList = Detach(_itemList, OnItemListAdd, OnItemListRemove);
        }
        #endregion
    }
}

