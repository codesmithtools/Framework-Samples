//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The query extension class for Account.
    /// </summary>
    public static partial class AccountExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static PetShop.Core.Data.Account GetByKey(this IQueryable<PetShop.Core.Data.Account> queryable, int accountId)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.Account>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, accountId);

            return queryable.FirstOrDefault(a => a.AccountId == accountId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<PetShop.Core.Data.Account> table, int accountId)
        {
            return table.Delete(a => a.AccountId == accountId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uniqueID">UniqueID to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByUniqueID(this IQueryable<PetShop.Core.Data.Account> queryable, int uniqueID)
        {
            return queryable.Where(a => a.UniqueID == uniqueID);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uniqueID">UniqueID to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByUniqueID(this IQueryable<PetShop.Core.Data.Account> queryable, int uniqueID, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => uniqueID > a.UniqueID);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => uniqueID >= a.UniqueID);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => uniqueID < a.UniqueID);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => uniqueID <= a.UniqueID);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.UniqueID != uniqueID);
                default:
                    return queryable.Where(a => a.UniqueID == uniqueID);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uniqueID">UniqueID to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByUniqueID(this IQueryable<PetShop.Core.Data.Account> queryable, int uniqueID, params int[] additionalValues)
        {
            var uniqueIDList = new List<int> { uniqueID };

            if (additionalValues != null)
                uniqueIDList.AddRange(additionalValues);

            if (uniqueIDList.Count == 1)
                return queryable.ByUniqueID(uniqueIDList[0]);

            return queryable.ByUniqueID(uniqueIDList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.UniqueID"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByUniqueID(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<int> values)
        {
            return queryable.Where(a => values.Contains(a.UniqueID));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByEmail(this IQueryable<PetShop.Core.Data.Account> queryable, string email)
        {
            return queryable.Where(a => a.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByEmail(this IQueryable<PetShop.Core.Data.Account> queryable, string email, ContainmentOperator containmentOperator)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Email != email);
                default:
                    return queryable.Where(a => a.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByEmail(this IQueryable<PetShop.Core.Data.Account> queryable, string email, params string[] additionalValues)
        {
            var emailList = new List<string> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByEmail(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.Email));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByFirstName(this IQueryable<PetShop.Core.Data.Account> queryable, string firstName)
        {
            return queryable.Where(a => a.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByFirstName(this IQueryable<PetShop.Core.Data.Account> queryable, string firstName, ContainmentOperator containmentOperator)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.FirstName != firstName);
                default:
                    return queryable.Where(a => a.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByFirstName(this IQueryable<PetShop.Core.Data.Account> queryable, string firstName, params string[] additionalValues)
        {
            var firstNameList = new List<string> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByFirstName(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.FirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByLastName(this IQueryable<PetShop.Core.Data.Account> queryable, string lastName)
        {
            return queryable.Where(a => a.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByLastName(this IQueryable<PetShop.Core.Data.Account> queryable, string lastName, ContainmentOperator containmentOperator)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.LastName != lastName);
                default:
                    return queryable.Where(a => a.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByLastName(this IQueryable<PetShop.Core.Data.Account> queryable, string lastName, params string[] additionalValues)
        {
            var lastNameList = new List<string> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByLastName(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.LastName));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address1">Address1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress1(this IQueryable<PetShop.Core.Data.Account> queryable, string address1)
        {
            return queryable.Where(a => a.Address1 == address1);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address1">Address1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress1(this IQueryable<PetShop.Core.Data.Account> queryable, string address1, ContainmentOperator containmentOperator)
        {
            if (address1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address1", "Parameter 'address1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Address1.Contains(address1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Address1.StartsWith(address1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Address1.EndsWith(address1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Address1.Contains(address1) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Address1 != address1);
                default:
                    return queryable.Where(a => a.Address1 == address1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address1">Address1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress1(this IQueryable<PetShop.Core.Data.Account> queryable, string address1, params string[] additionalValues)
        {
            var address1List = new List<string> { address1 };

            if (additionalValues != null)
                address1List.AddRange(additionalValues);

            if (address1List.Count == 1)
                return queryable.ByAddress1(address1List[0]);

            return queryable.ByAddress1(address1List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress1(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.Address1));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress2(this IQueryable<PetShop.Core.Data.Account> queryable, string address2)
        {
            // using object equals to support nulls
            return queryable.Where(a => object.Equals(a.Address2, address2));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress2(this IQueryable<PetShop.Core.Data.Account> queryable, string address2, ContainmentOperator containmentOperator)
        {
            if (address2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address2", "Parameter 'address2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Address2.Contains(address2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Address2.StartsWith(address2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Address2.EndsWith(address2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Address2.Contains(address2) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => object.Equals(a.Address2, address2) == false);
                default:
                    return queryable.Where(a => object.Equals(a.Address2, address2));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress2(this IQueryable<PetShop.Core.Data.Account> queryable, string address2, params string[] additionalValues)
        {
            var address2List = new List<string> { address2 };

            if (additionalValues != null)
                address2List.AddRange(additionalValues);
            else
                address2List.Add(null);

            if (address2List.Count == 1)
                return queryable.ByAddress2(address2List[0]);

            return queryable.ByAddress2(address2List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAddress2(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Account, bool>("Address2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCity(this IQueryable<PetShop.Core.Data.Account> queryable, string city)
        {
            return queryable.Where(a => a.City == city);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCity(this IQueryable<PetShop.Core.Data.Account> queryable, string city, ContainmentOperator containmentOperator)
        {
            if (city == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("city", "Parameter 'city' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.City.Contains(city));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.City.StartsWith(city));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.City.EndsWith(city));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.City.Contains(city) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.City != city);
                default:
                    return queryable.Where(a => a.City == city);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCity(this IQueryable<PetShop.Core.Data.Account> queryable, string city, params string[] additionalValues)
        {
            var cityList = new List<string> { city };

            if (additionalValues != null)
                cityList.AddRange(additionalValues);

            if (cityList.Count == 1)
                return queryable.ByCity(cityList[0]);

            return queryable.ByCity(cityList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCity(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.City));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByState(this IQueryable<PetShop.Core.Data.Account> queryable, string state)
        {
            return queryable.Where(a => a.State == state);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByState(this IQueryable<PetShop.Core.Data.Account> queryable, string state, ContainmentOperator containmentOperator)
        {
            if (state == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("state", "Parameter 'state' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.State.Contains(state));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.State.StartsWith(state));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.State.EndsWith(state));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.State.Contains(state) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.State != state);
                default:
                    return queryable.Where(a => a.State == state);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByState(this IQueryable<PetShop.Core.Data.Account> queryable, string state, params string[] additionalValues)
        {
            var stateList = new List<string> { state };

            if (additionalValues != null)
                stateList.AddRange(additionalValues);

            if (stateList.Count == 1)
                return queryable.ByState(stateList[0]);

            return queryable.ByState(stateList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByState(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.State));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByZip(this IQueryable<PetShop.Core.Data.Account> queryable, string zip)
        {
            return queryable.Where(a => a.Zip == zip);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByZip(this IQueryable<PetShop.Core.Data.Account> queryable, string zip, ContainmentOperator containmentOperator)
        {
            if (zip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("zip", "Parameter 'zip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Zip.Contains(zip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Zip.StartsWith(zip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Zip.EndsWith(zip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Zip.Contains(zip) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Zip != zip);
                default:
                    return queryable.Where(a => a.Zip == zip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByZip(this IQueryable<PetShop.Core.Data.Account> queryable, string zip, params string[] additionalValues)
        {
            var zipList = new List<string> { zip };

            if (additionalValues != null)
                zipList.AddRange(additionalValues);

            if (zipList.Count == 1)
                return queryable.ByZip(zipList[0]);

            return queryable.ByZip(zipList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByZip(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.Zip));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCountry(this IQueryable<PetShop.Core.Data.Account> queryable, string country)
        {
            return queryable.Where(a => a.Country == country);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCountry(this IQueryable<PetShop.Core.Data.Account> queryable, string country, ContainmentOperator containmentOperator)
        {
            if (country == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("country", "Parameter 'country' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Country.Contains(country));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Country.StartsWith(country));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Country.EndsWith(country));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Country.Contains(country) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Country != country);
                default:
                    return queryable.Where(a => a.Country == country);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCountry(this IQueryable<PetShop.Core.Data.Account> queryable, string country, params string[] additionalValues)
        {
            var countryList = new List<string> { country };

            if (additionalValues != null)
                countryList.AddRange(additionalValues);

            if (countryList.Count == 1)
                return queryable.ByCountry(countryList[0]);

            return queryable.ByCountry(countryList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByCountry(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.Country));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByPhone(this IQueryable<PetShop.Core.Data.Account> queryable, string phone)
        {
            // using object equals to support nulls
            return queryable.Where(a => object.Equals(a.Phone, phone));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByPhone(this IQueryable<PetShop.Core.Data.Account> queryable, string phone, ContainmentOperator containmentOperator)
        {
            if (phone == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("phone", "Parameter 'phone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Phone.Contains(phone));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Phone.StartsWith(phone));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Phone.EndsWith(phone));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Phone.Contains(phone) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => object.Equals(a.Phone, phone) == false);
                default:
                    return queryable.Where(a => object.Equals(a.Phone, phone));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByPhone(this IQueryable<PetShop.Core.Data.Account> queryable, string phone, params string[] additionalValues)
        {
            var phoneList = new List<string> { phone };

            if (additionalValues != null)
                phoneList.AddRange(additionalValues);
            else
                phoneList.Add(null);

            if (phoneList.Count == 1)
                return queryable.ByPhone(phoneList[0]);

            return queryable.ByPhone(phoneList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByPhone(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Account, bool>("Phone", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAccountId(this IQueryable<PetShop.Core.Data.Account> queryable, int accountId)
        {
            return queryable.Where(a => a.AccountId == accountId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAccountId(this IQueryable<PetShop.Core.Data.Account> queryable, int accountId, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => accountId > a.AccountId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => accountId >= a.AccountId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => accountId < a.AccountId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => accountId <= a.AccountId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.AccountId != accountId);
                default:
                    return queryable.Where(a => a.AccountId == accountId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAccountId(this IQueryable<PetShop.Core.Data.Account> queryable, int accountId, params int[] additionalValues)
        {
            var accountIdList = new List<int> { accountId };

            if (additionalValues != null)
                accountIdList.AddRange(additionalValues);

            if (accountIdList.Count == 1)
                return queryable.ByAccountId(accountIdList[0]);

            return queryable.ByAccountId(accountIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Account.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Account> ByAccountId(this IQueryable<PetShop.Core.Data.Account> queryable, IEnumerable<int> values)
        {
            return queryable.Where(a => values.Contains(a.AccountId));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, int, PetShop.Core.Data.Account> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, int accountId) =>
                        db.Account.FirstOrDefault(a => a.AccountId == accountId));

        }
        #endregion
    }
}

