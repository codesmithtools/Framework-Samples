//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The query extension class for Inventory.
    /// </summary>
    public static partial class InventoryExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static PetShop.Core.Data.Inventory GetByKey(this IQueryable<PetShop.Core.Data.Inventory> queryable, string itemId)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.Inventory>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, itemId);

            return queryable.FirstOrDefault(i => i.ItemId == itemId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<PetShop.Core.Data.Inventory> table, string itemId)
        {
            return table.Delete(i => i.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByItemId(this IQueryable<PetShop.Core.Data.Inventory> queryable, string itemId)
        {
            return queryable.Where(i => i.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByItemId(this IQueryable<PetShop.Core.Data.Inventory> queryable, string itemId, ContainmentOperator containmentOperator)
        {
            if (itemId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.ItemId.Contains(itemId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.ItemId.StartsWith(itemId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.ItemId.EndsWith(itemId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.ItemId.Contains(itemId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.ItemId != itemId);
                default:
                    return queryable.Where(i => i.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByItemId(this IQueryable<PetShop.Core.Data.Inventory> queryable, string itemId, params string[] additionalValues)
        {
            var itemIdList = new List<string> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByItemId(this IQueryable<PetShop.Core.Data.Inventory> queryable, IEnumerable<string> values)
        {
            return queryable.Where(i => values.Contains(i.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByQty(this IQueryable<PetShop.Core.Data.Inventory> queryable, int qty)
        {
            return queryable.Where(i => i.Qty == qty);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByQty(this IQueryable<PetShop.Core.Data.Inventory> queryable, int qty, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => qty > i.Qty);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => qty >= i.Qty);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => qty < i.Qty);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => qty <= i.Qty);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Qty != qty);
                default:
                    return queryable.Where(i => i.Qty == qty);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="qty">Qty to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByQty(this IQueryable<PetShop.Core.Data.Inventory> queryable, int qty, params int[] additionalValues)
        {
            var qtyList = new List<int> { qty };

            if (additionalValues != null)
                qtyList.AddRange(additionalValues);

            if (qtyList.Count == 1)
                return queryable.ByQty(qtyList[0]);

            return queryable.ByQty(qtyList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Inventory.Qty"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Inventory> ByQty(this IQueryable<PetShop.Core.Data.Inventory> queryable, IEnumerable<int> values)
        {
            return queryable.Where(i => values.Contains(i.Qty));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, string, PetShop.Core.Data.Inventory> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, string itemId) =>
                        db.Inventory.FirstOrDefault(i => i.ItemId == itemId));

        }
        #endregion
    }
}

