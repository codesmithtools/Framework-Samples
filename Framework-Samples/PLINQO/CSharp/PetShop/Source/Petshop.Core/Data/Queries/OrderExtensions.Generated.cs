//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The query extension class for Order.
    /// </summary>
    public static partial class OrderExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static PetShop.Core.Data.Order GetByKey(this IQueryable<PetShop.Core.Data.Order> queryable, int orderId)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.Order>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, orderId);

            return queryable.FirstOrDefault(o => o.OrderId == orderId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<PetShop.Core.Data.Order> table, int orderId)
        {
            return table.Delete(o => o.OrderId == orderId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderId(this IQueryable<PetShop.Core.Data.Order> queryable, int orderId)
        {
            return queryable.Where(o => o.OrderId == orderId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderId(this IQueryable<PetShop.Core.Data.Order> queryable, int orderId, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => orderId > o.OrderId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => orderId >= o.OrderId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => orderId < o.OrderId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => orderId <= o.OrderId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.OrderId != orderId);
                default:
                    return queryable.Where(o => o.OrderId == orderId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderId(this IQueryable<PetShop.Core.Data.Order> queryable, int orderId, params int[] additionalValues)
        {
            var orderIdList = new List<int> { orderId };

            if (additionalValues != null)
                orderIdList.AddRange(additionalValues);

            if (orderIdList.Count == 1)
                return queryable.ByOrderId(orderIdList[0]);

            return queryable.ByOrderId(orderIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderId(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<int> values)
        {
            return queryable.Where(o => values.Contains(o.OrderId));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByUserId(this IQueryable<PetShop.Core.Data.Order> queryable, string userId)
        {
            return queryable.Where(o => o.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByUserId(this IQueryable<PetShop.Core.Data.Order> queryable, string userId, ContainmentOperator containmentOperator)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.UserId != userId);
                default:
                    return queryable.Where(o => o.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByUserId(this IQueryable<PetShop.Core.Data.Order> queryable, string userId, params string[] additionalValues)
        {
            var userIdList = new List<string> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByUserId(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderDate">OrderDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderDate(this IQueryable<PetShop.Core.Data.Order> queryable, System.DateTime orderDate)
        {
            return queryable.Where(o => o.OrderDate == orderDate);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderDate">OrderDate to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderDate(this IQueryable<PetShop.Core.Data.Order> queryable, System.DateTime orderDate, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => orderDate > o.OrderDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => orderDate >= o.OrderDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => orderDate < o.OrderDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => orderDate <= o.OrderDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.OrderDate != orderDate);
                default:
                    return queryable.Where(o => o.OrderDate == orderDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderDate">OrderDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderDate(this IQueryable<PetShop.Core.Data.Order> queryable, System.DateTime orderDate, params System.DateTime[] additionalValues)
        {
            var orderDateList = new List<System.DateTime> { orderDate };

            if (additionalValues != null)
                orderDateList.AddRange(additionalValues);

            if (orderDateList.Count == 1)
                return queryable.ByOrderDate(orderDateList[0]);

            return queryable.ByOrderDate(orderDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.OrderDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByOrderDate(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(o => values.Contains(o.OrderDate));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr1">ShipAddr1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, string shipAddr1)
        {
            return queryable.Where(o => o.ShipAddr1 == shipAddr1);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr1">ShipAddr1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, string shipAddr1, ContainmentOperator containmentOperator)
        {
            if (shipAddr1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipAddr1", "Parameter 'shipAddr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipAddr1.Contains(shipAddr1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipAddr1.StartsWith(shipAddr1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipAddr1.EndsWith(shipAddr1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipAddr1.Contains(shipAddr1) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.ShipAddr1 != shipAddr1);
                default:
                    return queryable.Where(o => o.ShipAddr1 == shipAddr1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr1">ShipAddr1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, string shipAddr1, params string[] additionalValues)
        {
            var shipAddr1List = new List<string> { shipAddr1 };

            if (additionalValues != null)
                shipAddr1List.AddRange(additionalValues);

            if (shipAddr1List.Count == 1)
                return queryable.ByShipAddr1(shipAddr1List[0]);

            return queryable.ByShipAddr1(shipAddr1List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.ShipAddr1));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr2">ShipAddr2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, string shipAddr2)
        {
            // using object equals to support nulls
            return queryable.Where(o => object.Equals(o.ShipAddr2, shipAddr2));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr2">ShipAddr2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, string shipAddr2, ContainmentOperator containmentOperator)
        {
            if (shipAddr2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipAddr2", "Parameter 'shipAddr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipAddr2.Contains(shipAddr2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipAddr2.StartsWith(shipAddr2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipAddr2.EndsWith(shipAddr2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipAddr2.Contains(shipAddr2) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => object.Equals(o.ShipAddr2, shipAddr2) == false);
                default:
                    return queryable.Where(o => object.Equals(o.ShipAddr2, shipAddr2));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipAddr2">ShipAddr2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, string shipAddr2, params string[] additionalValues)
        {
            var shipAddr2List = new List<string> { shipAddr2 };

            if (additionalValues != null)
                shipAddr2List.AddRange(additionalValues);
            else
                shipAddr2List.Add(null);

            if (shipAddr2List.Count == 1)
                return queryable.ByShipAddr2(shipAddr2List[0]);

            return queryable.ByShipAddr2(shipAddr2List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Order, bool>("ShipAddr2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCity">ShipCity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCity(this IQueryable<PetShop.Core.Data.Order> queryable, string shipCity)
        {
            return queryable.Where(o => o.ShipCity == shipCity);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCity">ShipCity to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCity(this IQueryable<PetShop.Core.Data.Order> queryable, string shipCity, ContainmentOperator containmentOperator)
        {
            if (shipCity == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipCity", "Parameter 'shipCity' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipCity.Contains(shipCity));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipCity.StartsWith(shipCity));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipCity.EndsWith(shipCity));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipCity.Contains(shipCity) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.ShipCity != shipCity);
                default:
                    return queryable.Where(o => o.ShipCity == shipCity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCity">ShipCity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCity(this IQueryable<PetShop.Core.Data.Order> queryable, string shipCity, params string[] additionalValues)
        {
            var shipCityList = new List<string> { shipCity };

            if (additionalValues != null)
                shipCityList.AddRange(additionalValues);

            if (shipCityList.Count == 1)
                return queryable.ByShipCity(shipCityList[0]);

            return queryable.ByShipCity(shipCityList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCity(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.ShipCity));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipState">ShipState to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipState(this IQueryable<PetShop.Core.Data.Order> queryable, string shipState)
        {
            return queryable.Where(o => o.ShipState == shipState);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipState">ShipState to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipState(this IQueryable<PetShop.Core.Data.Order> queryable, string shipState, ContainmentOperator containmentOperator)
        {
            if (shipState == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipState", "Parameter 'shipState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipState.Contains(shipState));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipState.StartsWith(shipState));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipState.EndsWith(shipState));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipState.Contains(shipState) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.ShipState != shipState);
                default:
                    return queryable.Where(o => o.ShipState == shipState);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipState">ShipState to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipState(this IQueryable<PetShop.Core.Data.Order> queryable, string shipState, params string[] additionalValues)
        {
            var shipStateList = new List<string> { shipState };

            if (additionalValues != null)
                shipStateList.AddRange(additionalValues);

            if (shipStateList.Count == 1)
                return queryable.ByShipState(shipStateList[0]);

            return queryable.ByShipState(shipStateList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipState(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.ShipState));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipZip">ShipZip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipZip(this IQueryable<PetShop.Core.Data.Order> queryable, string shipZip)
        {
            return queryable.Where(o => o.ShipZip == shipZip);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipZip">ShipZip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipZip(this IQueryable<PetShop.Core.Data.Order> queryable, string shipZip, ContainmentOperator containmentOperator)
        {
            if (shipZip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipZip", "Parameter 'shipZip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipZip.Contains(shipZip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipZip.StartsWith(shipZip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipZip.EndsWith(shipZip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipZip.Contains(shipZip) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.ShipZip != shipZip);
                default:
                    return queryable.Where(o => o.ShipZip == shipZip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipZip">ShipZip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipZip(this IQueryable<PetShop.Core.Data.Order> queryable, string shipZip, params string[] additionalValues)
        {
            var shipZipList = new List<string> { shipZip };

            if (additionalValues != null)
                shipZipList.AddRange(additionalValues);

            if (shipZipList.Count == 1)
                return queryable.ByShipZip(shipZipList[0]);

            return queryable.ByShipZip(shipZipList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipZip(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.ShipZip));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCountry">ShipCountry to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCountry(this IQueryable<PetShop.Core.Data.Order> queryable, string shipCountry)
        {
            return queryable.Where(o => o.ShipCountry == shipCountry);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCountry">ShipCountry to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCountry(this IQueryable<PetShop.Core.Data.Order> queryable, string shipCountry, ContainmentOperator containmentOperator)
        {
            if (shipCountry == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipCountry", "Parameter 'shipCountry' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipCountry.Contains(shipCountry));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipCountry.StartsWith(shipCountry));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipCountry.EndsWith(shipCountry));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipCountry.Contains(shipCountry) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.ShipCountry != shipCountry);
                default:
                    return queryable.Where(o => o.ShipCountry == shipCountry);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipCountry">ShipCountry to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCountry(this IQueryable<PetShop.Core.Data.Order> queryable, string shipCountry, params string[] additionalValues)
        {
            var shipCountryList = new List<string> { shipCountry };

            if (additionalValues != null)
                shipCountryList.AddRange(additionalValues);

            if (shipCountryList.Count == 1)
                return queryable.ByShipCountry(shipCountryList[0]);

            return queryable.ByShipCountry(shipCountryList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipCountry(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.ShipCountry));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr1">BillAddr1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, string billAddr1)
        {
            return queryable.Where(o => o.BillAddr1 == billAddr1);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr1">BillAddr1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, string billAddr1, ContainmentOperator containmentOperator)
        {
            if (billAddr1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billAddr1", "Parameter 'billAddr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillAddr1.Contains(billAddr1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillAddr1.StartsWith(billAddr1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillAddr1.EndsWith(billAddr1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillAddr1.Contains(billAddr1) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.BillAddr1 != billAddr1);
                default:
                    return queryable.Where(o => o.BillAddr1 == billAddr1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr1">BillAddr1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, string billAddr1, params string[] additionalValues)
        {
            var billAddr1List = new List<string> { billAddr1 };

            if (additionalValues != null)
                billAddr1List.AddRange(additionalValues);

            if (billAddr1List.Count == 1)
                return queryable.ByBillAddr1(billAddr1List[0]);

            return queryable.ByBillAddr1(billAddr1List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr1(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.BillAddr1));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr2">BillAddr2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, string billAddr2)
        {
            // using object equals to support nulls
            return queryable.Where(o => object.Equals(o.BillAddr2, billAddr2));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr2">BillAddr2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, string billAddr2, ContainmentOperator containmentOperator)
        {
            if (billAddr2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billAddr2", "Parameter 'billAddr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillAddr2.Contains(billAddr2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillAddr2.StartsWith(billAddr2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillAddr2.EndsWith(billAddr2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillAddr2.Contains(billAddr2) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => object.Equals(o.BillAddr2, billAddr2) == false);
                default:
                    return queryable.Where(o => object.Equals(o.BillAddr2, billAddr2));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billAddr2">BillAddr2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, string billAddr2, params string[] additionalValues)
        {
            var billAddr2List = new List<string> { billAddr2 };

            if (additionalValues != null)
                billAddr2List.AddRange(additionalValues);
            else
                billAddr2List.Add(null);

            if (billAddr2List.Count == 1)
                return queryable.ByBillAddr2(billAddr2List[0]);

            return queryable.ByBillAddr2(billAddr2List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillAddr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillAddr2(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Order, bool>("BillAddr2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCity">BillCity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCity(this IQueryable<PetShop.Core.Data.Order> queryable, string billCity)
        {
            return queryable.Where(o => o.BillCity == billCity);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCity">BillCity to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCity(this IQueryable<PetShop.Core.Data.Order> queryable, string billCity, ContainmentOperator containmentOperator)
        {
            if (billCity == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billCity", "Parameter 'billCity' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillCity.Contains(billCity));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillCity.StartsWith(billCity));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillCity.EndsWith(billCity));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillCity.Contains(billCity) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.BillCity != billCity);
                default:
                    return queryable.Where(o => o.BillCity == billCity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCity">BillCity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCity(this IQueryable<PetShop.Core.Data.Order> queryable, string billCity, params string[] additionalValues)
        {
            var billCityList = new List<string> { billCity };

            if (additionalValues != null)
                billCityList.AddRange(additionalValues);

            if (billCityList.Count == 1)
                return queryable.ByBillCity(billCityList[0]);

            return queryable.ByBillCity(billCityList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCity(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.BillCity));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billState">BillState to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillState(this IQueryable<PetShop.Core.Data.Order> queryable, string billState)
        {
            return queryable.Where(o => o.BillState == billState);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billState">BillState to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillState(this IQueryable<PetShop.Core.Data.Order> queryable, string billState, ContainmentOperator containmentOperator)
        {
            if (billState == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billState", "Parameter 'billState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillState.Contains(billState));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillState.StartsWith(billState));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillState.EndsWith(billState));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillState.Contains(billState) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.BillState != billState);
                default:
                    return queryable.Where(o => o.BillState == billState);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billState">BillState to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillState(this IQueryable<PetShop.Core.Data.Order> queryable, string billState, params string[] additionalValues)
        {
            var billStateList = new List<string> { billState };

            if (additionalValues != null)
                billStateList.AddRange(additionalValues);

            if (billStateList.Count == 1)
                return queryable.ByBillState(billStateList[0]);

            return queryable.ByBillState(billStateList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillState(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.BillState));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billZip">BillZip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillZip(this IQueryable<PetShop.Core.Data.Order> queryable, string billZip)
        {
            return queryable.Where(o => o.BillZip == billZip);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billZip">BillZip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillZip(this IQueryable<PetShop.Core.Data.Order> queryable, string billZip, ContainmentOperator containmentOperator)
        {
            if (billZip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billZip", "Parameter 'billZip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillZip.Contains(billZip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillZip.StartsWith(billZip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillZip.EndsWith(billZip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillZip.Contains(billZip) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.BillZip != billZip);
                default:
                    return queryable.Where(o => o.BillZip == billZip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billZip">BillZip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillZip(this IQueryable<PetShop.Core.Data.Order> queryable, string billZip, params string[] additionalValues)
        {
            var billZipList = new List<string> { billZip };

            if (additionalValues != null)
                billZipList.AddRange(additionalValues);

            if (billZipList.Count == 1)
                return queryable.ByBillZip(billZipList[0]);

            return queryable.ByBillZip(billZipList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillZip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillZip(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.BillZip));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCountry">BillCountry to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCountry(this IQueryable<PetShop.Core.Data.Order> queryable, string billCountry)
        {
            return queryable.Where(o => o.BillCountry == billCountry);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCountry">BillCountry to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCountry(this IQueryable<PetShop.Core.Data.Order> queryable, string billCountry, ContainmentOperator containmentOperator)
        {
            if (billCountry == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billCountry", "Parameter 'billCountry' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillCountry.Contains(billCountry));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillCountry.StartsWith(billCountry));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillCountry.EndsWith(billCountry));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillCountry.Contains(billCountry) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.BillCountry != billCountry);
                default:
                    return queryable.Where(o => o.BillCountry == billCountry);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billCountry">BillCountry to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCountry(this IQueryable<PetShop.Core.Data.Order> queryable, string billCountry, params string[] additionalValues)
        {
            var billCountryList = new List<string> { billCountry };

            if (additionalValues != null)
                billCountryList.AddRange(additionalValues);

            if (billCountryList.Count == 1)
                return queryable.ByBillCountry(billCountryList[0]);

            return queryable.ByBillCountry(billCountryList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillCountry(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.BillCountry));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courier">Courier to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByCourier(this IQueryable<PetShop.Core.Data.Order> queryable, string courier)
        {
            return queryable.Where(o => o.Courier == courier);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courier">Courier to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByCourier(this IQueryable<PetShop.Core.Data.Order> queryable, string courier, ContainmentOperator containmentOperator)
        {
            if (courier == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("courier", "Parameter 'courier' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.Courier.Contains(courier));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.Courier.StartsWith(courier));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.Courier.EndsWith(courier));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.Courier.Contains(courier) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.Courier != courier);
                default:
                    return queryable.Where(o => o.Courier == courier);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="courier">Courier to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByCourier(this IQueryable<PetShop.Core.Data.Order> queryable, string courier, params string[] additionalValues)
        {
            var courierList = new List<string> { courier };

            if (additionalValues != null)
                courierList.AddRange(additionalValues);

            if (courierList.Count == 1)
                return queryable.ByCourier(courierList[0]);

            return queryable.ByCourier(courierList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Courier"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByCourier(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.Courier));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalPrice">TotalPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByTotalPrice(this IQueryable<PetShop.Core.Data.Order> queryable, decimal totalPrice)
        {
            return queryable.Where(o => o.TotalPrice == totalPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalPrice">TotalPrice to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByTotalPrice(this IQueryable<PetShop.Core.Data.Order> queryable, decimal totalPrice, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => totalPrice > o.TotalPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => totalPrice >= o.TotalPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => totalPrice < o.TotalPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => totalPrice <= o.TotalPrice);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.TotalPrice != totalPrice);
                default:
                    return queryable.Where(o => o.TotalPrice == totalPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalPrice">TotalPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByTotalPrice(this IQueryable<PetShop.Core.Data.Order> queryable, decimal totalPrice, params decimal[] additionalValues)
        {
            var totalPriceList = new List<decimal> { totalPrice };

            if (additionalValues != null)
                totalPriceList.AddRange(additionalValues);

            if (totalPriceList.Count == 1)
                return queryable.ByTotalPrice(totalPriceList[0]);

            return queryable.ByTotalPrice(totalPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.TotalPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByTotalPrice(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<decimal> values)
        {
            return queryable.Where(o => values.Contains(o.TotalPrice));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToFirstName">BillToFirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, string billToFirstName)
        {
            return queryable.Where(o => o.BillToFirstName == billToFirstName);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToFirstName">BillToFirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, string billToFirstName, ContainmentOperator containmentOperator)
        {
            if (billToFirstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billToFirstName", "Parameter 'billToFirstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillToFirstName.Contains(billToFirstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillToFirstName.StartsWith(billToFirstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillToFirstName.EndsWith(billToFirstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillToFirstName.Contains(billToFirstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.BillToFirstName != billToFirstName);
                default:
                    return queryable.Where(o => o.BillToFirstName == billToFirstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToFirstName">BillToFirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, string billToFirstName, params string[] additionalValues)
        {
            var billToFirstNameList = new List<string> { billToFirstName };

            if (additionalValues != null)
                billToFirstNameList.AddRange(additionalValues);

            if (billToFirstNameList.Count == 1)
                return queryable.ByBillToFirstName(billToFirstNameList[0]);

            return queryable.ByBillToFirstName(billToFirstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.BillToFirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToLastName">BillToLastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, string billToLastName)
        {
            return queryable.Where(o => o.BillToLastName == billToLastName);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToLastName">BillToLastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, string billToLastName, ContainmentOperator containmentOperator)
        {
            if (billToLastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("billToLastName", "Parameter 'billToLastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.BillToLastName.Contains(billToLastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.BillToLastName.StartsWith(billToLastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.BillToLastName.EndsWith(billToLastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.BillToLastName.Contains(billToLastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.BillToLastName != billToLastName);
                default:
                    return queryable.Where(o => o.BillToLastName == billToLastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToLastName">BillToLastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, string billToLastName, params string[] additionalValues)
        {
            var billToLastNameList = new List<string> { billToLastName };

            if (additionalValues != null)
                billToLastNameList.AddRange(additionalValues);

            if (billToLastNameList.Count == 1)
                return queryable.ByBillToLastName(billToLastNameList[0]);

            return queryable.ByBillToLastName(billToLastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.BillToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByBillToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.BillToLastName));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToFirstName">ShipToFirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, string shipToFirstName)
        {
            return queryable.Where(o => o.ShipToFirstName == shipToFirstName);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToFirstName">ShipToFirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, string shipToFirstName, ContainmentOperator containmentOperator)
        {
            if (shipToFirstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipToFirstName", "Parameter 'shipToFirstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipToFirstName.Contains(shipToFirstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipToFirstName.StartsWith(shipToFirstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipToFirstName.EndsWith(shipToFirstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipToFirstName.Contains(shipToFirstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.ShipToFirstName != shipToFirstName);
                default:
                    return queryable.Where(o => o.ShipToFirstName == shipToFirstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToFirstName">ShipToFirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, string shipToFirstName, params string[] additionalValues)
        {
            var shipToFirstNameList = new List<string> { shipToFirstName };

            if (additionalValues != null)
                shipToFirstNameList.AddRange(additionalValues);

            if (shipToFirstNameList.Count == 1)
                return queryable.ByShipToFirstName(shipToFirstNameList[0]);

            return queryable.ByShipToFirstName(shipToFirstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToFirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToFirstName(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.ShipToFirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToLastName">ShipToLastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, string shipToLastName)
        {
            return queryable.Where(o => o.ShipToLastName == shipToLastName);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToLastName">ShipToLastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, string shipToLastName, ContainmentOperator containmentOperator)
        {
            if (shipToLastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shipToLastName", "Parameter 'shipToLastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.ShipToLastName.Contains(shipToLastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.ShipToLastName.StartsWith(shipToLastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.ShipToLastName.EndsWith(shipToLastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.ShipToLastName.Contains(shipToLastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.ShipToLastName != shipToLastName);
                default:
                    return queryable.Where(o => o.ShipToLastName == shipToLastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shipToLastName">ShipToLastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, string shipToLastName, params string[] additionalValues)
        {
            var shipToLastNameList = new List<string> { shipToLastName };

            if (additionalValues != null)
                shipToLastNameList.AddRange(additionalValues);

            if (shipToLastNameList.Count == 1)
                return queryable.ByShipToLastName(shipToLastNameList[0]);

            return queryable.ByShipToLastName(shipToLastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.ShipToLastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByShipToLastName(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.ShipToLastName));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByAuthorizationNumber(this IQueryable<PetShop.Core.Data.Order> queryable, int authorizationNumber)
        {
            return queryable.Where(o => o.AuthorizationNumber == authorizationNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByAuthorizationNumber(this IQueryable<PetShop.Core.Data.Order> queryable, int authorizationNumber, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => authorizationNumber > o.AuthorizationNumber);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => authorizationNumber >= o.AuthorizationNumber);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => authorizationNumber < o.AuthorizationNumber);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => authorizationNumber <= o.AuthorizationNumber);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.AuthorizationNumber != authorizationNumber);
                default:
                    return queryable.Where(o => o.AuthorizationNumber == authorizationNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByAuthorizationNumber(this IQueryable<PetShop.Core.Data.Order> queryable, int authorizationNumber, params int[] additionalValues)
        {
            var authorizationNumberList = new List<int> { authorizationNumber };

            if (additionalValues != null)
                authorizationNumberList.AddRange(additionalValues);

            if (authorizationNumberList.Count == 1)
                return queryable.ByAuthorizationNumber(authorizationNumberList[0]);

            return queryable.ByAuthorizationNumber(authorizationNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.AuthorizationNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByAuthorizationNumber(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<int> values)
        {
            return queryable.Where(o => values.Contains(o.AuthorizationNumber));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locale">Locale to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByLocale(this IQueryable<PetShop.Core.Data.Order> queryable, string locale)
        {
            return queryable.Where(o => o.Locale == locale);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locale">Locale to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByLocale(this IQueryable<PetShop.Core.Data.Order> queryable, string locale, ContainmentOperator containmentOperator)
        {
            if (locale == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("locale", "Parameter 'locale' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.Locale.Contains(locale));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.Locale.StartsWith(locale));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.Locale.EndsWith(locale));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.Locale.Contains(locale) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.Locale != locale);
                default:
                    return queryable.Where(o => o.Locale == locale);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locale">Locale to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByLocale(this IQueryable<PetShop.Core.Data.Order> queryable, string locale, params string[] additionalValues)
        {
            var localeList = new List<string> { locale };

            if (additionalValues != null)
                localeList.AddRange(additionalValues);

            if (localeList.Count == 1)
                return queryable.ByLocale(localeList[0]);

            return queryable.ByLocale(localeList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Order.Locale"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Order> ByLocale(this IQueryable<PetShop.Core.Data.Order> queryable, IEnumerable<string> values)
        {
            return queryable.Where(o => values.Contains(o.Locale));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, int, PetShop.Core.Data.Order> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, int orderId) =>
                        db.Order.FirstOrDefault(o => o.OrderId == orderId));

        }
        #endregion
    }
}

