//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace PetShop.Core.Data
{
    /// <summary>
    /// The query extension class for Supplier.
    /// </summary>
    public static partial class SupplierExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static PetShop.Core.Data.Supplier GetByKey(this IQueryable<PetShop.Core.Data.Supplier> queryable, int suppId)
        {
            var entity = queryable as System.Data.Linq.Table<PetShop.Core.Data.Supplier>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((PetShop.Core.Data.PetShopDataContext)entity.Context, suppId);

            return queryable.FirstOrDefault(s => s.SuppId == suppId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        public static int Delete(this System.Data.Linq.Table<PetShop.Core.Data.Supplier> table, int suppId)
        {
            return table.Delete(s => s.SuppId == suppId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suppId">SuppId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> BySuppId(this IQueryable<PetShop.Core.Data.Supplier> queryable, int suppId)
        {
            return queryable.Where(s => s.SuppId == suppId);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suppId">SuppId to search for.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> BySuppId(this IQueryable<PetShop.Core.Data.Supplier> queryable, int suppId, ComparisonOperator comparisonOperator)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => suppId > s.SuppId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => suppId >= s.SuppId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => suppId < s.SuppId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => suppId <= s.SuppId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.SuppId != suppId);
                default:
                    return queryable.Where(s => s.SuppId == suppId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suppId">SuppId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> BySuppId(this IQueryable<PetShop.Core.Data.Supplier> queryable, int suppId, params int[] additionalValues)
        {
            var suppIdList = new List<int> { suppId };

            if (additionalValues != null)
                suppIdList.AddRange(additionalValues);

            if (suppIdList.Count == 1)
                return queryable.BySuppId(suppIdList[0]);

            return queryable.BySuppId(suppIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.SuppId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> BySuppId(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.SuppId));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByName(this IQueryable<PetShop.Core.Data.Supplier> queryable, string name)
        {
            // using object equals to support nulls
            return queryable.Where(s => object.Equals(s.Name, name));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByName(this IQueryable<PetShop.Core.Data.Supplier> queryable, string name, ContainmentOperator containmentOperator)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => object.Equals(s.Name, name) == false);
                default:
                    return queryable.Where(s => object.Equals(s.Name, name));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByName(this IQueryable<PetShop.Core.Data.Supplier> queryable, string name, params string[] additionalValues)
        {
            var nameList = new List<string> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);
            else
                nameList.Add(null);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByName(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Supplier, bool>("Name", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByStatus(this IQueryable<PetShop.Core.Data.Supplier> queryable, string status)
        {
            return queryable.Where(s => s.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByStatus(this IQueryable<PetShop.Core.Data.Supplier> queryable, string status, ContainmentOperator containmentOperator)
        {
            if (status == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Status.Contains(status));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Status.StartsWith(status));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Status.EndsWith(status));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Status.Contains(status) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Status != status);
                default:
                    return queryable.Where(s => s.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByStatus(this IQueryable<PetShop.Core.Data.Supplier> queryable, string status, params string[] additionalValues)
        {
            var statusList = new List<string> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByStatus(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            return queryable.Where(s => values.Contains(s.Status));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr1">Addr1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr1(this IQueryable<PetShop.Core.Data.Supplier> queryable, string addr1)
        {
            // using object equals to support nulls
            return queryable.Where(s => object.Equals(s.Addr1, addr1));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr1">Addr1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr1(this IQueryable<PetShop.Core.Data.Supplier> queryable, string addr1, ContainmentOperator containmentOperator)
        {
            if (addr1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("addr1", "Parameter 'addr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Addr1.Contains(addr1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Addr1.StartsWith(addr1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Addr1.EndsWith(addr1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Addr1.Contains(addr1) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => object.Equals(s.Addr1, addr1) == false);
                default:
                    return queryable.Where(s => object.Equals(s.Addr1, addr1));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr1">Addr1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr1(this IQueryable<PetShop.Core.Data.Supplier> queryable, string addr1, params string[] additionalValues)
        {
            var addr1List = new List<string> { addr1 };

            if (additionalValues != null)
                addr1List.AddRange(additionalValues);
            else
                addr1List.Add(null);

            if (addr1List.Count == 1)
                return queryable.ByAddr1(addr1List[0]);

            return queryable.ByAddr1(addr1List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr1(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Supplier, bool>("Addr1", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr2">Addr2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr2(this IQueryable<PetShop.Core.Data.Supplier> queryable, string addr2)
        {
            // using object equals to support nulls
            return queryable.Where(s => object.Equals(s.Addr2, addr2));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr2">Addr2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr2(this IQueryable<PetShop.Core.Data.Supplier> queryable, string addr2, ContainmentOperator containmentOperator)
        {
            if (addr2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("addr2", "Parameter 'addr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Addr2.Contains(addr2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Addr2.StartsWith(addr2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Addr2.EndsWith(addr2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Addr2.Contains(addr2) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => object.Equals(s.Addr2, addr2) == false);
                default:
                    return queryable.Where(s => object.Equals(s.Addr2, addr2));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addr2">Addr2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr2(this IQueryable<PetShop.Core.Data.Supplier> queryable, string addr2, params string[] additionalValues)
        {
            var addr2List = new List<string> { addr2 };

            if (additionalValues != null)
                addr2List.AddRange(additionalValues);
            else
                addr2List.Add(null);

            if (addr2List.Count == 1)
                return queryable.ByAddr2(addr2List[0]);

            return queryable.ByAddr2(addr2List);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Addr2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByAddr2(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Supplier, bool>("Addr2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByCity(this IQueryable<PetShop.Core.Data.Supplier> queryable, string city)
        {
            // using object equals to support nulls
            return queryable.Where(s => object.Equals(s.City, city));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByCity(this IQueryable<PetShop.Core.Data.Supplier> queryable, string city, ContainmentOperator containmentOperator)
        {
            if (city == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("city", "Parameter 'city' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.City.Contains(city));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.City.StartsWith(city));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.City.EndsWith(city));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.City.Contains(city) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => object.Equals(s.City, city) == false);
                default:
                    return queryable.Where(s => object.Equals(s.City, city));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByCity(this IQueryable<PetShop.Core.Data.Supplier> queryable, string city, params string[] additionalValues)
        {
            var cityList = new List<string> { city };

            if (additionalValues != null)
                cityList.AddRange(additionalValues);
            else
                cityList.Add(null);

            if (cityList.Count == 1)
                return queryable.ByCity(cityList[0]);

            return queryable.ByCity(cityList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByCity(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Supplier, bool>("City", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByState(this IQueryable<PetShop.Core.Data.Supplier> queryable, string state)
        {
            // using object equals to support nulls
            return queryable.Where(s => object.Equals(s.State, state));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByState(this IQueryable<PetShop.Core.Data.Supplier> queryable, string state, ContainmentOperator containmentOperator)
        {
            if (state == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("state", "Parameter 'state' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.State.Contains(state));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.State.StartsWith(state));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.State.EndsWith(state));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.State.Contains(state) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => object.Equals(s.State, state) == false);
                default:
                    return queryable.Where(s => object.Equals(s.State, state));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByState(this IQueryable<PetShop.Core.Data.Supplier> queryable, string state, params string[] additionalValues)
        {
            var stateList = new List<string> { state };

            if (additionalValues != null)
                stateList.AddRange(additionalValues);
            else
                stateList.Add(null);

            if (stateList.Count == 1)
                return queryable.ByState(stateList[0]);

            return queryable.ByState(stateList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByState(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Supplier, bool>("State", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByZip(this IQueryable<PetShop.Core.Data.Supplier> queryable, string zip)
        {
            // using object equals to support nulls
            return queryable.Where(s => object.Equals(s.Zip, zip));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByZip(this IQueryable<PetShop.Core.Data.Supplier> queryable, string zip, ContainmentOperator containmentOperator)
        {
            if (zip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("zip", "Parameter 'zip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Zip.Contains(zip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Zip.StartsWith(zip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Zip.EndsWith(zip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Zip.Contains(zip) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => object.Equals(s.Zip, zip) == false);
                default:
                    return queryable.Where(s => object.Equals(s.Zip, zip));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByZip(this IQueryable<PetShop.Core.Data.Supplier> queryable, string zip, params string[] additionalValues)
        {
            var zipList = new List<string> { zip };

            if (additionalValues != null)
                zipList.AddRange(additionalValues);
            else
                zipList.Add(null);

            if (zipList.Count == 1)
                return queryable.ByZip(zipList[0]);

            return queryable.ByZip(zipList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByZip(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Supplier, bool>("Zip", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByPhone(this IQueryable<PetShop.Core.Data.Supplier> queryable, string phone)
        {
            // using object equals to support nulls
            return queryable.Where(s => object.Equals(s.Phone, phone));
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByPhone(this IQueryable<PetShop.Core.Data.Supplier> queryable, string phone, ContainmentOperator containmentOperator)
        {
            if (phone == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("phone", "Parameter 'phone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Phone.Contains(phone));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Phone.StartsWith(phone));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Phone.EndsWith(phone));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Phone.Contains(phone) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => object.Equals(s.Phone, phone) == false);
                default:
                    return queryable.Where(s => object.Equals(s.Phone, phone));
            }
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phone">Phone to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByPhone(this IQueryable<PetShop.Core.Data.Supplier> queryable, string phone, params string[] additionalValues)
        {
            var phoneList = new List<string> { phone };

            if (additionalValues != null)
                phoneList.AddRange(additionalValues);
            else
                phoneList.Add(null);

            if (phoneList.Count == 1)
                return queryable.ByPhone(phoneList[0]);

            return queryable.ByPhone(phoneList);
        }

        /// <summary>
        /// Gets a query for <see cref="PetShop.Core.Data.Supplier.Phone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        public static IQueryable<PetShop.Core.Data.Supplier> ByPhone(this IQueryable<PetShop.Core.Data.Supplier> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<PetShop.Core.Data.Supplier, bool>("Phone", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            internal static readonly Func<PetShop.Core.Data.PetShopDataContext, int, PetShop.Core.Data.Supplier> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (PetShop.Core.Data.PetShopDataContext db, int suppId) =>
                        db.Supplier.FirstOrDefault(s => s.SuppId == suppId));

        }
        #endregion
    }
}

