#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Tracker.Core.Data
{
    /// <summary>
    /// The query extension class for Self.
    /// </summary>
    public static partial class SelfExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Tracker.Core.Data.Self GetByKey(this IQueryable<Tracker.Core.Data.Self> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Core.Data.Self>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((Tracker.Core.Data.TrackerDataContext)entity.Context, id);

            return queryable.FirstOrDefault(s => s.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<Tracker.Core.Data.Self> table, int id)
        {
            return table.Delete(s => s.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ById(this IQueryable<Tracker.Core.Data.Self> queryable, int id)
        {
            return queryable.Where(s => s.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ById(this IQueryable<Tracker.Core.Data.Self> queryable, ComparisonOperator comparisonOperator, int id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Id != id);
                default:
                    return queryable.Where(s => s.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ById(this IQueryable<Tracker.Core.Data.Self> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ById(this IQueryable<Tracker.Core.Data.Self> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.MySelfId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mySelfId">MySelfId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByMySelfId(this IQueryable<Tracker.Core.Data.Self> queryable, int? mySelfId)
        {
            // support nulls
            return mySelfId == null 
                ? queryable.Where(s => s.MySelfId == null) 
                : queryable.Where(s => s.MySelfId == mySelfId);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.MySelfId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mySelfId">MySelfId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByMySelfId(this IQueryable<Tracker.Core.Data.Self> queryable, ComparisonOperator comparisonOperator, int? mySelfId)
        {
            if (mySelfId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("mySelfId", "Parameter 'mySelfId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.MySelfId > mySelfId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.MySelfId >= mySelfId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.MySelfId < mySelfId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.MySelfId <= mySelfId);
                case ComparisonOperator.NotEquals:
                    return mySelfId == null 
                        ? queryable.Where(s => s.MySelfId != null) 
                        : queryable.Where(s => s.MySelfId != mySelfId);
                default:
                    return mySelfId == null 
                        ? queryable.Where(s => s.MySelfId == null) 
                        : queryable.Where(s => s.MySelfId == mySelfId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.MySelfId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mySelfId">MySelfId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByMySelfId(this IQueryable<Tracker.Core.Data.Self> queryable, int? mySelfId, params int?[] additionalValues)
        {
            var mySelfIdList = new List<int?> { mySelfId };

            if (additionalValues != null)
                mySelfIdList.AddRange(additionalValues);
            else
                mySelfIdList.Add(null);

            if (mySelfIdList.Count == 1)
                return queryable.ByMySelfId(mySelfIdList[0]);

            return queryable.ByMySelfId(mySelfIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.MySelfId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByMySelfId(this IQueryable<Tracker.Core.Data.Self> queryable, IEnumerable<int?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Core.Data.Self, bool>("MySelfId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByName(this IQueryable<Tracker.Core.Data.Self> queryable, string name)
        {
            return queryable.Where(s => s.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByName(this IQueryable<Tracker.Core.Data.Self> queryable, ContainmentOperator containmentOperator, string name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Name != name);
                default:
                    return queryable.Where(s => s.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByName(this IQueryable<Tracker.Core.Data.Self> queryable, string name, params string[] additionalValues)
        {
            var nameList = new List<string> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.Self.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Tracker.Core.Data.Self> ByName(this IQueryable<Tracker.Core.Data.Self> queryable, IEnumerable<string> values)
        {
            return queryable.Where(s => values.Contains(s.Name));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<Tracker.Core.Data.TrackerDataContext, int, Tracker.Core.Data.Self> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Core.Data.TrackerDataContext db, int id) =>
                        db.Self.FirstOrDefault(s => s.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591

