#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Tracker.Core.Data
{
    /// <summary>
    /// The query extension class for User.
    /// </summary>
    public static partial class UserExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Tracker.Core.Data.User GetByKey(this IQueryable<Tracker.Core.Data.User> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Core.Data.User>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((Tracker.Core.Data.TrackerDataContext)entity.Context, id);

            return queryable.FirstOrDefault(u => u.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<Tracker.Core.Data.User> table, int id)
        {
            return table.Delete(u => u.Id == id);
        }

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static Tracker.Core.Data.User GetByEmailAddress(this IQueryable<Tracker.Core.Data.User> queryable, string emailAddress)
        {
            var entity = queryable as System.Data.Linq.Table<Tracker.Core.Data.User>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByEmailAddress.Invoke((Tracker.Core.Data.TrackerDataContext)entity.Context, emailAddress);

            return queryable.FirstOrDefault(u => u.EmailAddress == emailAddress);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ById(this IQueryable<Tracker.Core.Data.User> queryable, int id)
        {
            return queryable.Where(u => u.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ById(this IQueryable<Tracker.Core.Data.User> queryable, ComparisonOperator comparisonOperator, int id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.Id != id);
                default:
                    return queryable.Where(u => u.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ById(this IQueryable<Tracker.Core.Data.User> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ById(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<int> values)
        {
            return queryable.Where(u => values.Contains(u.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.EmailAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailAddress">EmailAddress to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByEmailAddress(this IQueryable<Tracker.Core.Data.User> queryable, string emailAddress)
        {
            return queryable.Where(u => u.EmailAddress == emailAddress);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.EmailAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailAddress">EmailAddress to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByEmailAddress(this IQueryable<Tracker.Core.Data.User> queryable, ContainmentOperator containmentOperator, string emailAddress)
        {
            if (emailAddress == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("emailAddress", "Parameter 'emailAddress' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.EmailAddress.Contains(emailAddress));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.EmailAddress.StartsWith(emailAddress));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.EmailAddress.EndsWith(emailAddress));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.EmailAddress.Contains(emailAddress) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.EmailAddress != emailAddress);
                default:
                    return queryable.Where(u => u.EmailAddress == emailAddress);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.EmailAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailAddress">EmailAddress to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByEmailAddress(this IQueryable<Tracker.Core.Data.User> queryable, string emailAddress, params string[] additionalValues)
        {
            var emailAddressList = new List<string> { emailAddress };

            if (additionalValues != null)
                emailAddressList.AddRange(additionalValues);

            if (emailAddressList.Count == 1)
                return queryable.ByEmailAddress(emailAddressList[0]);

            return queryable.ByEmailAddress(emailAddressList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.EmailAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByEmailAddress(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.EmailAddress));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByFirstName(this IQueryable<Tracker.Core.Data.User> queryable, string firstName)
        {
            // support nulls
            return firstName == null 
                ? queryable.Where(u => u.FirstName == null) 
                : queryable.Where(u => u.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByFirstName(this IQueryable<Tracker.Core.Data.User> queryable, ContainmentOperator containmentOperator, string firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return firstName == null 
                        ? queryable.Where(u => u.FirstName != null) 
                        : queryable.Where(u => u.FirstName != firstName);
                default:
                    return firstName == null 
                        ? queryable.Where(u => u.FirstName == null) 
                        : queryable.Where(u => u.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByFirstName(this IQueryable<Tracker.Core.Data.User> queryable, string firstName, params string[] additionalValues)
        {
            var firstNameList = new List<string> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);
            else
                firstNameList.Add(null);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByFirstName(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Core.Data.User, bool>("FirstName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastName(this IQueryable<Tracker.Core.Data.User> queryable, string lastName)
        {
            // support nulls
            return lastName == null 
                ? queryable.Where(u => u.LastName == null) 
                : queryable.Where(u => u.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastName(this IQueryable<Tracker.Core.Data.User> queryable, ContainmentOperator containmentOperator, string lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return lastName == null 
                        ? queryable.Where(u => u.LastName != null) 
                        : queryable.Where(u => u.LastName != lastName);
                default:
                    return lastName == null 
                        ? queryable.Where(u => u.LastName == null) 
                        : queryable.Where(u => u.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastName(this IQueryable<Tracker.Core.Data.User> queryable, string lastName, params string[] additionalValues)
        {
            var lastNameList = new List<string> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);
            else
                lastNameList.Add(null);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastName(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Core.Data.User, bool>("LastName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByCreatedDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime createdDate)
        {
            return queryable.Where(u => u.CreatedDate == createdDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByCreatedDate(this IQueryable<Tracker.Core.Data.User> queryable, ComparisonOperator comparisonOperator, System.DateTime createdDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.CreatedDate > createdDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.CreatedDate >= createdDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.CreatedDate < createdDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.CreatedDate <= createdDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.CreatedDate != createdDate);
                default:
                    return queryable.Where(u => u.CreatedDate == createdDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByCreatedDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> { createdDate };

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            return queryable.ByCreatedDate(createdDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByCreatedDate(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(u => values.Contains(u.CreatedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByModifiedDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime modifiedDate)
        {
            return queryable.Where(u => u.ModifiedDate == modifiedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByModifiedDate(this IQueryable<Tracker.Core.Data.User> queryable, ComparisonOperator comparisonOperator, System.DateTime modifiedDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.ModifiedDate > modifiedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.ModifiedDate >= modifiedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.ModifiedDate < modifiedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.ModifiedDate <= modifiedDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.ModifiedDate != modifiedDate);
                default:
                    return queryable.Where(u => u.ModifiedDate == modifiedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedDate">ModifiedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByModifiedDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime modifiedDate, params System.DateTime[] additionalValues)
        {
            var modifiedDateList = new List<System.DateTime> { modifiedDate };

            if (additionalValues != null)
                modifiedDateList.AddRange(additionalValues);

            if (modifiedDateList.Count == 1)
                return queryable.ByModifiedDate(modifiedDateList[0]);

            return queryable.ByModifiedDate(modifiedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.ModifiedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByModifiedDate(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(u => values.Contains(u.ModifiedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordHash(this IQueryable<Tracker.Core.Data.User> queryable, string passwordHash)
        {
            return queryable.Where(u => u.PasswordHash == passwordHash);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordHash(this IQueryable<Tracker.Core.Data.User> queryable, ContainmentOperator containmentOperator, string passwordHash)
        {
            if (passwordHash == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("passwordHash", "Parameter 'passwordHash' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.PasswordHash.Contains(passwordHash));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.PasswordHash.StartsWith(passwordHash));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.PasswordHash.EndsWith(passwordHash));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.PasswordHash.Contains(passwordHash) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.PasswordHash != passwordHash);
                default:
                    return queryable.Where(u => u.PasswordHash == passwordHash);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordHash(this IQueryable<Tracker.Core.Data.User> queryable, string passwordHash, params string[] additionalValues)
        {
            var passwordHashList = new List<string> { passwordHash };

            if (additionalValues != null)
                passwordHashList.AddRange(additionalValues);

            if (passwordHashList.Count == 1)
                return queryable.ByPasswordHash(passwordHashList[0]);

            return queryable.ByPasswordHash(passwordHashList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordHash(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.PasswordHash));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordSalt">PasswordSalt to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordSalt(this IQueryable<Tracker.Core.Data.User> queryable, string passwordSalt)
        {
            return queryable.Where(u => u.PasswordSalt == passwordSalt);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordSalt">PasswordSalt to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordSalt(this IQueryable<Tracker.Core.Data.User> queryable, ContainmentOperator containmentOperator, string passwordSalt)
        {
            if (passwordSalt == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("passwordSalt", "Parameter 'passwordSalt' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.PasswordSalt.Contains(passwordSalt));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.PasswordSalt.StartsWith(passwordSalt));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.PasswordSalt.EndsWith(passwordSalt));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.PasswordSalt.Contains(passwordSalt) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.PasswordSalt != passwordSalt);
                default:
                    return queryable.Where(u => u.PasswordSalt == passwordSalt);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordSalt">PasswordSalt to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordSalt(this IQueryable<Tracker.Core.Data.User> queryable, string passwordSalt, params string[] additionalValues)
        {
            var passwordSaltList = new List<string> { passwordSalt };

            if (additionalValues != null)
                passwordSaltList.AddRange(additionalValues);

            if (passwordSaltList.Count == 1)
                return queryable.ByPasswordSalt(passwordSaltList[0]);

            return queryable.ByPasswordSalt(passwordSaltList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByPasswordSalt(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.PasswordSalt));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Comment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comment">Comment to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByComment(this IQueryable<Tracker.Core.Data.User> queryable, string comment)
        {
            // support nulls
            return comment == null 
                ? queryable.Where(u => u.Comment == null) 
                : queryable.Where(u => u.Comment == comment);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Comment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comment">Comment to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByComment(this IQueryable<Tracker.Core.Data.User> queryable, ContainmentOperator containmentOperator, string comment)
        {
            if (comment == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("comment", "Parameter 'comment' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Comment.Contains(comment));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Comment.StartsWith(comment));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Comment.EndsWith(comment));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Comment.Contains(comment) == false);
                case ContainmentOperator.NotEquals:
                    return comment == null 
                        ? queryable.Where(u => u.Comment != null) 
                        : queryable.Where(u => u.Comment != comment);
                default:
                    return comment == null 
                        ? queryable.Where(u => u.Comment == null) 
                        : queryable.Where(u => u.Comment == comment);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Comment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comment">Comment to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByComment(this IQueryable<Tracker.Core.Data.User> queryable, string comment, params string[] additionalValues)
        {
            var commentList = new List<string> { comment };

            if (additionalValues != null)
                commentList.AddRange(additionalValues);
            else
                commentList.Add(null);

            if (commentList.Count == 1)
                return queryable.ByComment(commentList[0]);

            return queryable.ByComment(commentList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.Comment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByComment(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Core.Data.User, bool>("Comment", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.IsApproved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isApproved">IsApproved to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByIsApproved(this IQueryable<Tracker.Core.Data.User> queryable, bool isApproved)
        {
            return queryable.Where(u => u.IsApproved == isApproved);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.IsApproved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isApproved">IsApproved to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByIsApproved(this IQueryable<Tracker.Core.Data.User> queryable, ComparisonOperator comparisonOperator, bool isApproved)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.IsApproved != isApproved);
                default:
                    return queryable.Where(u => u.IsApproved == isApproved);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.IsApproved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isApproved">IsApproved to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByIsApproved(this IQueryable<Tracker.Core.Data.User> queryable, bool isApproved, params bool[] additionalValues)
        {
            var isApprovedList = new List<bool> { isApproved };

            if (additionalValues != null)
                isApprovedList.AddRange(additionalValues);

            if (isApprovedList.Count == 1)
                return queryable.ByIsApproved(isApprovedList[0]);

            return queryable.ByIsApproved(isApprovedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.IsApproved"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByIsApproved(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(u => values.Contains(u.IsApproved));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastLoginDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastLoginDate">LastLoginDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastLoginDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime? lastLoginDate)
        {
            // support nulls
            return lastLoginDate == null 
                ? queryable.Where(u => u.LastLoginDate == null) 
                : queryable.Where(u => u.LastLoginDate == lastLoginDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastLoginDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastLoginDate">LastLoginDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastLoginDate(this IQueryable<Tracker.Core.Data.User> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastLoginDate)
        {
            if (lastLoginDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastLoginDate", "Parameter 'lastLoginDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.LastLoginDate > lastLoginDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.LastLoginDate >= lastLoginDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.LastLoginDate < lastLoginDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.LastLoginDate <= lastLoginDate);
                case ComparisonOperator.NotEquals:
                    return lastLoginDate == null 
                        ? queryable.Where(u => u.LastLoginDate != null) 
                        : queryable.Where(u => u.LastLoginDate != lastLoginDate);
                default:
                    return lastLoginDate == null 
                        ? queryable.Where(u => u.LastLoginDate == null) 
                        : queryable.Where(u => u.LastLoginDate == lastLoginDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastLoginDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastLoginDate">LastLoginDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastLoginDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime? lastLoginDate, params System.DateTime?[] additionalValues)
        {
            var lastLoginDateList = new List<System.DateTime?> { lastLoginDate };

            if (additionalValues != null)
                lastLoginDateList.AddRange(additionalValues);
            else
                lastLoginDateList.Add(null);

            if (lastLoginDateList.Count == 1)
                return queryable.ByLastLoginDate(lastLoginDateList[0]);

            return queryable.ByLastLoginDate(lastLoginDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastLoginDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastLoginDate(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Core.Data.User, bool>("LastLoginDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastActivityDate">LastActivityDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastActivityDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime lastActivityDate)
        {
            return queryable.Where(u => u.LastActivityDate == lastActivityDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastActivityDate">LastActivityDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastActivityDate(this IQueryable<Tracker.Core.Data.User> queryable, ComparisonOperator comparisonOperator, System.DateTime lastActivityDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.LastActivityDate > lastActivityDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.LastActivityDate >= lastActivityDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.LastActivityDate < lastActivityDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.LastActivityDate <= lastActivityDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.LastActivityDate != lastActivityDate);
                default:
                    return queryable.Where(u => u.LastActivityDate == lastActivityDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastActivityDate">LastActivityDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastActivityDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime lastActivityDate, params System.DateTime[] additionalValues)
        {
            var lastActivityDateList = new List<System.DateTime> { lastActivityDate };

            if (additionalValues != null)
                lastActivityDateList.AddRange(additionalValues);

            if (lastActivityDateList.Count == 1)
                return queryable.ByLastActivityDate(lastActivityDateList[0]);

            return queryable.ByLastActivityDate(lastActivityDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastActivityDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastActivityDate(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(u => values.Contains(u.LastActivityDate));
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastPasswordChangeDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastPasswordChangeDate">LastPasswordChangeDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastPasswordChangeDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime? lastPasswordChangeDate)
        {
            // support nulls
            return lastPasswordChangeDate == null 
                ? queryable.Where(u => u.LastPasswordChangeDate == null) 
                : queryable.Where(u => u.LastPasswordChangeDate == lastPasswordChangeDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastPasswordChangeDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastPasswordChangeDate">LastPasswordChangeDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastPasswordChangeDate(this IQueryable<Tracker.Core.Data.User> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastPasswordChangeDate)
        {
            if (lastPasswordChangeDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastPasswordChangeDate", "Parameter 'lastPasswordChangeDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.LastPasswordChangeDate > lastPasswordChangeDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.LastPasswordChangeDate >= lastPasswordChangeDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.LastPasswordChangeDate < lastPasswordChangeDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.LastPasswordChangeDate <= lastPasswordChangeDate);
                case ComparisonOperator.NotEquals:
                    return lastPasswordChangeDate == null 
                        ? queryable.Where(u => u.LastPasswordChangeDate != null) 
                        : queryable.Where(u => u.LastPasswordChangeDate != lastPasswordChangeDate);
                default:
                    return lastPasswordChangeDate == null 
                        ? queryable.Where(u => u.LastPasswordChangeDate == null) 
                        : queryable.Where(u => u.LastPasswordChangeDate == lastPasswordChangeDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastPasswordChangeDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastPasswordChangeDate">LastPasswordChangeDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastPasswordChangeDate(this IQueryable<Tracker.Core.Data.User> queryable, System.DateTime? lastPasswordChangeDate, params System.DateTime?[] additionalValues)
        {
            var lastPasswordChangeDateList = new List<System.DateTime?> { lastPasswordChangeDate };

            if (additionalValues != null)
                lastPasswordChangeDateList.AddRange(additionalValues);
            else
                lastPasswordChangeDateList.Add(null);

            if (lastPasswordChangeDateList.Count == 1)
                return queryable.ByLastPasswordChangeDate(lastPasswordChangeDateList[0]);

            return queryable.ByLastPasswordChangeDate(lastPasswordChangeDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.LastPasswordChangeDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByLastPasswordChangeDate(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Core.Data.User, bool>("LastPasswordChangeDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.AvatarType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarType">AvatarType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByAvatarType(this IQueryable<Tracker.Core.Data.User> queryable, string avatarType)
        {
            // support nulls
            return avatarType == null 
                ? queryable.Where(u => u.AvatarType == null) 
                : queryable.Where(u => u.AvatarType == avatarType);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.AvatarType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarType">AvatarType to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByAvatarType(this IQueryable<Tracker.Core.Data.User> queryable, ContainmentOperator containmentOperator, string avatarType)
        {
            if (avatarType == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("avatarType", "Parameter 'avatarType' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.AvatarType.Contains(avatarType));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.AvatarType.StartsWith(avatarType));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.AvatarType.EndsWith(avatarType));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.AvatarType.Contains(avatarType) == false);
                case ContainmentOperator.NotEquals:
                    return avatarType == null 
                        ? queryable.Where(u => u.AvatarType != null) 
                        : queryable.Where(u => u.AvatarType != avatarType);
                default:
                    return avatarType == null 
                        ? queryable.Where(u => u.AvatarType == null) 
                        : queryable.Where(u => u.AvatarType == avatarType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.AvatarType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarType">AvatarType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByAvatarType(this IQueryable<Tracker.Core.Data.User> queryable, string avatarType, params string[] additionalValues)
        {
            var avatarTypeList = new List<string> { avatarType };

            if (additionalValues != null)
                avatarTypeList.AddRange(additionalValues);
            else
                avatarTypeList.Add(null);

            if (avatarTypeList.Count == 1)
                return queryable.ByAvatarType(avatarTypeList[0]);

            return queryable.ByAvatarType(avatarTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Tracker.Core.Data.User.AvatarType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static IQueryable<Tracker.Core.Data.User> ByAvatarType(this IQueryable<Tracker.Core.Data.User> queryable, IEnumerable<string> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Tracker.Core.Data.User, bool>("AvatarType", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<Tracker.Core.Data.TrackerDataContext, int, Tracker.Core.Data.User> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Core.Data.TrackerDataContext db, int id) =>
                        db.User.FirstOrDefault(u => u.Id == id));
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<Tracker.Core.Data.TrackerDataContext, string, Tracker.Core.Data.User> GetByEmailAddress =
                System.Data.Linq.CompiledQuery.Compile(
                    (Tracker.Core.Data.TrackerDataContext db, string emailAddress) =>
                        db.User.FirstOrDefault(u => u.EmailAddress == emailAddress));

        }
        #endregion
    }
}
#pragma warning restore 1591

