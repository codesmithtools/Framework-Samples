'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO Not MODIfY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Linq

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The class representing the dbo.Cart table.
    ''' </summary>
    <System.Data.Linq.Mapping.Table(Name:="dbo.Cart")> _
    <System.Runtime.Serialization.DataContract(IsReference:=True)> _
    <System.ComponentModel.DataAnnotations.ScaffoldTable(True)> _
    <System.ComponentModel.DataAnnotations.MetadataType(GetType(Cart.Metadata))> _
    <System.Data.Services.Common.DataServiceKey("CartID")> _
    <System.Diagnostics.DebuggerDisplay("CartID: {CartID}")> _
    Partial Public Class Cart
        Inherits LinqEntityBase
        Implements ICloneable

#Region "Static Constructor"
        ''' <summary>
        ''' Initializes the <see cref="Cart"/> class.
        ''' </summary>
        Shared Sub New()
            AddSharedRules()
        End Sub
#End Region

#Region "Default Constructor"
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Cart"/> class.
        ''' </summary>
        <System.Diagnostics.DebuggerNonUserCode()> _
        Public Sub New()
            Initialize()
        End Sub

        Private Sub Initialize()
            _profile = Nothing
            OnCreated()
        End Sub
#End Region

#Region "Column Mapped Properties"

        Private _cartID As Integer = Nothing

        ''' <summary>
        ''' Gets the CartID column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="CartID", Storage:="_cartID", DbType:="int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True, CanBeNull:=False)> _
        <System.Runtime.Serialization.DataMember(Order:=1)> _
        Public Property CartID() As Integer
            Get
                Return _cartID
            End Get
            Set(ByVal value As Integer)
                If ((Me._cartID = value) = False) Then
                    OnCartIDChanging(value)
                    SendPropertyChanging("CartID")
                    _cartID = value
                    SendPropertyChanged("CartID")
                    OnCartIDChanged()
                End If
            End Set
        End Property

        Private _uniqueID As Integer

        ''' <summary>
        ''' Gets or sets the UniqueID column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="UniqueID", Storage:="_uniqueID", DbType:="int NOT NULL", CanBeNull:=False)> _
        <System.Runtime.Serialization.DataMember(Order:=2)> _
        Public Property UniqueID() As Integer
            Get
                Return _uniqueID
            End Get
            Set(ByVal value As Integer)
                If ((Me._uniqueID = value) = False) Then
                    If (_profile.HasLoadedOrAssignedValue) Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    OnUniqueIDChanging(value)
                    SendPropertyChanging("UniqueID")
                    _uniqueID = value
                    SendPropertyChanged("UniqueID")
                    OnUniqueIDChanged()
                End If
            End Set
        End Property

        Private _itemId As String

        ''' <summary>
        ''' Gets or sets the ItemId column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="ItemId", Storage:="_itemId", DbType:="varchar(10) NOT NULL", CanBeNull:=False)> _
        <ComponentModel.DataAnnotations.StringLength(10)> _
        <System.Runtime.Serialization.DataMember(Order:=3)> _
        Public Property ItemId() As String
            Get
                Return _itemId
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._itemId, value) = False) Then
                    OnItemIdChanging(value)
                    SendPropertyChanging("ItemId")
                    _itemId = value
                    SendPropertyChanged("ItemId")
                    OnItemIdChanged()
                End If
            End Set
        End Property

        Private _name As String

        ''' <summary>
        ''' Gets or sets the Name column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Name", Storage:="_name", DbType:="varchar(80) NOT NULL", CanBeNull:=False)> _
        <ComponentModel.DataAnnotations.StringLength(80)> _
        <System.Runtime.Serialization.DataMember(Order:=4)> _
        Public Property Name() As String
            Get
                Return _name
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._name, value) = False) Then
                    OnNameChanging(value)
                    SendPropertyChanging("Name")
                    _name = value
                    SendPropertyChanged("Name")
                    OnNameChanged()
                End If
            End Set
        End Property

        Private _type As String

        ''' <summary>
        ''' Gets or sets the Type column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Type", Storage:="_type", DbType:="varchar(80) NOT NULL", CanBeNull:=False)> _
        <ComponentModel.DataAnnotations.StringLength(80)> _
        <System.Runtime.Serialization.DataMember(Order:=5)> _
        Public Property Type() As String
            Get
                Return _type
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._type, value) = False) Then
                    OnTypeChanging(value)
                    SendPropertyChanging("Type")
                    _type = value
                    SendPropertyChanged("Type")
                    OnTypeChanged()
                End If
            End Set
        End Property

        Private _price As Decimal

        ''' <summary>
        ''' Gets or sets the Price column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Price", Storage:="_price", DbType:="decimal(10,2) NOT NULL", CanBeNull:=False)> _
        <System.Runtime.Serialization.DataMember(Order:=6)> _
        Public Property Price() As Decimal
            Get
                Return _price
            End Get
            Set(ByVal value As Decimal)
                If ((Me._price = value) = False) Then
                    OnPriceChanging(value)
                    SendPropertyChanging("Price")
                    _price = value
                    SendPropertyChanged("Price")
                    OnPriceChanged()
                End If
            End Set
        End Property

        Private _categoryId As String

        ''' <summary>
        ''' Gets or sets the CategoryId column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="CategoryId", Storage:="_categoryId", DbType:="varchar(10) NOT NULL", CanBeNull:=False)> _
        <ComponentModel.DataAnnotations.StringLength(10)> _
        <System.Runtime.Serialization.DataMember(Order:=7)> _
        Public Property CategoryId() As String
            Get
                Return _categoryId
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._categoryId, value) = False) Then
                    OnCategoryIdChanging(value)
                    SendPropertyChanging("CategoryId")
                    _categoryId = value
                    SendPropertyChanged("CategoryId")
                    OnCategoryIdChanged()
                End If
            End Set
        End Property

        Private _productId As String

        ''' <summary>
        ''' Gets or sets the ProductId column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="ProductId", Storage:="_productId", DbType:="varchar(10) NOT NULL", CanBeNull:=False)> _
        <ComponentModel.DataAnnotations.StringLength(10)> _
        <System.Runtime.Serialization.DataMember(Order:=8)> _
        Public Property ProductId() As String
            Get
                Return _productId
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._productId, value) = False) Then
                    OnProductIdChanging(value)
                    SendPropertyChanging("ProductId")
                    _productId = value
                    SendPropertyChanged("ProductId")
                    OnProductIdChanged()
                End If
            End Set
        End Property

        Private _isShoppingCart As Boolean

        ''' <summary>
        ''' Gets or sets the IsShoppingCart column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="IsShoppingCart", Storage:="_isShoppingCart", DbType:="bit NOT NULL", CanBeNull:=False)> _
        <System.Runtime.Serialization.DataMember(Order:=9)> _
        Public Property IsShoppingCart() As Boolean
            Get
                Return _isShoppingCart
            End Get
            Set(ByVal value As Boolean)
                If ((Me._isShoppingCart = value) = False) Then
                    OnIsShoppingCartChanging(value)
                    SendPropertyChanging("IsShoppingCart")
                    _isShoppingCart = value
                    SendPropertyChanged("IsShoppingCart")
                    OnIsShoppingCartChanged()
                End If
            End Set
        End Property

        Private _quantity As Integer

        ''' <summary>
        ''' Gets or sets the Quantity column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Quantity", Storage:="_quantity", DbType:="int NOT NULL", CanBeNull:=False)> _
        <System.Runtime.Serialization.DataMember(Order:=10)> _
        Public Property Quantity() As Integer
            Get
                Return _quantity
            End Get
            Set(ByVal value As Integer)
                If ((Me._quantity = value) = False) Then
                    OnQuantityChanging(value)
                    SendPropertyChanging("Quantity")
                    _quantity = value
                    SendPropertyChanged("Quantity")
                    OnQuantityChanged()
                End If
            End Set
        End Property

        Private _createdDate As Nullable(Of Date)

        ''' <summary>
        ''' Gets or sets the CreatedDate column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="CreatedDate", Storage:="_createdDate", DbType:="datetime")> _
        <System.Runtime.Serialization.DataMember(Order:=11)> _
        Public Property CreatedDate() As Nullable(Of Date)
            Get
                Return _createdDate
            End Get
            Set(ByVal value As Nullable(Of Date))
                If (Me._createdDate.Equals(value) = False) Then
                    OnCreatedDateChanging(value)
                    SendPropertyChanging("CreatedDate")
                    _createdDate = value
                    SendPropertyChanged("CreatedDate")
                    OnCreatedDateChanged()
                End If
            End Set
        End Property
#End Region

#Region "Association Mapped Properties"

        Private  _profile As System.Data.Linq.EntityRef(Of Profile)

        ''' <summary>
        ''' Gets or sets the Profile association.
        ''' </summary>
        <System.Data.Linq.Mapping.Association(Name:="Profile_Cart", Storage:="_profile", ThisKey:="UniqueID", OtherKey:="UniqueID", IsUnique:=true, IsForeignKey:=true, DeleteRule:="CASCADE")> _
        <System.Runtime.Serialization.DataMember(Order:=12, EmitDefaultValue:=False)> _
        Public Property Profile() As Profile
            Get
                If (serializing AndAlso Not _profile.HasLoadedOrAssignedValue) Then
                    Return Nothing
                Else
                    Return _profile.Entity
                End If
            End Get
            Set(ByVal value As Profile)
                Dim previousValue As Profile = _profile.Entity
                If ((Object.Equals(previousValue, value) = False) OrElse (Me._profile.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging("Profile")
                    If ((previousValue Is Nothing) = False) Then
                        _profile.Entity = Nothing
                        previousValue.CartList.Remove(Me)
                    End If
                    _profile.Entity = value
                    If ((value Is Nothing) = False) Then
                        value.CartList.Add(Me)
                        _uniqueID = value.UniqueID
                    Else
                        _uniqueID = Nothing
                    End If
                    SendPropertyChanged("Profile")
                End If
            End Set
        End Property
#End Region

#Region "Extensibility Method Definitions"

        ''' <summary>Called by the Shared constructor to add shared rules.</summary>
        Partial Private Shared Sub AddSharedRules()
        End Sub
        ''' <summary>Called when this instance is loaded.</summary>
        Partial Private Sub OnLoaded()
        End Sub
        ''' <summary>Called when this instance is being saved.</summary>
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        ''' <summary>Called when this instance is created.</summary>
        Partial Private Sub OnCreated()
        End Sub
        ''' <summary>Called when CartID is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnCartIDChanging(ByVal value As Integer)
        End Sub
        ''' <summary>Called after CartID has Changed.</summary>
        Partial Private Sub OnCartIDChanged()
        End Sub
        ''' <summary>Called when UniqueID is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnUniqueIDChanging(ByVal value As Integer)
        End Sub
        ''' <summary>Called after UniqueID has Changed.</summary>
        Partial Private Sub OnUniqueIDChanged()
        End Sub
        ''' <summary>Called when ItemId is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnItemIdChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after ItemId has Changed.</summary>
        Partial Private Sub OnItemIdChanged()
        End Sub
        ''' <summary>Called when Name is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Name has Changed.</summary>
        Partial Private Sub OnNameChanged()
        End Sub
        ''' <summary>Called when Type is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnTypeChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Type has Changed.</summary>
        Partial Private Sub OnTypeChanged()
        End Sub
        ''' <summary>Called when Price is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnPriceChanging(ByVal value As Decimal)
        End Sub
        ''' <summary>Called after Price has Changed.</summary>
        Partial Private Sub OnPriceChanged()
        End Sub
        ''' <summary>Called when CategoryId is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnCategoryIdChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after CategoryId has Changed.</summary>
        Partial Private Sub OnCategoryIdChanged()
        End Sub
        ''' <summary>Called when ProductId is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnProductIdChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after ProductId has Changed.</summary>
        Partial Private Sub OnProductIdChanged()
        End Sub
        ''' <summary>Called when IsShoppingCart is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnIsShoppingCartChanging(ByVal value As Boolean)
        End Sub
        ''' <summary>Called after IsShoppingCart has Changed.</summary>
        Partial Private Sub OnIsShoppingCartChanged()
        End Sub
        ''' <summary>Called when Quantity is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnQuantityChanging(ByVal value As Integer)
        End Sub
        ''' <summary>Called after Quantity has Changed.</summary>
        Partial Private Sub OnQuantityChanged()
        End Sub
        ''' <summary>Called when CreatedDate is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnCreatedDateChanging(ByVal value As Nullable(Of Date))
        End Sub
        ''' <summary>Called after CreatedDate has Changed.</summary>
        Partial Private Sub OnCreatedDateChanged()
        End Sub
#End Region

#Region "Serialization"

        Private serializing As Boolean

        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnSerializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = True
        End Sub

        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerialized(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnSerialized(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = False
        End Sub

        ''' <summary>
        ''' Called when deserializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnDeserializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnDeserializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            Initialize()
        End Sub
        
        ''' <summary>
        ''' Deserializes an instance of <see cref="Cart"/> from XML.
        ''' </summary>
        ''' <param name="xml">The XML string representing a <see cref="Cart"/> instance.</param>
        ''' <returns>An instance of <see cref="Cart"/> that is deserialized from the XML string.</returns>
        Public Shared Function FromXml(ByVal xml As String) As Cart
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(Cart))
            
            Using sr = New System.IO.StringReader(xml)
                Using reader = System.Xml.XmlReader.Create(sr)
                    Return TryCast(deserializer.ReadObject(reader), Cart)
                End Using
            End Using
        End Function

        ''' <summary>
        ''' Deserializes an instance of <see cref="Cart"/>.
        ''' </summary>
        ''' <param name="buffer">The byte array representing a <see cref="Cart"/> instance.</param>
        ''' <returns>An instance of <see cref="Cart"/> that is deserialized from the byte array.</returns>
        Public Shared Function FromBinary(ByVal buffer As Byte()) As Cart
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(Cart))

            Using ms = New System.IO.MemoryStream(buffer)
                Using reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max)
                    Return TryCast(deserializer.ReadObject(reader), Cart)
                End Using
            End Using
        End Function
#End Region

#Region "Clone"
        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        Private Function ICloneable_Clone() As Object Implements ICloneable.Clone
            Dim serializer As New System.Runtime.Serialization.DataContractSerializer([GetType]())
            Using ms As New System.IO.MemoryStream()
                serializer.WriteObject(ms, Me)
                ms.Position = 0
                Return serializer.ReadObject(ms)
            End Using
        End Function

        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        ''' <remarks>
        ''' This method is equivalent to a Detach from the current <see cref="System.Data.Linq.DataContext"/>.
        ''' Only loaded EntityRef and EntitySet child accessions will be cloned.
        ''' </remarks>
        Public Function Clone() As Cart
            Return DirectCast(DirectCast(Me, ICloneable).Clone(), Cart)
        End Function
#End Region

#Region "Detach Methods"
        ''' <summary>
        ''' Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' Detaching the entity will allow it to be attached to another <see cref="System.Data.Linq.DataContext"/>.
        ''' </remarks>
        Public Overrides Sub Detach()

            If (Not IsAttached()) Then
                Return
            End If

            MyBase.Detach()
            _profile = Detach(_profile)
        End Sub
#End Region
    End Class
End Namespace

