'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO Not MODIfY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Linq

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The class representing the dbo.Supplier table.
    ''' </summary>
    <System.Data.Linq.Mapping.Table(Name:="dbo.Supplier")> _
    <System.Runtime.Serialization.DataContract(IsReference:=True)> _
    <System.ComponentModel.DataAnnotations.ScaffoldTable(True)> _
    <System.ComponentModel.DataAnnotations.MetadataType(GetType(Supplier.Metadata))> _
    <System.Data.Services.Common.DataServiceKey("SuppId")> _
    <System.Diagnostics.DebuggerDisplay("SuppId: {SuppId}")> _
    Partial Public Class Supplier
        Inherits LinqEntityBase
        Implements ICloneable

#Region "Static Constructor"
        ''' <summary>
        ''' Initializes the <see cref="Supplier"/> class.
        ''' </summary>
        Shared Sub New()
            AddSharedRules()
        End Sub
#End Region

#Region "Default Constructor"
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Supplier"/> class.
        ''' </summary>
        <System.Diagnostics.DebuggerNonUserCode()> _
        Public Sub New()
            Initialize()
        End Sub

        Private Sub Initialize()
            OnCreated()
        End Sub
#End Region

#Region "Column Mapped Properties"

        Private _suppId As Integer

        ''' <summary>
        ''' Gets or sets the SuppId column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="SuppId", Storage:="_suppId", DbType:="int NOT NULL", IsPrimaryKey:=True, CanBeNull:=False)> _
        <System.Runtime.Serialization.DataMember(Order:=1)> _
        Public Property SuppId() As Integer
            Get
                Return _suppId
            End Get
            Set(ByVal value As Integer)
                If ((Me._suppId = value) = False) Then
                    OnSuppIdChanging(value)
                    SendPropertyChanging("SuppId")
                    _suppId = value
                    SendPropertyChanged("SuppId")
                    OnSuppIdChanged()
                End If
            End Set
        End Property

        Private _name As String

        ''' <summary>
        ''' Gets or sets the Name column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Name", Storage:="_name", DbType:="varchar(80)")> _
        <ComponentModel.DataAnnotations.StringLength(80)> _
        <System.Runtime.Serialization.DataMember(Order:=2)> _
        Public Property Name() As String
            Get
                Return _name
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._name, value) = False) Then
                    OnNameChanging(value)
                    SendPropertyChanging("Name")
                    _name = value
                    SendPropertyChanged("Name")
                    OnNameChanged()
                End If
            End Set
        End Property

        Private _status As String

        ''' <summary>
        ''' Gets or sets the Status column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Status", Storage:="_status", DbType:="varchar(2) NOT NULL", CanBeNull:=False)> _
        <ComponentModel.DataAnnotations.StringLength(2)> _
        <System.Runtime.Serialization.DataMember(Order:=3)> _
        Public Property Status() As String
            Get
                Return _status
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._status, value) = False) Then
                    OnStatusChanging(value)
                    SendPropertyChanging("Status")
                    _status = value
                    SendPropertyChanged("Status")
                    OnStatusChanged()
                End If
            End Set
        End Property

        Private _addr1 As String

        ''' <summary>
        ''' Gets or sets the Addr1 column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Addr1", Storage:="_addr1", DbType:="varchar(80)")> _
        <ComponentModel.DataAnnotations.StringLength(80)> _
        <System.Runtime.Serialization.DataMember(Order:=4)> _
        Public Property Addr1() As String
            Get
                Return _addr1
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._addr1, value) = False) Then
                    OnAddr1Changing(value)
                    SendPropertyChanging("Addr1")
                    _addr1 = value
                    SendPropertyChanged("Addr1")
                    OnAddr1Changed()
                End If
            End Set
        End Property

        Private _addr2 As String

        ''' <summary>
        ''' Gets or sets the Addr2 column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Addr2", Storage:="_addr2", DbType:="varchar(80)")> _
        <ComponentModel.DataAnnotations.StringLength(80)> _
        <System.Runtime.Serialization.DataMember(Order:=5)> _
        Public Property Addr2() As String
            Get
                Return _addr2
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._addr2, value) = False) Then
                    OnAddr2Changing(value)
                    SendPropertyChanging("Addr2")
                    _addr2 = value
                    SendPropertyChanged("Addr2")
                    OnAddr2Changed()
                End If
            End Set
        End Property

        Private _city As String

        ''' <summary>
        ''' Gets or sets the City column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="City", Storage:="_city", DbType:="varchar(80)")> _
        <ComponentModel.DataAnnotations.StringLength(80)> _
        <System.Runtime.Serialization.DataMember(Order:=6)> _
        Public Property City() As String
            Get
                Return _city
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._city, value) = False) Then
                    OnCityChanging(value)
                    SendPropertyChanging("City")
                    _city = value
                    SendPropertyChanged("City")
                    OnCityChanged()
                End If
            End Set
        End Property

        Private _state As String

        ''' <summary>
        ''' Gets or sets the State column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="State", Storage:="_state", DbType:="varchar(80)")> _
        <ComponentModel.DataAnnotations.StringLength(80)> _
        <System.Runtime.Serialization.DataMember(Order:=7)> _
        Public Property State() As String
            Get
                Return _state
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._state, value) = False) Then
                    OnStateChanging(value)
                    SendPropertyChanging("State")
                    _state = value
                    SendPropertyChanged("State")
                    OnStateChanged()
                End If
            End Set
        End Property

        Private _zip As String

        ''' <summary>
        ''' Gets or sets the Zip column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Zip", Storage:="_zip", DbType:="varchar(5)")> _
        <ComponentModel.DataAnnotations.StringLength(5)> _
        <System.Runtime.Serialization.DataMember(Order:=8)> _
        Public Property Zip() As String
            Get
                Return _zip
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._zip, value) = False) Then
                    OnZipChanging(value)
                    SendPropertyChanging("Zip")
                    _zip = value
                    SendPropertyChanged("Zip")
                    OnZipChanged()
                End If
            End Set
        End Property

        Private _phone As String

        ''' <summary>
        ''' Gets or sets the Phone column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Phone", Storage:="_phone", DbType:="varchar(40)")> _
        <ComponentModel.DataAnnotations.StringLength(40)> _
        <System.Runtime.Serialization.DataMember(Order:=9)> _
        Public Property Phone() As String
            Get
                Return _phone
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._phone, value) = False) Then
                    OnPhoneChanging(value)
                    SendPropertyChanging("Phone")
                    _phone = value
                    SendPropertyChanged("Phone")
                    OnPhoneChanged()
                End If
            End Set
        End Property
#End Region

#Region "Association Mapped Properties"

#End Region

#Region "Extensibility Method Definitions"

        ''' <summary>Called by the Shared constructor to add shared rules.</summary>
        Partial Private Shared Sub AddSharedRules()
        End Sub
        ''' <summary>Called when this instance is loaded.</summary>
        Partial Private Sub OnLoaded()
        End Sub
        ''' <summary>Called when this instance is being saved.</summary>
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        ''' <summary>Called when this instance is created.</summary>
        Partial Private Sub OnCreated()
        End Sub
        ''' <summary>Called when SuppId is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnSuppIdChanging(ByVal value As Integer)
        End Sub
        ''' <summary>Called after SuppId has Changed.</summary>
        Partial Private Sub OnSuppIdChanged()
        End Sub
        ''' <summary>Called when Name is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Name has Changed.</summary>
        Partial Private Sub OnNameChanged()
        End Sub
        ''' <summary>Called when Status is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnStatusChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Status has Changed.</summary>
        Partial Private Sub OnStatusChanged()
        End Sub
        ''' <summary>Called when Addr1 is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnAddr1Changing(ByVal value As String)
        End Sub
        ''' <summary>Called after Addr1 has Changed.</summary>
        Partial Private Sub OnAddr1Changed()
        End Sub
        ''' <summary>Called when Addr2 is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnAddr2Changing(ByVal value As String)
        End Sub
        ''' <summary>Called after Addr2 has Changed.</summary>
        Partial Private Sub OnAddr2Changed()
        End Sub
        ''' <summary>Called when City is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after City has Changed.</summary>
        Partial Private Sub OnCityChanged()
        End Sub
        ''' <summary>Called when State is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnStateChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after State has Changed.</summary>
        Partial Private Sub OnStateChanged()
        End Sub
        ''' <summary>Called when Zip is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnZipChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Zip has Changed.</summary>
        Partial Private Sub OnZipChanged()
        End Sub
        ''' <summary>Called when Phone is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Phone has Changed.</summary>
        Partial Private Sub OnPhoneChanged()
        End Sub
#End Region

#Region "Serialization"

        Private serializing As Boolean

        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnSerializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = True
        End Sub

        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerialized(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnSerialized(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = False
        End Sub

        ''' <summary>
        ''' Called when deserializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnDeserializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnDeserializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            Initialize()
        End Sub
        
        ''' <summary>
        ''' Deserializes an instance of <see cref="Supplier"/> from XML.
        ''' </summary>
        ''' <param name="xml">The XML string representing a <see cref="Supplier"/> instance.</param>
        ''' <returns>An instance of <see cref="Supplier"/> that is deserialized from the XML string.</returns>
        Public Shared Function FromXml(ByVal xml As String) As Supplier
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(Supplier))
            
            Using sr = New System.IO.StringReader(xml)
                Using reader = System.Xml.XmlReader.Create(sr)
                    Return TryCast(deserializer.ReadObject(reader), Supplier)
                End Using
            End Using
        End Function

        ''' <summary>
        ''' Deserializes an instance of <see cref="Supplier"/>.
        ''' </summary>
        ''' <param name="buffer">The byte array representing a <see cref="Supplier"/> instance.</param>
        ''' <returns>An instance of <see cref="Supplier"/> that is deserialized from the byte array.</returns>
        Public Shared Function FromBinary(ByVal buffer As Byte()) As Supplier
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(Supplier))

            Using ms = New System.IO.MemoryStream(buffer)
                Using reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max)
                    Return TryCast(deserializer.ReadObject(reader), Supplier)
                End Using
            End Using
        End Function
#End Region

#Region "Clone"
        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        Private Function ICloneable_Clone() As Object Implements ICloneable.Clone
            Dim serializer As New System.Runtime.Serialization.DataContractSerializer([GetType]())
            Using ms As New System.IO.MemoryStream()
                serializer.WriteObject(ms, Me)
                ms.Position = 0
                Return serializer.ReadObject(ms)
            End Using
        End Function

        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        ''' <remarks>
        ''' This method is equivalent to a Detach from the current <see cref="System.Data.Linq.DataContext"/>.
        ''' Only loaded EntityRef and EntitySet child accessions will be cloned.
        ''' </remarks>
        Public Function Clone() As Supplier
            Return DirectCast(DirectCast(Me, ICloneable).Clone(), Supplier)
        End Function
#End Region

#Region "Detach Methods"
        ''' <summary>
        ''' Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' Detaching the entity will allow it to be attached to another <see cref="System.Data.Linq.DataContext"/>.
        ''' </remarks>
        Public Overrides Sub Detach()

            If (Not IsAttached()) Then
                Return
            End If

            MyBase.Detach()
        End Sub
#End Region
    End Class
End Namespace

