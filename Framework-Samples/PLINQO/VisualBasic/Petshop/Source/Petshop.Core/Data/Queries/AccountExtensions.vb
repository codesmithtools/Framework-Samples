
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Account.
    ''' </summary>
    Public Module AccountExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal accountID As Integer) As PetShop.Core.Data.Account

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Account) = CType(queryable, Table(Of PetShop.Core.Data.Account))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), accountID)
            End If

            Return queryable.FirstOrDefault(Function(a)a.AccountID = accountID)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Account), ByVal accountID As Integer) As Integer
            Return table.Delete(Function(a)a.AccountID = accountID)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="accountID">AccountID to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAccountID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal accountID As Integer) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.AccountID = accountID)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="accountID">AccountID to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAccountID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal accountID As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of Integer)()
            values.Add(accountID)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAccountID(values(0))
            End If
        
            Return queryable.ByAccountID(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAccountID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.AccountID))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="accountID">AccountID to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAccountID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal accountID As Integer, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Account)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(a) accountID > a.AccountID)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(a) accountID >= a.AccountID)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(a) accountID < a.AccountID)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(a) accountID <= a.AccountID)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(a) a.AccountID <> accountID)
                Case Else
                    Return queryable.Where(Function(a) a.AccountID = accountID)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal uniqueID As Integer) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.UniqueID = uniqueID)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal uniqueID As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of Integer)()
            values.Add(uniqueID)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByUniqueID(values(0))
            End If
        
            Return queryable.ByUniqueID(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.UniqueID))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal uniqueID As Integer, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Account)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(a) uniqueID > a.UniqueID)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(a) uniqueID >= a.UniqueID)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(a) uniqueID < a.UniqueID)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(a) uniqueID <= a.UniqueID)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(a) a.UniqueID <> uniqueID)
                Case Else
                    Return queryable.Where(Function(a) a.UniqueID = uniqueID)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="email">Email to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmail(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal email As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Email = email)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="email">Email to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmail(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal email As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(email)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByEmail(values(0))
            End If
        
            Return queryable.ByEmail(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmail(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.Email))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="email">Email to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmail(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal email As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If email Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.Email.Contains(email))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.Email.StartsWith(email))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.Email.EndsWith(email))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.Email.Contains(email) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.Email <> email)
                Case Else
                    Return queryable.Where(Function(a) a.Email = email)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal firstName As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.FirstName = firstName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal firstName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(firstName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByFirstName(values(0))
            End If
        
            Return queryable.ByFirstName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.FirstName))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal firstName As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If firstName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.FirstName.Contains(firstName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.FirstName.StartsWith(firstName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.FirstName.EndsWith(firstName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.FirstName.Contains(firstName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.FirstName <> firstName)
                Case Else
                    Return queryable.Where(Function(a) a.FirstName = firstName)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal lastName As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.LastName = lastName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal lastName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(lastName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastName(values(0))
            End If
        
            Return queryable.ByLastName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.LastName))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal lastName As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If lastName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.LastName.Contains(lastName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.LastName.StartsWith(lastName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.LastName.EndsWith(lastName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.LastName.Contains(lastName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.LastName <> lastName)
                Case Else
                    Return queryable.Where(Function(a) a.LastName = lastName)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address1">Address1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal address1 As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Address1 = address1)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address1">Address1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal address1 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(address1)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAddress1(values(0))
            End If
        
            Return queryable.ByAddress1(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.Address1))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address1">Address1 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal address1 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If address1 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("address1", "Parameter 'address1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.Address1.Contains(address1))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.Address1.StartsWith(address1))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.Address1.EndsWith(address1))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.Address1.Contains(address1) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.Address1 <> address1)
                Case Else
                    Return queryable.Where(Function(a) a.Address1 = address1)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address2">Address2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal address2 As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a) Object.Equals(a.Address2, address2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address2">Address2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal address2 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(address2)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAddress2(values(0))
            End If
        
            Return queryable.ByAddress2(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Address2", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="address2">Address2 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddress2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal address2 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If address2 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("address2", "Parameter 'address2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.Address2.Contains(address2))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.Address2.StartsWith(address2))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.Address2.EndsWith(address2))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.Address2.Contains(address2) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) Object.Equals(a.Address2, address2) = False)
                Case Else
                    Return queryable.Where(Function(a) Object.Equals(a.Address2, address2))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal city As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.City = city)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal city As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(city)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCity(values(0))
            End If
        
            Return queryable.ByCity(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.City))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal city As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If city Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("city", "Parameter 'city' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.City.Contains(city))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.City.StartsWith(city))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.City.EndsWith(city))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.City.Contains(city) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.City <> city)
                Case Else
                    Return queryable.Where(Function(a) a.City = city)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal state As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.State = state)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal state As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(state)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByState(values(0))
            End If
        
            Return queryable.ByState(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.State))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal state As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If state Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("state", "Parameter 'state' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.State.Contains(state))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.State.StartsWith(state))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.State.EndsWith(state))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.State.Contains(state) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.State <> state)
                Case Else
                    Return queryable.Where(Function(a) a.State = state)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal zip As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Zip = zip)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal zip As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(zip)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByZip(values(0))
            End If
        
            Return queryable.ByZip(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.Zip))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal zip As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If zip Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("zip", "Parameter 'zip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.Zip.Contains(zip))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.Zip.StartsWith(zip))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.Zip.EndsWith(zip))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.Zip.Contains(zip) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.Zip <> zip)
                Case Else
                    Return queryable.Where(Function(a) a.Zip = zip)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="country">Country to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal country As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a)a.Country = country)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="country">Country to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal country As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(country)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCountry(values(0))
            End If
        
            Return queryable.ByCountry(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                Return queryable.Where(Function(a) values.Contains(a.Country))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="country">Country to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal country As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If country Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("country", "Parameter 'country' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.Country.Contains(country))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.Country.StartsWith(country))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.Country.EndsWith(country))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.Country.Contains(country) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) a.Country <> country)
                Case Else
                    Return queryable.Where(Function(a) a.Country = country)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal phone As String) As IQueryable(Of PetShop.Core.Data.Account)
            Return queryable.Where(Function(a) Object.Equals(a.Phone, phone))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal phone As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Account)
            Dim values = New List(Of String)()
            values.Add(phone)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByPhone(values(0))
            End If
        
            Return queryable.ByPhone(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Account)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Account, Boolean)("Phone", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Account"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Account), ByVal phone As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Account)
            If phone Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("phone", "Parameter 'phone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(a) a.Phone.Contains(phone))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(a) a.Phone.StartsWith(phone))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(a) a.Phone.EndsWith(phone))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(a) a.Phone.Contains(phone) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(a) Object.Equals(a.Phone, phone) = False)
                Case Else
                    Return queryable.Where(Function(a) Object.Equals(a.Phone, phone))
            End Select
        End Function
        

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, PetShop.Core.Data.Account) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal accountID As Integer) _
                        db.Account.FirstOrDefault(Function(a)a.AccountID = accountID))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

