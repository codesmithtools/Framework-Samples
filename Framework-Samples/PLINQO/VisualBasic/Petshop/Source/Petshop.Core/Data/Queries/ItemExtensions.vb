
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Item.
    ''' </summary>
    Public Module ItemExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal itemId As String) As PetShop.Core.Data.Item

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Item) = CType(queryable, Table(Of PetShop.Core.Data.Item))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), itemId)
            End If

            Return queryable.FirstOrDefault(Function(i)i.ItemId = itemId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Item), ByVal itemId As String) As Integer
            Return table.Delete(Function(i)i.ItemId = itemId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByItemId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal itemId As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i)i.ItemId = itemId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByItemId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal itemId As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of String)()
            values.Add(itemId)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByItemId(values(0))
            End If
        
            Return queryable.ByItemId(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByItemId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Item)
                Return queryable.Where(Function(i) values.Contains(i.ItemId))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="itemId">ItemId to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByItemId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal itemId As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If itemId Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("itemId", "Parameter 'itemId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(i) i.ItemId.Contains(itemId))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(i) i.ItemId.StartsWith(itemId))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(i) i.ItemId.EndsWith(itemId))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(i) i.ItemId.Contains(itemId) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(i) i.ItemId <> itemId)
                Case Else
                    Return queryable.Where(Function(i) i.ItemId = itemId)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="productId">ProductId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByProductId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal productId As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i)i.ProductId = productId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="productId">ProductId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByProductId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal productId As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of String)()
            values.Add(productId)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByProductId(values(0))
            End If
        
            Return queryable.ByProductId(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByProductId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Item)
                Return queryable.Where(Function(i) values.Contains(i.ProductId))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="productId">ProductId to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByProductId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal productId As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If productId Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("productId", "Parameter 'productId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(i) i.ProductId.Contains(productId))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(i) i.ProductId.StartsWith(productId))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(i) i.ProductId.EndsWith(productId))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(i) i.ProductId.Contains(productId) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(i) i.ProductId <> productId)
                Case Else
                    Return queryable.Where(Function(i) i.ProductId = productId)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="listPrice">ListPrice to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByListPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal listPrice As Decimal?) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.ListPrice, listPrice))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="listPrice">ListPrice to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByListPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal listPrice As Decimal?, ByVal ParamArray additionalValues As Decimal?()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of Decimal?)()
            values.Add(listPrice)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByListPrice(values(0))
            End If
        
            Return queryable.ByListPrice(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByListPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of Decimal?)) As IQueryable(Of PetShop.Core.Data.Item)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("ListPrice", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="listPrice">ListPrice to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByListPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal listPrice As Decimal?, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If listPrice Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("listPrice", "Parameter 'listPrice' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(i) listPrice > i.ListPrice)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(i) listPrice >= i.ListPrice)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(i) listPrice < i.ListPrice)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(i) listPrice <= i.ListPrice)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(i) Object.Equals(i.ListPrice, listPrice) = False)
                Case Else
                    Return queryable.Where(Function(i) Object.Equals(i.ListPrice, listPrice))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="unitCost">UnitCost to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUnitCost(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal unitCost As Decimal?) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.UnitCost, unitCost))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="unitCost">UnitCost to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUnitCost(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal unitCost As Decimal?, ByVal ParamArray additionalValues As Decimal?()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of Decimal?)()
            values.Add(unitCost)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByUnitCost(values(0))
            End If
        
            Return queryable.ByUnitCost(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUnitCost(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of Decimal?)) As IQueryable(Of PetShop.Core.Data.Item)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("UnitCost", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="unitCost">UnitCost to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUnitCost(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal unitCost As Decimal?, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If unitCost Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("unitCost", "Parameter 'unitCost' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(i) unitCost > i.UnitCost)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(i) unitCost >= i.UnitCost)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(i) unitCost < i.UnitCost)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(i) unitCost <= i.UnitCost)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(i) Object.Equals(i.UnitCost, unitCost) = False)
                Case Else
                    Return queryable.Where(Function(i) Object.Equals(i.UnitCost, unitCost))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="supplier">Supplier to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySupplier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal supplier As Integer?) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Supplier, supplier))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="supplier">Supplier to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySupplier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal supplier As Integer?, ByVal ParamArray additionalValues As Integer?()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of Integer?)()
            values.Add(supplier)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.BySupplier(values(0))
            End If
        
            Return queryable.BySupplier(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySupplier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of Integer?)) As IQueryable(Of PetShop.Core.Data.Item)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Supplier", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="supplier">Supplier to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySupplier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal supplier As Integer?, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If supplier Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("supplier", "Parameter 'supplier' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(i) supplier > i.Supplier)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(i) supplier >= i.Supplier)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(i) supplier < i.Supplier)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(i) supplier <= i.Supplier)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(i) Object.Equals(i.Supplier, supplier) = False)
                Case Else
                    Return queryable.Where(Function(i) Object.Equals(i.Supplier, supplier))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal status As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Status, status))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal status As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of String)()
            values.Add(status)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByStatus(values(0))
            End If
        
            Return queryable.ByStatus(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Item)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Status", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal status As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If status Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(i) i.Status.Contains(status))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(i) i.Status.StartsWith(status))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(i) i.Status.EndsWith(status))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(i) i.Status.Contains(status) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(i) Object.Equals(i.Status, status) = False)
                Case Else
                    Return queryable.Where(Function(i) Object.Equals(i.Status, status))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal name As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Name, name))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal name As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of String)()
            values.Add(name)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByName(values(0))
            End If
        
            Return queryable.ByName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Item)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Name", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal name As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If name Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(i) i.Name.Contains(name))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(i) i.Name.StartsWith(name))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(i) i.Name.EndsWith(name))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(i) i.Name.Contains(name) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(i) Object.Equals(i.Name, name) = False)
                Case Else
                    Return queryable.Where(Function(i) Object.Equals(i.Name, name))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="image">Image to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByImage(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal image As String) As IQueryable(Of PetShop.Core.Data.Item)
            Return queryable.Where(Function(i) Object.Equals(i.Image, image))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="image">Image to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByImage(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal image As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Item)
            Dim values = New List(Of String)()
            values.Add(image)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByImage(values(0))
            End If
        
            Return queryable.ByImage(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByImage(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Item)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Item, Boolean)("Image", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Item"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="image">Image to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByImage(ByVal queryable As IQueryable(Of PetShop.Core.Data.Item), ByVal image As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Item)
            If image Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("image", "Parameter 'image' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(i) i.Image.Contains(image))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(i) i.Image.StartsWith(image))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(i) i.Image.EndsWith(image))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(i) i.Image.Contains(image) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(i) Object.Equals(i.Image, image) = False)
                Case Else
                    Return queryable.Where(Function(i) Object.Equals(i.Image, image))
            End Select
        End Function
        

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, String, PetShop.Core.Data.Item) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal itemId As String) _
                        db.Item.FirstOrDefault(Function(i)i.ItemId = itemId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

