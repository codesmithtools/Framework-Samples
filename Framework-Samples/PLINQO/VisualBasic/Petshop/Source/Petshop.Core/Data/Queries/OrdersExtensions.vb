
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Orders.
    ''' </summary>
    Public Module OrdersExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderId As Integer) As PetShop.Core.Data.Orders

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Orders) = CType(queryable, Table(Of PetShop.Core.Data.Orders))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), orderId)
            End If

            Return queryable.FirstOrDefault(Function(o)o.OrderId = orderId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Orders), ByVal orderId As Integer) As Integer
            Return table.Delete(Function(o)o.OrderId = orderId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderId">OrderId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderId As Integer) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.OrderId = orderId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderId">OrderId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderId As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of Integer)()
            values.Add(orderId)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByOrderId(values(0))
            End If
        
            Return queryable.ByOrderId(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.OrderId))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderId">OrderId to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderId As Integer, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(o) orderId > o.OrderId)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(o) orderId >= o.OrderId)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(o) orderId < o.OrderId)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(o) orderId <= o.OrderId)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(o) o.OrderId <> orderId)
                Case Else
                    Return queryable.Where(Function(o) o.OrderId = orderId)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUserId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal userId As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.UserId = userId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUserId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal userId As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(userId)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByUserId(values(0))
            End If
        
            Return queryable.ByUserId(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUserId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.UserId))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="userId">UserId to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUserId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal userId As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If userId Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.UserId.Contains(userId))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.UserId.StartsWith(userId))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.UserId.EndsWith(userId))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.UserId.Contains(userId) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.UserId <> userId)
                Case Else
                    Return queryable.Where(Function(o) o.UserId = userId)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderDate">OrderDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderDate As Date) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.OrderDate = orderDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderDate">OrderDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderDate As Date, ByVal ParamArray additionalValues As Date()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of Date)()
            values.Add(orderDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByOrderDate(values(0))
            End If
        
            Return queryable.ByOrderDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of Date)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.OrderDate))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="orderDate">OrderDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByOrderDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal orderDate As Date, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(o) orderDate > o.OrderDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(o) orderDate >= o.OrderDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(o) orderDate < o.OrderDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(o) orderDate <= o.OrderDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(o) o.OrderDate <> orderDate)
                Case Else
                    Return queryable.Where(Function(o) o.OrderDate = orderDate)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr1">ShipAddr1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipAddr1 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipAddr1 = shipAddr1)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr1">ShipAddr1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipAddr1 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipAddr1)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipAddr1(values(0))
            End If
        
            Return queryable.ByShipAddr1(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.ShipAddr1))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr1">ShipAddr1 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipAddr1 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipAddr1 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipAddr1", "Parameter 'shipAddr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipAddr1.Contains(shipAddr1))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipAddr1.StartsWith(shipAddr1))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipAddr1.EndsWith(shipAddr1))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipAddr1.Contains(shipAddr1) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.ShipAddr1 <> shipAddr1)
                Case Else
                    Return queryable.Where(Function(o) o.ShipAddr1 = shipAddr1)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr2">ShipAddr2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipAddr2 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o) Object.Equals(o.ShipAddr2, shipAddr2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr2">ShipAddr2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipAddr2 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipAddr2)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipAddr2(values(0))
            End If
        
            Return queryable.ByShipAddr2(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("ShipAddr2", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipAddr2">ShipAddr2 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipAddr2 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipAddr2 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipAddr2", "Parameter 'shipAddr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipAddr2.Contains(shipAddr2))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipAddr2.StartsWith(shipAddr2))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipAddr2.EndsWith(shipAddr2))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipAddr2.Contains(shipAddr2) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) Object.Equals(o.ShipAddr2, shipAddr2) = False)
                Case Else
                    Return queryable.Where(Function(o) Object.Equals(o.ShipAddr2, shipAddr2))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCity">ShipCity to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipCity As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipCity = shipCity)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCity">ShipCity to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipCity As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipCity)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipCity(values(0))
            End If
        
            Return queryable.ByShipCity(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.ShipCity))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCity">ShipCity to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipCity As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipCity Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipCity", "Parameter 'shipCity' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipCity.Contains(shipCity))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipCity.StartsWith(shipCity))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipCity.EndsWith(shipCity))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipCity.Contains(shipCity) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.ShipCity <> shipCity)
                Case Else
                    Return queryable.Where(Function(o) o.ShipCity = shipCity)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipState">ShipState to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipState As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipState = shipState)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipState">ShipState to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipState As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipState)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipState(values(0))
            End If
        
            Return queryable.ByShipState(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.ShipState))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipState">ShipState to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipState As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipState Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipState", "Parameter 'shipState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipState.Contains(shipState))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipState.StartsWith(shipState))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipState.EndsWith(shipState))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipState.Contains(shipState) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.ShipState <> shipState)
                Case Else
                    Return queryable.Where(Function(o) o.ShipState = shipState)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipZip">ShipZip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipZip As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipZip = shipZip)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipZip">ShipZip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipZip As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipZip)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipZip(values(0))
            End If
        
            Return queryable.ByShipZip(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.ShipZip))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipZip">ShipZip to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipZip As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipZip Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipZip", "Parameter 'shipZip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipZip.Contains(shipZip))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipZip.StartsWith(shipZip))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipZip.EndsWith(shipZip))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipZip.Contains(shipZip) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.ShipZip <> shipZip)
                Case Else
                    Return queryable.Where(Function(o) o.ShipZip = shipZip)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCountry">ShipCountry to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipCountry As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipCountry = shipCountry)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCountry">ShipCountry to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipCountry As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipCountry)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipCountry(values(0))
            End If
        
            Return queryable.ByShipCountry(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.ShipCountry))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipCountry">ShipCountry to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipCountry As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipCountry Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipCountry", "Parameter 'shipCountry' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipCountry.Contains(shipCountry))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipCountry.StartsWith(shipCountry))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipCountry.EndsWith(shipCountry))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipCountry.Contains(shipCountry) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.ShipCountry <> shipCountry)
                Case Else
                    Return queryable.Where(Function(o) o.ShipCountry = shipCountry)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr1">BillAddr1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billAddr1 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillAddr1 = billAddr1)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr1">BillAddr1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billAddr1 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billAddr1)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillAddr1(values(0))
            End If
        
            Return queryable.ByBillAddr1(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.BillAddr1))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr1">BillAddr1 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billAddr1 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billAddr1 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billAddr1", "Parameter 'billAddr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillAddr1.Contains(billAddr1))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillAddr1.StartsWith(billAddr1))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillAddr1.EndsWith(billAddr1))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillAddr1.Contains(billAddr1) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.BillAddr1 <> billAddr1)
                Case Else
                    Return queryable.Where(Function(o) o.BillAddr1 = billAddr1)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr2">BillAddr2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billAddr2 As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o) Object.Equals(o.BillAddr2, billAddr2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr2">BillAddr2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billAddr2 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billAddr2)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillAddr2(values(0))
            End If
        
            Return queryable.ByBillAddr2(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Orders, Boolean)("BillAddr2", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billAddr2">BillAddr2 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billAddr2 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billAddr2 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billAddr2", "Parameter 'billAddr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillAddr2.Contains(billAddr2))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillAddr2.StartsWith(billAddr2))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillAddr2.EndsWith(billAddr2))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillAddr2.Contains(billAddr2) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) Object.Equals(o.BillAddr2, billAddr2) = False)
                Case Else
                    Return queryable.Where(Function(o) Object.Equals(o.BillAddr2, billAddr2))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCity">BillCity to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billCity As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillCity = billCity)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCity">BillCity to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billCity As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billCity)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillCity(values(0))
            End If
        
            Return queryable.ByBillCity(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.BillCity))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCity">BillCity to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billCity As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billCity Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billCity", "Parameter 'billCity' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillCity.Contains(billCity))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillCity.StartsWith(billCity))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillCity.EndsWith(billCity))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillCity.Contains(billCity) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.BillCity <> billCity)
                Case Else
                    Return queryable.Where(Function(o) o.BillCity = billCity)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billState">BillState to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billState As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillState = billState)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billState">BillState to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billState As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billState)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillState(values(0))
            End If
        
            Return queryable.ByBillState(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.BillState))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billState">BillState to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billState As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billState Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billState", "Parameter 'billState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillState.Contains(billState))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillState.StartsWith(billState))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillState.EndsWith(billState))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillState.Contains(billState) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.BillState <> billState)
                Case Else
                    Return queryable.Where(Function(o) o.BillState = billState)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billZip">BillZip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billZip As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillZip = billZip)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billZip">BillZip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billZip As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billZip)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillZip(values(0))
            End If
        
            Return queryable.ByBillZip(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.BillZip))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billZip">BillZip to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billZip As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billZip Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billZip", "Parameter 'billZip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillZip.Contains(billZip))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillZip.StartsWith(billZip))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillZip.EndsWith(billZip))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillZip.Contains(billZip) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.BillZip <> billZip)
                Case Else
                    Return queryable.Where(Function(o) o.BillZip = billZip)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCountry">BillCountry to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billCountry As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillCountry = billCountry)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCountry">BillCountry to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billCountry As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billCountry)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillCountry(values(0))
            End If
        
            Return queryable.ByBillCountry(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.BillCountry))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billCountry">BillCountry to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillCountry(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billCountry As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billCountry Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billCountry", "Parameter 'billCountry' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillCountry.Contains(billCountry))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillCountry.StartsWith(billCountry))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillCountry.EndsWith(billCountry))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillCountry.Contains(billCountry) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.BillCountry <> billCountry)
                Case Else
                    Return queryable.Where(Function(o) o.BillCountry = billCountry)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="courier">Courier to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCourier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal courier As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.Courier = courier)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="courier">Courier to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCourier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal courier As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(courier)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCourier(values(0))
            End If
        
            Return queryable.ByCourier(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCourier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.Courier))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="courier">Courier to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCourier(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal courier As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If courier Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("courier", "Parameter 'courier' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.Courier.Contains(courier))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.Courier.StartsWith(courier))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.Courier.EndsWith(courier))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.Courier.Contains(courier) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.Courier <> courier)
                Case Else
                    Return queryable.Where(Function(o) o.Courier = courier)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="totalPrice">TotalPrice to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByTotalPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal totalPrice As Decimal) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.TotalPrice = totalPrice)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="totalPrice">TotalPrice to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByTotalPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal totalPrice As Decimal, ByVal ParamArray additionalValues As Decimal()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of Decimal)()
            values.Add(totalPrice)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByTotalPrice(values(0))
            End If
        
            Return queryable.ByTotalPrice(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByTotalPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of Decimal)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.TotalPrice))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="totalPrice">TotalPrice to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByTotalPrice(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal totalPrice As Decimal, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(o) totalPrice > o.TotalPrice)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(o) totalPrice >= o.TotalPrice)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(o) totalPrice < o.TotalPrice)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(o) totalPrice <= o.TotalPrice)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(o) o.TotalPrice <> totalPrice)
                Case Else
                    Return queryable.Where(Function(o) o.TotalPrice = totalPrice)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToFirstName">BillToFirstName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billToFirstName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillToFirstName = billToFirstName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToFirstName">BillToFirstName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billToFirstName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billToFirstName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillToFirstName(values(0))
            End If
        
            Return queryable.ByBillToFirstName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.BillToFirstName))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToFirstName">BillToFirstName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billToFirstName As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billToFirstName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billToFirstName", "Parameter 'billToFirstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillToFirstName.Contains(billToFirstName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillToFirstName.StartsWith(billToFirstName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillToFirstName.EndsWith(billToFirstName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillToFirstName.Contains(billToFirstName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.BillToFirstName <> billToFirstName)
                Case Else
                    Return queryable.Where(Function(o) o.BillToFirstName = billToFirstName)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToLastName">BillToLastName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billToLastName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.BillToLastName = billToLastName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToLastName">BillToLastName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billToLastName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(billToLastName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByBillToLastName(values(0))
            End If
        
            Return queryable.ByBillToLastName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.BillToLastName))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="billToLastName">BillToLastName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByBillToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal billToLastName As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If billToLastName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("billToLastName", "Parameter 'billToLastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.BillToLastName.Contains(billToLastName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.BillToLastName.StartsWith(billToLastName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.BillToLastName.EndsWith(billToLastName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.BillToLastName.Contains(billToLastName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.BillToLastName <> billToLastName)
                Case Else
                    Return queryable.Where(Function(o) o.BillToLastName = billToLastName)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToFirstName">ShipToFirstName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipToFirstName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipToFirstName = shipToFirstName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToFirstName">ShipToFirstName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipToFirstName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipToFirstName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipToFirstName(values(0))
            End If
        
            Return queryable.ByShipToFirstName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.ShipToFirstName))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToFirstName">ShipToFirstName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToFirstName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipToFirstName As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipToFirstName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipToFirstName", "Parameter 'shipToFirstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipToFirstName.Contains(shipToFirstName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipToFirstName.StartsWith(shipToFirstName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipToFirstName.EndsWith(shipToFirstName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipToFirstName.Contains(shipToFirstName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.ShipToFirstName <> shipToFirstName)
                Case Else
                    Return queryable.Where(Function(o) o.ShipToFirstName = shipToFirstName)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToLastName">ShipToLastName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipToLastName As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.ShipToLastName = shipToLastName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToLastName">ShipToLastName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipToLastName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(shipToLastName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByShipToLastName(values(0))
            End If
        
            Return queryable.ByShipToLastName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.ShipToLastName))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="shipToLastName">ShipToLastName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByShipToLastName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal shipToLastName As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If shipToLastName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("shipToLastName", "Parameter 'shipToLastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.ShipToLastName.Contains(shipToLastName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.ShipToLastName.StartsWith(shipToLastName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.ShipToLastName.EndsWith(shipToLastName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.ShipToLastName.Contains(shipToLastName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.ShipToLastName <> shipToLastName)
                Case Else
                    Return queryable.Where(Function(o) o.ShipToLastName = shipToLastName)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAuthorizationNumber(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal authorizationNumber As Integer) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.AuthorizationNumber = authorizationNumber)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAuthorizationNumber(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal authorizationNumber As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of Integer)()
            values.Add(authorizationNumber)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAuthorizationNumber(values(0))
            End If
        
            Return queryable.ByAuthorizationNumber(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAuthorizationNumber(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.AuthorizationNumber))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="authorizationNumber">AuthorizationNumber to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAuthorizationNumber(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal authorizationNumber As Integer, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(o) authorizationNumber > o.AuthorizationNumber)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(o) authorizationNumber >= o.AuthorizationNumber)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(o) authorizationNumber < o.AuthorizationNumber)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(o) authorizationNumber <= o.AuthorizationNumber)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(o) o.AuthorizationNumber <> authorizationNumber)
                Case Else
                    Return queryable.Where(Function(o) o.AuthorizationNumber = authorizationNumber)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="locale">Locale to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLocale(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal locale As String) As IQueryable(Of PetShop.Core.Data.Orders)
            Return queryable.Where(Function(o)o.Locale = locale)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="locale">Locale to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLocale(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal locale As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Orders)
            Dim values = New List(Of String)()
            values.Add(locale)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLocale(values(0))
            End If
        
            Return queryable.ByLocale(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLocale(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Orders)
                Return queryable.Where(Function(o) values.Contains(o.Locale))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Orders"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="locale">Locale to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLocale(ByVal queryable As IQueryable(Of PetShop.Core.Data.Orders), ByVal locale As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Orders)
            If locale Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("locale", "Parameter 'locale' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(o) o.Locale.Contains(locale))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(o) o.Locale.StartsWith(locale))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(o) o.Locale.EndsWith(locale))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(o) o.Locale.Contains(locale) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(o) o.Locale <> locale)
                Case Else
                    Return queryable.Where(Function(o) o.Locale = locale)
            End Select
        End Function
        

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, PetShop.Core.Data.Orders) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal orderId As Integer) _
                        db.Orders.FirstOrDefault(Function(o)o.OrderId = orderId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

