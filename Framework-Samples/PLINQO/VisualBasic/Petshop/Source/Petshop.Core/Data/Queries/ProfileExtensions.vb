
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Profile.
    ''' </summary>
    Public Module ProfileExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal uniqueID As Integer) As PetShop.Core.Data.Profile

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Profile) = CType(queryable, Table(Of PetShop.Core.Data.Profile))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), uniqueID)
            End If

            Return queryable.FirstOrDefault(Function(p)p.UniqueID = uniqueID)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Profile), ByVal uniqueID As Integer) As Integer
            Return table.Delete(Function(p)p.UniqueID = uniqueID)
        End Function

        ''' <summary>
        ''' Gets an instance by using a unique index.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByUsernameApplicationName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal username As String, ByVal applicationName As String) As PetShop.Core.Data.Profile

            Dim entity As Table(Of PetShop.Core.Data.Profile) = CType(queryable, Table(Of PetShop.Core.Data.Profile))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByUsernameApplicationName.Invoke(DirectCast(entity.Context,PetShop.Core.Data.PetshopDataContext), username, applicationName)
            End If

            Return queryable.FirstOrDefault(Function(p)p.Username = username _
					AndAlso p.ApplicationName = applicationName)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal uniqueID As Integer) As IQueryable(Of PetShop.Core.Data.Profile)
            Return queryable.Where(Function(p)p.UniqueID = uniqueID)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal uniqueID As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Profile)
            Dim values = New List(Of Integer)()
            values.Add(uniqueID)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByUniqueID(values(0))
            End If
        
            Return queryable.ByUniqueID(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of PetShop.Core.Data.Profile)
                Return queryable.Where(Function(p) values.Contains(p.UniqueID))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="uniqueID">UniqueID to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUniqueID(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal uniqueID As Integer, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Profile)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(p) uniqueID > p.UniqueID)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(p) uniqueID >= p.UniqueID)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(p) uniqueID < p.UniqueID)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(p) uniqueID <= p.UniqueID)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(p) p.UniqueID <> uniqueID)
                Case Else
                    Return queryable.Where(Function(p) p.UniqueID = uniqueID)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="username">Username to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUsername(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal username As String) As IQueryable(Of PetShop.Core.Data.Profile)
            Return queryable.Where(Function(p)p.Username = username)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="username">Username to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUsername(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal username As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Profile)
            Dim values = New List(Of String)()
            values.Add(username)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByUsername(values(0))
            End If
        
            Return queryable.ByUsername(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUsername(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Profile)
                Return queryable.Where(Function(p) values.Contains(p.Username))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="username">Username to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByUsername(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal username As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Profile)
            If username Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("username", "Parameter 'username' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(p) p.Username.Contains(username))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(p) p.Username.StartsWith(username))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(p) p.Username.EndsWith(username))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(p) p.Username.Contains(username) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(p) p.Username <> username)
                Case Else
                    Return queryable.Where(Function(p) p.Username = username)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="applicationName">ApplicationName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByApplicationName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal applicationName As String) As IQueryable(Of PetShop.Core.Data.Profile)
            Return queryable.Where(Function(p)p.ApplicationName = applicationName)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="applicationName">ApplicationName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByApplicationName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal applicationName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Profile)
            Dim values = New List(Of String)()
            values.Add(applicationName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByApplicationName(values(0))
            End If
        
            Return queryable.ByApplicationName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByApplicationName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Profile)
                Return queryable.Where(Function(p) values.Contains(p.ApplicationName))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="applicationName">ApplicationName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByApplicationName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal applicationName As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Profile)
            If applicationName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("applicationName", "Parameter 'applicationName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(p) p.ApplicationName.Contains(applicationName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(p) p.ApplicationName.StartsWith(applicationName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(p) p.ApplicationName.EndsWith(applicationName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(p) p.ApplicationName.Contains(applicationName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(p) p.ApplicationName <> applicationName)
                Case Else
                    Return queryable.Where(Function(p) p.ApplicationName = applicationName)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="isAnonymous">IsAnonymous to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsAnonymous(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal isAnonymous As Boolean?) As IQueryable(Of PetShop.Core.Data.Profile)
            Return queryable.Where(Function(p) Object.Equals(p.IsAnonymous, isAnonymous))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="isAnonymous">IsAnonymous to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsAnonymous(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal isAnonymous As Boolean?, ByVal ParamArray additionalValues As Boolean?()) As IQueryable(Of PetShop.Core.Data.Profile)
            Dim values = New List(Of Boolean?)()
            values.Add(isAnonymous)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByIsAnonymous(values(0))
            End If
        
            Return queryable.ByIsAnonymous(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsAnonymous(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal values As IEnumerable(Of Boolean?)) As IQueryable(Of PetShop.Core.Data.Profile)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Profile, Boolean)("IsAnonymous", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="isAnonymous">IsAnonymous to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsAnonymous(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal isAnonymous As Boolean?, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Profile)
            If isAnonymous Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("isAnonymous", "Parameter 'isAnonymous' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan, ComparisonOperator.GreaterThanOrEquals, ComparisonOperator.LessThan, ComparisonOperator.LessThanOrEquals
                    Throw New ArgumentException("Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Boolean? type.", "comparison")
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(p) Object.Equals(p.IsAnonymous, isAnonymous) = False)
                Case Else
                    Return queryable.Where(Function(p) Object.Equals(p.IsAnonymous, isAnonymous))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastActivityDate">LastActivityDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal lastActivityDate As Date?) As IQueryable(Of PetShop.Core.Data.Profile)
            Return queryable.Where(Function(p) Object.Equals(p.LastActivityDate, lastActivityDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastActivityDate">LastActivityDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal lastActivityDate As Date?, ByVal ParamArray additionalValues As Date?()) As IQueryable(Of PetShop.Core.Data.Profile)
            Dim values = New List(Of Date?)()
            values.Add(lastActivityDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastActivityDate(values(0))
            End If
        
            Return queryable.ByLastActivityDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal values As IEnumerable(Of Date?)) As IQueryable(Of PetShop.Core.Data.Profile)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Profile, Boolean)("LastActivityDate", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastActivityDate">LastActivityDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal lastActivityDate As Date?, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Profile)
            If lastActivityDate Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("lastActivityDate", "Parameter 'lastActivityDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(p) lastActivityDate > p.LastActivityDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(p) lastActivityDate >= p.LastActivityDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(p) lastActivityDate < p.LastActivityDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(p) lastActivityDate <= p.LastActivityDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(p) Object.Equals(p.LastActivityDate, lastActivityDate) = False)
                Case Else
                    Return queryable.Where(Function(p) Object.Equals(p.LastActivityDate, lastActivityDate))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastUpdatedDate">LastUpdatedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastUpdatedDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal lastUpdatedDate As Date?) As IQueryable(Of PetShop.Core.Data.Profile)
            Return queryable.Where(Function(p) Object.Equals(p.LastUpdatedDate, lastUpdatedDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastUpdatedDate">LastUpdatedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastUpdatedDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal lastUpdatedDate As Date?, ByVal ParamArray additionalValues As Date?()) As IQueryable(Of PetShop.Core.Data.Profile)
            Dim values = New List(Of Date?)()
            values.Add(lastUpdatedDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastUpdatedDate(values(0))
            End If
        
            Return queryable.ByLastUpdatedDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastUpdatedDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal values As IEnumerable(Of Date?)) As IQueryable(Of PetShop.Core.Data.Profile)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Profile, Boolean)("LastUpdatedDate", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Profile"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastUpdatedDate">LastUpdatedDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastUpdatedDate(ByVal queryable As IQueryable(Of PetShop.Core.Data.Profile), ByVal lastUpdatedDate As Date?, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Profile)
            If lastUpdatedDate Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("lastUpdatedDate", "Parameter 'lastUpdatedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(p) lastUpdatedDate > p.LastUpdatedDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(p) lastUpdatedDate >= p.LastUpdatedDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(p) lastUpdatedDate < p.LastUpdatedDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(p) lastUpdatedDate <= p.LastUpdatedDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(p) Object.Equals(p.LastUpdatedDate, lastUpdatedDate) = False)
                Case Else
                    Return queryable.Where(Function(p) Object.Equals(p.LastUpdatedDate, lastUpdatedDate))
            End Select
        End Function


        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, PetShop.Core.Data.Profile) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal uniqueID As Integer) _
                        db.Profile.FirstOrDefault(Function(p)p.UniqueID = uniqueID))

            Friend Shared ReadOnly GetByUsernameApplicationName As Func(Of PetshopDataContext, String, String, PetShop.Core.Data.Profile) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal username As String, ByVal applicationName As String) _
                        db.Profile.FirstOrDefault(Function(p)p.Username = username _
							AndAlso p.ApplicationName = applicationName))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

