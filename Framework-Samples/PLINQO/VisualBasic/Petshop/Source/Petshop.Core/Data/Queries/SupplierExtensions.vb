
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace PetShop.Core.Data
    ''' <summary>
    ''' The query extension class for Supplier.
    ''' </summary>
    Public Module SupplierExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal suppId As Integer) As PetShop.Core.Data.Supplier

            Dim entity As System.Data.Linq.Table(Of PetShop.Core.Data.Supplier) = CType(queryable, Table(Of PetShop.Core.Data.Supplier))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, PetShop.Core.Data.PetshopDataContext), suppId)
            End If

            Return queryable.FirstOrDefault(Function(s)s.SuppId = suppId)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of PetShop.Core.Data.Supplier), ByVal suppId As Integer) As Integer
            Return table.Delete(Function(s)s.SuppId = suppId)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="suppId">SuppId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySuppId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal suppId As Integer) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s)s.SuppId = suppId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="suppId">SuppId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySuppId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal suppId As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of Integer)()
            values.Add(suppId)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.BySuppId(values(0))
            End If
        
            Return queryable.BySuppId(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySuppId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of PetShop.Core.Data.Supplier)
                Return queryable.Where(Function(s) values.Contains(s.SuppId))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="suppId">SuppId to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySuppId(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal suppId As Integer, ByVal comparison As ComparisonOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(s) suppId > s.SuppId)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(s) suppId >= s.SuppId)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(s) suppId < s.SuppId)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(s) suppId <= s.SuppId)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(s) s.SuppId <> suppId)
                Case Else
                    Return queryable.Where(Function(s) s.SuppId = suppId)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal name As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Name, name))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal name As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(name)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByName(values(0))
            End If
        
            Return queryable.ByName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Name", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal name As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If name Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.Name.Contains(name))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.Name.StartsWith(name))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.Name.EndsWith(name))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.Name.Contains(name) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.Name, name) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.Name, name))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal status As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s)s.Status = status)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal status As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(status)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByStatus(values(0))
            End If
        
            Return queryable.ByStatus(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                Return queryable.Where(Function(s) values.Contains(s.Status))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal status As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If status Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.Status.Contains(status))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.Status.StartsWith(status))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.Status.EndsWith(status))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.Status.Contains(status) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) s.Status <> status)
                Case Else
                    Return queryable.Where(Function(s) s.Status = status)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr1">Addr1 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal addr1 As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Addr1, addr1))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr1">Addr1 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal addr1 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(addr1)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAddr1(values(0))
            End If
        
            Return queryable.ByAddr1(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Addr1", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr1">Addr1 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr1(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal addr1 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If addr1 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("addr1", "Parameter 'addr1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.Addr1.Contains(addr1))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.Addr1.StartsWith(addr1))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.Addr1.EndsWith(addr1))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.Addr1.Contains(addr1) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.Addr1, addr1) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.Addr1, addr1))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr2">Addr2 to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal addr2 As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Addr2, addr2))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr2">Addr2 to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal addr2 As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(addr2)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAddr2(values(0))
            End If
        
            Return queryable.ByAddr2(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Addr2", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="addr2">Addr2 to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAddr2(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal addr2 As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If addr2 Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("addr2", "Parameter 'addr2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.Addr2.Contains(addr2))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.Addr2.StartsWith(addr2))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.Addr2.EndsWith(addr2))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.Addr2.Contains(addr2) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.Addr2, addr2) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.Addr2, addr2))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal city As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.City, city))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal city As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(city)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCity(values(0))
            End If
        
            Return queryable.ByCity(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("City", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="city">City to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCity(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal city As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If city Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("city", "Parameter 'city' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.City.Contains(city))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.City.StartsWith(city))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.City.EndsWith(city))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.City.Contains(city) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.City, city) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.City, city))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal state As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.State, state))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal state As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(state)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByState(values(0))
            End If
        
            Return queryable.ByState(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("State", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="state">State to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByState(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal state As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If state Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("state", "Parameter 'state' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.State.Contains(state))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.State.StartsWith(state))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.State.EndsWith(state))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.State.Contains(state) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.State, state) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.State, state))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal zip As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Zip, zip))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal zip As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(zip)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByZip(values(0))
            End If
        
            Return queryable.ByZip(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Zip", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="zip">Zip to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByZip(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal zip As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If zip Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("zip", "Parameter 'zip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.Zip.Contains(zip))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.Zip.StartsWith(zip))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.Zip.EndsWith(zip))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.Zip.Contains(zip) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.Zip, zip) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.Zip, zip))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal phone As String) As IQueryable(Of PetShop.Core.Data.Supplier)
            Return queryable.Where(Function(s) Object.Equals(s.Phone, phone))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal phone As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of PetShop.Core.Data.Supplier)
            Dim values = New List(Of String)()
            values.Add(phone)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByPhone(values(0))
            End If
        
            Return queryable.ByPhone(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal values As IEnumerable(Of String)) As IQueryable(Of PetShop.Core.Data.Supplier)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of PetShop.Core.Data.Supplier, Boolean)("Phone", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="PetShop.Core.Data.Supplier"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="phone">Phone to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPhone(ByVal queryable As IQueryable(Of PetShop.Core.Data.Supplier), ByVal phone As String, ByVal containment As ContainmentOperator) As IQueryable(Of PetShop.Core.Data.Supplier)
            If phone Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("phone", "Parameter 'phone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.Phone.Contains(phone))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.Phone.StartsWith(phone))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.Phone.EndsWith(phone))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.Phone.Contains(phone) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.Phone, phone) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.Phone, phone))
            End Select
        End Function
        

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of PetshopDataContext, Integer, PetShop.Core.Data.Supplier) = _
                CompiledQuery.Compile( _
                    Function(db As PetshopDataContext , ByVal suppId As Integer) _
                        db.Supplier.FirstOrDefault(Function(s)s.SuppId = suppId))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

