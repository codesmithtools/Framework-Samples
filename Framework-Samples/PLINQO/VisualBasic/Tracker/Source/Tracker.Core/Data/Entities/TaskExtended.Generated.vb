'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO Not MODIfY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Linq

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The class representing the dbo.TaskExtended table.
    ''' </summary>
    <System.Data.Linq.Mapping.Table(Name:="dbo.TaskExtended")> _
    <System.Runtime.Serialization.DataContract(IsReference:=True)> _
    <System.ComponentModel.DataAnnotations.ScaffoldTable(True)> _
    <System.ComponentModel.DataAnnotations.MetadataType(GetType(Tracker.Core.Data.TaskExtended.Metadata))> _
    <System.Data.Services.Common.DataServiceKey("TaskId")> _
    <System.Diagnostics.DebuggerDisplay("TaskId: {TaskId}")> _
    Partial Public Class TaskExtended
        Inherits LinqEntityBase
        Implements ICloneable

#Region "Static Constructor"
        ''' <summary>
        ''' Initializes the <see cref="TaskExtended"/> class.
        ''' </summary>
        Shared Sub New()
            AddSharedRules()
        End Sub
#End Region

#Region "Default Constructor"
        ''' <summary>
        ''' Initializes a new instance of the <see cref="TaskExtended"/> class.
        ''' </summary>
        <System.Diagnostics.DebuggerNonUserCode()> _
        Public Sub New()
            Initialize()
        End Sub

        Private Sub Initialize()
            _task = Nothing
            OnCreated()
        End Sub
#End Region

#Region "Column Mapped Properties"

        Private _taskId As Integer

        ''' <summary>
        ''' Gets or sets the TaskId column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="TaskId", Storage:="_taskId", DbType:="int NOT NULL", IsPrimaryKey:=True, CanBeNull:=False, UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)> _
        <System.Runtime.Serialization.DataMember(Order:=1)> _
        Public Property TaskId() As Integer
            Get
                Return _taskId
            End Get
            Set(ByVal value As Integer)
                If ((Me._taskId = value) = False) Then
                    If (_task.HasLoadedOrAssignedValue) Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    OnTaskIdChanging(value)
                    SendPropertyChanging("TaskId")
                    _taskId = value
                    SendPropertyChanged("TaskId")
                    OnTaskIdChanged()
                End If
            End Set
        End Property

        Private _browser As String

        ''' <summary>
        ''' Gets or sets the Browser column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="Browser", Storage:="_browser", DbType:="nvarchar(200)", UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)> _
        <ComponentModel.DataAnnotations.StringLength(200)> _
        <System.Runtime.Serialization.DataMember(Order:=2)> _
        Public Property Browser() As String
            Get
                Return _browser
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._browser, value) = False) Then
                    OnBrowserChanging(value)
                    SendPropertyChanging("Browser")
                    _browser = value
                    SendPropertyChanged("Browser")
                    OnBrowserChanged()
                End If
            End Set
        End Property

        Private _os As String

        ''' <summary>
        ''' Gets or sets the OS column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="OS", Storage:="_os", DbType:="nvarchar(150)", UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)> _
        <ComponentModel.DataAnnotations.StringLength(150)> _
        <System.Runtime.Serialization.DataMember(Order:=3)> _
        Public Property Os() As String
            Get
                Return _os
            End Get
            Set(ByVal value As String)
                If (String.Equals(Me._os, value) = False) Then
                    OnOsChanging(value)
                    SendPropertyChanging("Os")
                    _os = value
                    SendPropertyChanged("Os")
                    OnOsChanged()
                End If
            End Set
        End Property

        Private _createdDate As Date

        ''' <summary>
        ''' Gets or sets the CreatedDate column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="CreatedDate", Storage:="_createdDate", DbType:="datetime NOT NULL", CanBeNull:=False, UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)> _
        <System.Runtime.Serialization.DataMember(Order:=4)> _
        Public Property CreatedDate() As Date
            Get
                Return _createdDate
            End Get
            Set(ByVal value As Date)
                If ((Me._createdDate = value) = False) Then
                    OnCreatedDateChanging(value)
                    SendPropertyChanging("CreatedDate")
                    _createdDate = value
                    SendPropertyChanged("CreatedDate")
                    OnCreatedDateChanged()
                End If
            End Set
        End Property

        Private _modifiedDate As Date

        ''' <summary>
        ''' Gets or sets the ModifiedDate column value.
        ''' </summary>
        <System.Data.Linq.Mapping.Column(Name:="ModifiedDate", Storage:="_modifiedDate", DbType:="datetime NOT NULL", CanBeNull:=False, UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)> _
        <System.Runtime.Serialization.DataMember(Order:=5)> _
        Public Property ModifiedDate() As Date
            Get
                Return _modifiedDate
            End Get
            Set(ByVal value As Date)
                If ((Me._modifiedDate = value) = False) Then
                    OnModifiedDateChanging(value)
                    SendPropertyChanging("ModifiedDate")
                    _modifiedDate = value
                    SendPropertyChanged("ModifiedDate")
                    OnModifiedDateChanged()
                End If
            End Set
        End Property

        Private _rowVersion As System.Data.Linq.Binary = Nothing

        ''' <summary>
        ''' Gets the RowVersion column value.
        ''' </summary>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
        <System.Data.Linq.Mapping.Column(Name:="RowVersion", Storage:="_rowVersion", DbType:="timestamp NOT NULL", IsDbGenerated:=True, IsVersion:=True, CanBeNull:=False, UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)> _
        <System.Runtime.Serialization.DataMember(Order:=6)> _
        Public Property RowVersion() As System.Data.Linq.Binary
            Get
                Return _rowVersion
            End Get
            Set(ByVal value As System.Data.Linq.Binary)
                If (Object.Equals(Me._rowVersion, value) = False) Then
                    OnRowVersionChanging(value)
                    SendPropertyChanging("RowVersion")
                    _rowVersion = value
                    SendPropertyChanged("RowVersion")
                    OnRowVersionChanged()
                End If
            End Set
        End Property
#End Region

#Region "Association Mapped Properties"

        Private  _task As System.Data.Linq.EntityRef(Of Task)

        ''' <summary>
        ''' Gets or sets the Task association.
        ''' </summary>
        <System.Data.Linq.Mapping.Association(Name:="Task_TaskExtended", Storage:="_task", ThisKey:="TaskId", OtherKey:="Id", IsForeignKey:=true)> _
        <System.Runtime.Serialization.DataMember(Order:=7, EmitDefaultValue:=False)> _
        Public Property Task() As Task
            Get
                If (serializing AndAlso Not _task.HasLoadedOrAssignedValue) Then
                    Return Nothing
                Else
                    Return _task.Entity
                End If
            End Get
            Set(ByVal value As Task)
                Dim previousValue As Task = _task.Entity
                If ((Object.Equals(previousValue, value) = False) OrElse (Me._task.HasLoadedOrAssignedValue = False)) Then
                    SendPropertyChanging("Task")
                    If ((previousValue Is Nothing) = False) Then
                        _task.Entity = Nothing
                        previousValue.TaskExtended = Nothing
                    End If
                    _task.Entity = value
                    If ((value Is Nothing) = False) Then
                        value.TaskExtended = Me
                        _taskId = value.Id
                    Else
                        _taskId = Nothing
                    End If
                    SendPropertyChanged("Task")
                End If
            End Set
        End Property
#End Region

#Region "Extensibility Method Definitions"

        ''' <summary>Called by the Shared constructor to add shared rules.</summary>
        Partial Private Shared Sub AddSharedRules()
        End Sub
        ''' <summary>Called when this instance is loaded.</summary>
        Partial Private Sub OnLoaded()
        End Sub
        ''' <summary>Called when this instance is being saved.</summary>
        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub
        ''' <summary>Called when this instance is created.</summary>
        Partial Private Sub OnCreated()
        End Sub
        ''' <summary>Called when TaskId is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnTaskIdChanging(ByVal value As Integer)
        End Sub
        ''' <summary>Called after TaskId has Changed.</summary>
        Partial Private Sub OnTaskIdChanged()
        End Sub
        ''' <summary>Called when Browser is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnBrowserChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Browser has Changed.</summary>
        Partial Private Sub OnBrowserChanged()
        End Sub
        ''' <summary>Called when Os is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnOsChanging(ByVal value As String)
        End Sub
        ''' <summary>Called after Os has Changed.</summary>
        Partial Private Sub OnOsChanged()
        End Sub
        ''' <summary>Called when CreatedDate is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnCreatedDateChanging(ByVal value As Date)
        End Sub
        ''' <summary>Called after CreatedDate has Changed.</summary>
        Partial Private Sub OnCreatedDateChanged()
        End Sub
        ''' <summary>Called when ModifiedDate is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnModifiedDateChanging(ByVal value As Date)
        End Sub
        ''' <summary>Called after ModifiedDate has Changed.</summary>
        Partial Private Sub OnModifiedDateChanged()
        End Sub
        ''' <summary>Called when RowVersion is changing.</summary>
        ''' <param name="value">The new value.</param>
        Partial Private Sub OnRowVersionChanging(ByVal value As System.Data.Linq.Binary)
        End Sub
        ''' <summary>Called after RowVersion has Changed.</summary>
        Partial Private Sub OnRowVersionChanged()
        End Sub
#End Region

#Region "Serialization"

        Private serializing As Boolean

        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnSerializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = True
        End Sub

        ''' <summary>
        ''' Called when serializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnSerialized(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnSerialized(ByVal context As System.Runtime.Serialization.StreamingContext)
            serializing = False
        End Sub

        ''' <summary>
        ''' Called when deserializing.
        ''' </summary>
        ''' <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        <System.Runtime.Serialization.OnDeserializing(), _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)> _
        Public Sub OnDeserializing(ByVal context As System.Runtime.Serialization.StreamingContext)
            Initialize()
        End Sub
        
        ''' <summary>
        ''' Deserializes an instance of <see cref="TaskExtended"/> from XML.
        ''' </summary>
        ''' <param name="xml">The XML string representing a <see cref="TaskExtended"/> instance.</param>
        ''' <returns>An instance of <see cref="TaskExtended"/> that is deserialized from the XML string.</returns>
        Public Shared Function FromXml(ByVal xml As String) As TaskExtended
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(TaskExtended))
            
            Using sr = New System.IO.StringReader(xml)
                Using reader = System.Xml.XmlReader.Create(sr)
                    Return TryCast(deserializer.ReadObject(reader), TaskExtended)
                End Using
            End Using
        End Function

        ''' <summary>
        ''' Deserializes an instance of <see cref="TaskExtended"/>.
        ''' </summary>
        ''' <param name="buffer">The byte array representing a <see cref="TaskExtended"/> instance.</param>
        ''' <returns>An instance of <see cref="TaskExtended"/> that is deserialized from the byte array.</returns>
        Public Shared Function FromBinary(ByVal buffer As Byte()) As TaskExtended
            Dim deserializer = New System.Runtime.Serialization.DataContractSerializer(GetType(TaskExtended))

            Using ms = New System.IO.MemoryStream(buffer)
                Using reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max)
                    Return TryCast(deserializer.ReadObject(reader), TaskExtended)
                End Using
            End Using
        End Function
#End Region

#Region "Clone"
        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        Private Function ICloneable_Clone() As Object Implements ICloneable.Clone
            Dim serializer As New System.Runtime.Serialization.DataContractSerializer([GetType]())
            Using ms As New System.IO.MemoryStream()
                serializer.WriteObject(ms, Me)
                ms.Position = 0
                Return serializer.ReadObject(ms)
            End Using
        End Function

        ''' <summary>
        ''' Creates a new object that is a copy of the current instance.
        ''' </summary>
        ''' <returns>
        ''' A new object that is a copy of this instance.
        ''' </returns>
        ''' <remarks>
        ''' This method is equivalent to a Detach from the current <see cref="System.Data.Linq.DataContext"/>.
        ''' Only loaded EntityRef and EntitySet child accessions will be cloned.
        ''' </remarks>
        Public Function Clone() As TaskExtended
            Return DirectCast(DirectCast(Me, ICloneable).Clone(), TaskExtended)
        End Function
#End Region

#Region "Detach Methods"
        ''' <summary>
        ''' Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        ''' </summary>
        ''' <remarks>
        ''' Detaching the entity will allow it to be attached to another <see cref="System.Data.Linq.DataContext"/>.
        ''' </remarks>
        Public Overrides Sub Detach()

            If (Not IsAttached()) Then
                Return
            End If

            MyBase.Detach()
            _task = Detach(_task)
        End Sub
#End Region
    End Class
End Namespace

