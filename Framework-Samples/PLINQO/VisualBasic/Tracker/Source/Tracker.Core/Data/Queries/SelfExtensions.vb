'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Data.Linq
Imports System.Linq
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The query extension class for Self.
    ''' </summary>
    Public Module SelfExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal id As Integer) As Tracker.Core.Data.Self

            Dim entity As System.Data.Linq.Table(Of Tracker.Core.Data.Self) = CType(queryable, Table(Of Tracker.Core.Data.Self))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, Tracker.Core.Data.TrackerDataContext), id)
            End If

            Return queryable.FirstOrDefault(Function(s)s.Id = id)
        End Function

        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of Tracker.Core.Data.Self), ByVal id As Integer) As Integer
            Return table.Delete(Function(s)s.Id = id)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal id As Integer) As IQueryable(Of Tracker.Core.Data.Self)
            Return queryable.Where(Function(s)s.Id = id)
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal comparison As ComparisonOperator, ByVal id As Integer) As IQueryable(Of Tracker.Core.Data.Self)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(s) s.Id > id)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(s) s.Id >= id)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(s) s.Id < id)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(s) s.Id <= id)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(s) s.Id <> id)
                Case Else
                    Return queryable.Where(Function(s) s.Id = id)
            End Select
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal id As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.Self)
            Dim values = New List(Of Integer)()
            values.Add(id)

            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If

            If values.Count = 1 Then
                Return queryable.ById(values(0))
            End If

            Return queryable.ById(values)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of Tracker.Core.Data.Self)
                Return queryable.Where(Function(s) values.Contains(s.Id))
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="mySelfId">MySelfId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByMySelfId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal mySelfId As Nullable(Of Integer)) As IQueryable(Of Tracker.Core.Data.Self)
            Return queryable.Where(Function(s) Object.Equals(s.MySelfId, mySelfId))
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="mySelfId">MySelfId to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ByMySelfId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal comparison As ComparisonOperator, ByVal mySelfId As Nullable(Of Integer)) As IQueryable(Of Tracker.Core.Data.Self)
            If mySelfId Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("mySelfId", "Parameter 'mySelfId' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If

            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(s) s.MySelfId > mySelfId)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(s) s.MySelfId >= mySelfId)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(s) s.MySelfId < mySelfId)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(s) s.MySelfId <= mySelfId)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(s) Object.Equals(s.MySelfId, mySelfId) = False)
                Case Else
                    Return queryable.Where(Function(s) Object.Equals(s.MySelfId, mySelfId))
            End Select
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="mySelfId">MySelfId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ByMySelfId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal mySelfId As Nullable(Of Integer), ByVal ParamArray additionalValues As Nullable(Of Integer)()) As IQueryable(Of Tracker.Core.Data.Self)
            Dim values = New List(Of Nullable(Of Integer))()
            values.Add(mySelfId)

            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If

            If values.Count = 1 Then
                Return queryable.ByMySelfId(values(0))
            End If

            Return queryable.ByMySelfId(values)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ByMySelfId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal values As IEnumerable(Of Nullable(Of Integer))) As IQueryable(Of Tracker.Core.Data.Self)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Self, Boolean)("MySelfId", values)
                Return queryable.Where(expression)
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal name As String) As IQueryable(Of Tracker.Core.Data.Self)
            Return queryable.Where(Function(s)s.Name = name)
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal containment As ContainmentOperator, ByVal name As String) As IQueryable(Of Tracker.Core.Data.Self)
            If name Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
           
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(s) s.Name.Contains(name))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(s) s.Name.StartsWith(name))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(s) s.Name.EndsWith(name))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(s) s.Name.Contains(name) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(s) s.Name <> name)
                Case Else
                    Return queryable.Where(Function(s) s.Name = name)
            End Select
        End Function

        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="name">Name to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal name As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Self)
            Dim values = New List(Of String)()
            values.Add(name)

            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If

            If values.Count = 1 Then
                Return queryable.ByName(values(0))
            End If

            Return queryable.ByName(values)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Self"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
	<System.Runtime.CompilerServices.Extension()> _
        Public Function ByName(ByVal queryable As IQueryable(Of Tracker.Core.Data.Self), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.Self)
                Return queryable.Where(Function(s) values.Contains(s.Name))
        End Function


        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            <System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")> _
            Friend Shared ReadOnly GetByKey As Func(Of Tracker.Core.Data.TrackerDataContext, Integer, Tracker.Core.Data.Self) = _
                CompiledQuery.Compile( _
                    Function(db As Tracker.Core.Data.TrackerDataContext , ByVal id As Integer) _
                        db.Self.FirstOrDefault(Function(s)s.Id = id))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

