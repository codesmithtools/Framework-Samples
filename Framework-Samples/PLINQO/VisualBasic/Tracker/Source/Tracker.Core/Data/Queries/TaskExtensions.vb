
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The query extension class for Task.
    ''' </summary>
    Public Module TaskExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal id As Integer) As Tracker.Core.Data.Task

            Dim entity As System.Data.Linq.Table(Of Tracker.Core.Data.Task) = CType(queryable, Table(Of Tracker.Core.Data.Task))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, Tracker.Core.Data.TrackerDataContext), id)
            End If

            Return queryable.FirstOrDefault(Function(t)t.Id = id)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of Tracker.Core.Data.Task), ByVal id As Integer) As Integer
            Return table.Delete(Function(t)t.Id = id)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal id As Integer) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.Id = id)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal id As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Integer)()
            values.Add(id)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ById(values(0))
            End If
        
            Return queryable.ById(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of Tracker.Core.Data.Task)
                Return queryable.Where(Function(t) values.Contains(t.Id))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal id As Integer) As IQueryable(Of Tracker.Core.Data.Task)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.Id > id)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.Id >= id)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.Id < id)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.Id <= id)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) t.Id <> id)
                Case Else
                    Return queryable.Where(Function(t) t.Id = id)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal status As Tracker.Core.Data.Status) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.Status = status)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal status As Tracker.Core.Data.Status, ByVal ParamArray additionalValues As Tracker.Core.Data.Status()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Tracker.Core.Data.Status)()
            values.Add(status)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByStatus(values(0))
            End If
        
            Return queryable.ByStatus(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Tracker.Core.Data.Status)) As IQueryable(Of Tracker.Core.Data.Task)
                Return queryable.Where(Function(t) values.Contains(t.Status))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="status">Status to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStatus(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal status As Tracker.Core.Data.Status) As IQueryable(Of Tracker.Core.Data.Task)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.Status > status)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.Status >= status)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.Status < status)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.Status <= status)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) t.Status <> status)
                Case Else
                    Return queryable.Where(Function(t) t.Status = status)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="priority">Priority to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPriority(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal priority As Tracker.Core.Data.Priority?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.Priority, priority))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="priority">Priority to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPriority(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal priority As Tracker.Core.Data.Priority?, ByVal ParamArray additionalValues As Tracker.Core.Data.Priority?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Tracker.Core.Data.Priority?)()
            values.Add(priority)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByPriority(values(0))
            End If
        
            Return queryable.ByPriority(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPriority(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Tracker.Core.Data.Priority?)) As IQueryable(Of Tracker.Core.Data.Task)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("Priority", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="priority">Priority to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPriority(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal priority As Tracker.Core.Data.Priority?) As IQueryable(Of Tracker.Core.Data.Task)
            If priority Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("priority", "Parameter 'priority' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.Priority > priority)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.Priority >= priority)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.Priority < priority)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.Priority <= priority)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) Object.Equals(t.Priority, priority) = False)
                Case Else
                    Return queryable.Where(Function(t) Object.Equals(t.Priority, priority))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdId">CreatedId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal createdId As Integer) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.CreatedId = createdId)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdId">CreatedId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal createdId As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Integer)()
            values.Add(createdId)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCreatedId(values(0))
            End If
        
            Return queryable.ByCreatedId(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of Tracker.Core.Data.Task)
                Return queryable.Where(Function(t) values.Contains(t.CreatedId))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdId">CreatedId to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal createdId As Integer) As IQueryable(Of Tracker.Core.Data.Task)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.CreatedId > createdId)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.CreatedId >= createdId)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.CreatedId < createdId)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.CreatedId <= createdId)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) t.CreatedId <> createdId)
                Case Else
                    Return queryable.Where(Function(t) t.CreatedId = createdId)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="summary">Summary to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySummary(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal summary As String) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.Summary = summary)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="summary">Summary to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySummary(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal summary As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of String)()
            values.Add(summary)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.BySummary(values(0))
            End If
        
            Return queryable.BySummary(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySummary(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.Task)
                Return queryable.Where(Function(t) values.Contains(t.Summary))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="summary">Summary to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function BySummary(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal containment As ContainmentOperator, ByVal summary As String) As IQueryable(Of Tracker.Core.Data.Task)
            If summary Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("summary", "Parameter 'summary' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(t) t.Summary.Contains(summary))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(t) t.Summary.StartsWith(summary))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(t) t.Summary.EndsWith(summary))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(t) t.Summary.Contains(summary) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(t) t.Summary <> summary)
                Case Else
                    Return queryable.Where(Function(t) t.Summary = summary)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="details">Details to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDetails(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal details As String) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.Details, details))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="details">Details to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDetails(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal details As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of String)()
            values.Add(details)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByDetails(values(0))
            End If
        
            Return queryable.ByDetails(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDetails(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.Task)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("Details", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="details">Details to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDetails(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal containment As ContainmentOperator, ByVal details As String) As IQueryable(Of Tracker.Core.Data.Task)
            If details Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("details", "Parameter 'details' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(t) t.Details.Contains(details))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(t) t.Details.StartsWith(details))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(t) t.Details.EndsWith(details))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(t) t.Details.Contains(details) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(t) Object.Equals(t.Details, details) = False)
                Case Else
                    Return queryable.Where(Function(t) Object.Equals(t.Details, details))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="startDate">StartDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStartDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal startDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.StartDate, startDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="startDate">StartDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStartDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal startDate As Date?, ByVal ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Date?)()
            values.Add(startDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByStartDate(values(0))
            End If
        
            Return queryable.ByStartDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStartDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Date?)) As IQueryable(Of Tracker.Core.Data.Task)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("StartDate", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="startDate">StartDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByStartDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal startDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            If startDate Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("startDate", "Parameter 'startDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.StartDate > startDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.StartDate >= startDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.StartDate < startDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.StartDate <= startDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) Object.Equals(t.StartDate, startDate) = False)
                Case Else
                    Return queryable.Where(Function(t) Object.Equals(t.StartDate, startDate))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="dueDate">DueDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDueDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal dueDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.DueDate, dueDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="dueDate">DueDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDueDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal dueDate As Date?, ByVal ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Date?)()
            values.Add(dueDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByDueDate(values(0))
            End If
        
            Return queryable.ByDueDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDueDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Date?)) As IQueryable(Of Tracker.Core.Data.Task)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("DueDate", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="dueDate">DueDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByDueDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal dueDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            If dueDate Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("dueDate", "Parameter 'dueDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.DueDate > dueDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.DueDate >= dueDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.DueDate < dueDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.DueDate <= dueDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) Object.Equals(t.DueDate, dueDate) = False)
                Case Else
                    Return queryable.Where(Function(t) Object.Equals(t.DueDate, dueDate))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="completeDate">CompleteDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCompleteDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal completeDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.CompleteDate, completeDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="completeDate">CompleteDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCompleteDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal completeDate As Date?, ByVal ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Date?)()
            values.Add(completeDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCompleteDate(values(0))
            End If
        
            Return queryable.ByCompleteDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCompleteDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Date?)) As IQueryable(Of Tracker.Core.Data.Task)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("CompleteDate", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="completeDate">CompleteDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCompleteDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal completeDate As Date?) As IQueryable(Of Tracker.Core.Data.Task)
            If completeDate Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("completeDate", "Parameter 'completeDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.CompleteDate > completeDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.CompleteDate >= completeDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.CompleteDate < completeDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.CompleteDate <= completeDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) Object.Equals(t.CompleteDate, completeDate) = False)
                Case Else
                    Return queryable.Where(Function(t) Object.Equals(t.CompleteDate, completeDate))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="assignedId">AssignedId to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAssignedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal assignedId As Integer?) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.AssignedId, assignedId))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="assignedId">AssignedId to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAssignedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal assignedId As Integer?, ByVal ParamArray additionalValues As Integer?()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Integer?)()
            values.Add(assignedId)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAssignedId(values(0))
            End If
        
            Return queryable.ByAssignedId(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAssignedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Integer?)) As IQueryable(Of Tracker.Core.Data.Task)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("AssignedId", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="assignedId">AssignedId to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAssignedId(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal assignedId As Integer?) As IQueryable(Of Tracker.Core.Data.Task)
            If assignedId Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("assignedId", "Parameter 'assignedId' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.AssignedId > assignedId)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.AssignedId >= assignedId)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.AssignedId < assignedId)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.AssignedId <= assignedId)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) Object.Equals(t.AssignedId, assignedId) = False)
                Case Else
                    Return queryable.Where(Function(t) Object.Equals(t.AssignedId, assignedId))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal createdDate As Date) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.CreatedDate = createdDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal createdDate As Date, ByVal ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Date)()
            values.Add(createdDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCreatedDate(values(0))
            End If
        
            Return queryable.ByCreatedDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Date)) As IQueryable(Of Tracker.Core.Data.Task)
                Return queryable.Where(Function(t) values.Contains(t.CreatedDate))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal createdDate As Date) As IQueryable(Of Tracker.Core.Data.Task)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.CreatedDate > createdDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.CreatedDate >= createdDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.CreatedDate < createdDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.CreatedDate <= createdDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) t.CreatedDate <> createdDate)
                Case Else
                    Return queryable.Where(Function(t) t.CreatedDate = createdDate)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal modifiedDate As Date) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t)t.ModifiedDate = modifiedDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal modifiedDate As Date, ByVal ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of Date)()
            values.Add(modifiedDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByModifiedDate(values(0))
            End If
        
            Return queryable.ByModifiedDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of Date)) As IQueryable(Of Tracker.Core.Data.Task)
                Return queryable.Where(Function(t) values.Contains(t.ModifiedDate))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal comparison As ComparisonOperator, ByVal modifiedDate As Date) As IQueryable(Of Tracker.Core.Data.Task)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(t) t.ModifiedDate > modifiedDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(t) t.ModifiedDate >= modifiedDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(t) t.ModifiedDate < modifiedDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(t) t.ModifiedDate <= modifiedDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(t) t.ModifiedDate <> modifiedDate)
                Case Else
                    Return queryable.Where(Function(t) t.ModifiedDate = modifiedDate)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastModifiedBy(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal lastModifiedBy As String) As IQueryable(Of Tracker.Core.Data.Task)
            Return queryable.Where(Function(t) Object.Equals(t.LastModifiedBy, lastModifiedBy))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastModifiedBy(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal lastModifiedBy As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.Task)
            Dim values = New List(Of String)()
            values.Add(lastModifiedBy)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastModifiedBy(values(0))
            End If
        
            Return queryable.ByLastModifiedBy(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastModifiedBy(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.Task)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.Task, Boolean)("LastModifiedBy", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.Task"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastModifiedBy">LastModifiedBy to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastModifiedBy(ByVal queryable As IQueryable(Of Tracker.Core.Data.Task), ByVal containment As ContainmentOperator, ByVal lastModifiedBy As String) As IQueryable(Of Tracker.Core.Data.Task)
            If lastModifiedBy Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("lastModifiedBy", "Parameter 'lastModifiedBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(t) t.LastModifiedBy.Contains(lastModifiedBy))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(t) t.LastModifiedBy.StartsWith(lastModifiedBy))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(t) t.LastModifiedBy.EndsWith(lastModifiedBy))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(t) t.LastModifiedBy.Contains(lastModifiedBy) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(t) Object.Equals(t.LastModifiedBy, lastModifiedBy) = False)
                Case Else
                    Return queryable.Where(Function(t) Object.Equals(t.LastModifiedBy, lastModifiedBy))
            End Select
        End Function
        

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of TrackerDataContext, Integer, Tracker.Core.Data.Task) = _
                CompiledQuery.Compile( _
                    Function(db As TrackerDataContext , ByVal id As Integer) _
                        db.Task.FirstOrDefault(Function(t)t.Id = id))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

