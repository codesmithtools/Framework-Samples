
'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a CodeSmith Template.
'
'     DO NOT MODIFY contents of this file. Changes to this
'     file will be lost if the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Linq
Imports System.Linq
Imports System.Runtime.CompilerServices
Imports CodeSmith.Data.Linq
Imports CodeSmith.Data.Linq.Dynamic

Namespace Tracker.Core.Data
    ''' <summary>
    ''' The query extension class for User.
    ''' </summary>
    Public Module UserExtensions
        ''' <summary>
        ''' Gets an instance by the primary key.
        ''' </summary>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByKey(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal id As Integer) As Tracker.Core.Data.User

            Dim entity As System.Data.Linq.Table(Of Tracker.Core.Data.User) = CType(queryable, Table(Of Tracker.Core.Data.User))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByKey.Invoke(DirectCast(entity.Context, Tracker.Core.Data.TrackerDataContext), id)
            End If

            Return queryable.FirstOrDefault(Function(u)u.Id = id)
        End Function
        
        ''' <summary>
        ''' Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        ''' </summary>
        ''' <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        ''' <returns>The number of rows deleted from the database.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function Delete(ByVal table As System.Data.Linq.Table(Of Tracker.Core.Data.User), ByVal id As Integer) As Integer
            Return table.Delete(Function(u)u.Id = id)
        End Function

        ''' <summary>
        ''' Gets an instance by using a unique index.
        ''' </summary>
        ''' <returns>An instance of the entity or null if not found.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function GetByEmailAddress(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal emailAddress As String) As Tracker.Core.Data.User

            Dim entity As Table(Of Tracker.Core.Data.User) = CType(queryable, Table(Of Tracker.Core.Data.User))
            If (entity IsNot Nothing AndAlso entity.Context.LoadOptions Is Nothing) Then
                Return Query.GetByEmailAddress.Invoke(DirectCast(entity.Context,Tracker.Core.Data.TrackerDataContext), emailAddress)
            End If

            Return queryable.FirstOrDefault(Function(u)u.EmailAddress = emailAddress)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal id As Integer) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.Id = id)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal id As Integer, ByVal ParamArray additionalValues As Integer()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of Integer)()
            values.Add(id)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ById(values(0))
            End If
        
            Return queryable.ById(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of Integer)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.Id))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="id">Id to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ById(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comparison As ComparisonOperator, ByVal id As Integer) As IQueryable(Of Tracker.Core.Data.User)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(u) u.Id > id)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(u) u.Id >= id)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(u) u.Id < id)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(u) u.Id <= id)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(u) u.Id <> id)
                Case Else
                    Return queryable.Where(Function(u) u.Id = id)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="emailAddress">EmailAddress to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmailAddress(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal emailAddress As String) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.EmailAddress = emailAddress)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="emailAddress">EmailAddress to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmailAddress(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal emailAddress As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of String)()
            values.Add(emailAddress)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByEmailAddress(values(0))
            End If
        
            Return queryable.ByEmailAddress(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmailAddress(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.EmailAddress))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="emailAddress">EmailAddress to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByEmailAddress(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal containment As ContainmentOperator, ByVal emailAddress As String) As IQueryable(Of Tracker.Core.Data.User)
            If emailAddress Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("emailAddress", "Parameter 'emailAddress' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(u) u.EmailAddress.Contains(emailAddress))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(u) u.EmailAddress.StartsWith(emailAddress))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(u) u.EmailAddress.EndsWith(emailAddress))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(u) u.EmailAddress.Contains(emailAddress) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(u) u.EmailAddress <> emailAddress)
                Case Else
                    Return queryable.Where(Function(u) u.EmailAddress = emailAddress)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal firstName As String) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u) Object.Equals(u.FirstName, firstName))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal firstName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of String)()
            values.Add(firstName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByFirstName(values(0))
            End If
        
            Return queryable.ByFirstName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.User)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.User, Boolean)("FirstName", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="firstName">FirstName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByFirstName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal containment As ContainmentOperator, ByVal firstName As String) As IQueryable(Of Tracker.Core.Data.User)
            If firstName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(u) u.FirstName.Contains(firstName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(u) u.FirstName.StartsWith(firstName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(u) u.FirstName.EndsWith(firstName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(u) u.FirstName.Contains(firstName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(u) Object.Equals(u.FirstName, firstName) = False)
                Case Else
                    Return queryable.Where(Function(u) Object.Equals(u.FirstName, firstName))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastName As String) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u) Object.Equals(u.LastName, lastName))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastName As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of String)()
            values.Add(lastName)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastName(values(0))
            End If
        
            Return queryable.ByLastName(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.User)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.User, Boolean)("LastName", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastName">LastName to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastName(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal containment As ContainmentOperator, ByVal lastName As String) As IQueryable(Of Tracker.Core.Data.User)
            If lastName Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(u) u.LastName.Contains(lastName))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(u) u.LastName.StartsWith(lastName))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(u) u.LastName.EndsWith(lastName))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(u) u.LastName.Contains(lastName) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(u) Object.Equals(u.LastName, lastName) = False)
                Case Else
                    Return queryable.Where(Function(u) Object.Equals(u.LastName, lastName))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal createdDate As Date) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.CreatedDate = createdDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal createdDate As Date, ByVal ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of Date)()
            values.Add(createdDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByCreatedDate(values(0))
            End If
        
            Return queryable.ByCreatedDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of Date)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.CreatedDate))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="createdDate">CreatedDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByCreatedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comparison As ComparisonOperator, ByVal createdDate As Date) As IQueryable(Of Tracker.Core.Data.User)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(u) u.CreatedDate > createdDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(u) u.CreatedDate >= createdDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(u) u.CreatedDate < createdDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(u) u.CreatedDate <= createdDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(u) u.CreatedDate <> createdDate)
                Case Else
                    Return queryable.Where(Function(u) u.CreatedDate = createdDate)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal modifiedDate As Date) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.ModifiedDate = modifiedDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal modifiedDate As Date, ByVal ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of Date)()
            values.Add(modifiedDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByModifiedDate(values(0))
            End If
        
            Return queryable.ByModifiedDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of Date)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.ModifiedDate))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="modifiedDate">ModifiedDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByModifiedDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comparison As ComparisonOperator, ByVal modifiedDate As Date) As IQueryable(Of Tracker.Core.Data.User)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(u) u.ModifiedDate > modifiedDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(u) u.ModifiedDate >= modifiedDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(u) u.ModifiedDate < modifiedDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(u) u.ModifiedDate <= modifiedDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(u) u.ModifiedDate <> modifiedDate)
                Case Else
                    Return queryable.Where(Function(u) u.ModifiedDate = modifiedDate)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="passwordHash">PasswordHash to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordHash(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal passwordHash As String) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.PasswordHash = passwordHash)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="passwordHash">PasswordHash to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordHash(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal passwordHash As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of String)()
            values.Add(passwordHash)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByPasswordHash(values(0))
            End If
        
            Return queryable.ByPasswordHash(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordHash(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.PasswordHash))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="passwordHash">PasswordHash to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordHash(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal containment As ContainmentOperator, ByVal passwordHash As String) As IQueryable(Of Tracker.Core.Data.User)
            If passwordHash Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("passwordHash", "Parameter 'passwordHash' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(u) u.PasswordHash.Contains(passwordHash))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(u) u.PasswordHash.StartsWith(passwordHash))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(u) u.PasswordHash.EndsWith(passwordHash))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(u) u.PasswordHash.Contains(passwordHash) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(u) u.PasswordHash <> passwordHash)
                Case Else
                    Return queryable.Where(Function(u) u.PasswordHash = passwordHash)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="passwordSalt">PasswordSalt to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordSalt(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal passwordSalt As String) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.PasswordSalt = passwordSalt)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="passwordSalt">PasswordSalt to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordSalt(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal passwordSalt As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of String)()
            values.Add(passwordSalt)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByPasswordSalt(values(0))
            End If
        
            Return queryable.ByPasswordSalt(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordSalt(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.PasswordSalt))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="passwordSalt">PasswordSalt to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByPasswordSalt(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal containment As ContainmentOperator, ByVal passwordSalt As String) As IQueryable(Of Tracker.Core.Data.User)
            If passwordSalt Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("passwordSalt", "Parameter 'passwordSalt' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(u) u.PasswordSalt.Contains(passwordSalt))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(u) u.PasswordSalt.StartsWith(passwordSalt))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(u) u.PasswordSalt.EndsWith(passwordSalt))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(u) u.PasswordSalt.Contains(passwordSalt) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(u) u.PasswordSalt <> passwordSalt)
                Case Else
                    Return queryable.Where(Function(u) u.PasswordSalt = passwordSalt)
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="comment">Comment to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByComment(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comment As String) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u) Object.Equals(u.Comment, comment))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="comment">Comment to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByComment(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comment As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of String)()
            values.Add(comment)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByComment(values(0))
            End If
        
            Return queryable.ByComment(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByComment(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.User)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.User, Boolean)("Comment", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="comment">Comment to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByComment(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal containment As ContainmentOperator, ByVal comment As String) As IQueryable(Of Tracker.Core.Data.User)
            If comment Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("comment", "Parameter 'comment' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(u) u.Comment.Contains(comment))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(u) u.Comment.StartsWith(comment))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(u) u.Comment.EndsWith(comment))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(u) u.Comment.Contains(comment) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(u) Object.Equals(u.Comment, comment) = False)
                Case Else
                    Return queryable.Where(Function(u) Object.Equals(u.Comment, comment))
            End Select
        End Function
        

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="isApproved">IsApproved to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsApproved(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal isApproved As Boolean) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.IsApproved = isApproved)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="isApproved">IsApproved to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsApproved(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal isApproved As Boolean, ByVal ParamArray additionalValues As Boolean()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of Boolean)()
            values.Add(isApproved)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByIsApproved(values(0))
            End If
        
            Return queryable.ByIsApproved(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsApproved(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of Boolean)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.IsApproved))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="isApproved">IsApproved to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByIsApproved(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comparison As ComparisonOperator, ByVal isApproved As Boolean) As IQueryable(Of Tracker.Core.Data.User)
            Select Case comparison
                Case ComparisonOperator.GreaterThan, ComparisonOperator.GreaterThanOrEquals, ComparisonOperator.LessThan, ComparisonOperator.LessThanOrEquals
                    Throw New ArgumentException("Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Boolean type.", "comparison")
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(u) u.IsApproved <> isApproved)
                Case Else
                    Return queryable.Where(Function(u) u.IsApproved = isApproved)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastLoginDate">LastLoginDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastLoginDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastLoginDate As Date?) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u) Object.Equals(u.LastLoginDate, lastLoginDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastLoginDate">LastLoginDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastLoginDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastLoginDate As Date?, ByVal ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of Date?)()
            values.Add(lastLoginDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastLoginDate(values(0))
            End If
        
            Return queryable.ByLastLoginDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastLoginDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of Date?)) As IQueryable(Of Tracker.Core.Data.User)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.User, Boolean)("LastLoginDate", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastLoginDate">LastLoginDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastLoginDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comparison As ComparisonOperator, ByVal lastLoginDate As Date?) As IQueryable(Of Tracker.Core.Data.User)
            If lastLoginDate Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("lastLoginDate", "Parameter 'lastLoginDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(u) u.LastLoginDate > lastLoginDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(u) u.LastLoginDate >= lastLoginDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(u) u.LastLoginDate < lastLoginDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(u) u.LastLoginDate <= lastLoginDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(u) Object.Equals(u.LastLoginDate, lastLoginDate) = False)
                Case Else
                    Return queryable.Where(Function(u) Object.Equals(u.LastLoginDate, lastLoginDate))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastActivityDate">LastActivityDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastActivityDate As Date) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u)u.LastActivityDate = lastActivityDate)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastActivityDate">LastActivityDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastActivityDate As Date, ByVal ParamArray additionalValues As Date()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of Date)()
            values.Add(lastActivityDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastActivityDate(values(0))
            End If
        
            Return queryable.ByLastActivityDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of Date)) As IQueryable(Of Tracker.Core.Data.User)
                Return queryable.Where(Function(u) values.Contains(u.LastActivityDate))
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastActivityDate">LastActivityDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastActivityDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comparison As ComparisonOperator, ByVal lastActivityDate As Date) As IQueryable(Of Tracker.Core.Data.User)
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(u) u.LastActivityDate > lastActivityDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(u) u.LastActivityDate >= lastActivityDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(u) u.LastActivityDate < lastActivityDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(u) u.LastActivityDate <= lastActivityDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(u) u.LastActivityDate <> lastActivityDate)
                Case Else
                    Return queryable.Where(Function(u) u.LastActivityDate = lastActivityDate)
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastPasswordChangeDate">LastPasswordChangeDate to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastPasswordChangeDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastPasswordChangeDate As Date?) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u) Object.Equals(u.LastPasswordChangeDate, lastPasswordChangeDate))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastPasswordChangeDate">LastPasswordChangeDate to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastPasswordChangeDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal lastPasswordChangeDate As Date?, ByVal ParamArray additionalValues As Date?()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of Date?)()
            values.Add(lastPasswordChangeDate)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByLastPasswordChangeDate(values(0))
            End If
        
            Return queryable.ByLastPasswordChangeDate(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastPasswordChangeDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of Date?)) As IQueryable(Of Tracker.Core.Data.User)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.User, Boolean)("LastPasswordChangeDate", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="lastPasswordChangeDate">LastPasswordChangeDate to search for.</param>
        ''' <param name="comparison">The comparison operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByLastPasswordChangeDate(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal comparison As ComparisonOperator, ByVal lastPasswordChangeDate As Date?) As IQueryable(Of Tracker.Core.Data.User)
            If lastPasswordChangeDate Is Nothing AndAlso comparison <> ComparisonOperator.Equals AndAlso comparison <> ComparisonOperator.NotEquals Then
                Throw New ArgumentNullException("lastPasswordChangeDate", "Parameter 'lastPasswordChangeDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparison' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.")
            End If
            
            Select Case comparison
                Case ComparisonOperator.GreaterThan
                    Return queryable.Where(Function(u) u.LastPasswordChangeDate > lastPasswordChangeDate)
                Case ComparisonOperator.GreaterThanOrEquals
                    Return queryable.Where(Function(u) u.LastPasswordChangeDate >= lastPasswordChangeDate)
                Case ComparisonOperator.LessThan
                    Return queryable.Where(Function(u) u.LastPasswordChangeDate < lastPasswordChangeDate)
                Case ComparisonOperator.LessThanOrEquals
                    Return queryable.Where(Function(u) u.LastPasswordChangeDate <= lastPasswordChangeDate)
                Case ComparisonOperator.NotEquals
                    Return queryable.Where(Function(u) Object.Equals(u.LastPasswordChangeDate, lastPasswordChangeDate) = False)
                Case Else
                    Return queryable.Where(Function(u) Object.Equals(u.LastPasswordChangeDate, lastPasswordChangeDate))
            End Select
        End Function


        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="avatarType">AvatarType to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAvatarType(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal avatarType As String) As IQueryable(Of Tracker.Core.Data.User)
            Return queryable.Where(Function(u) Object.Equals(u.AvatarType, avatarType))
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="avatarType">AvatarType to search for.</param>
        ''' <param name="additionalValues">Additional values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAvatarType(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal avatarType As String, ByVal ParamArray additionalValues As String()) As IQueryable(Of Tracker.Core.Data.User)
            Dim values = New List(Of String)()
            values.Add(avatarType)
        
            If additionalValues IsNot Nothing Then
                values.AddRange(additionalValues)
            Else
                values.Add(Nothing)
            End If
        
            If values.Count = 1 Then
                Return queryable.ByAvatarType(values(0))
            End If
        
            Return queryable.ByAvatarType(values)
        End Function
        
        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="values">The values to search for.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAvatarType(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal values As IEnumerable(Of String)) As IQueryable(Of Tracker.Core.Data.User)
                ' creating dynmic expression to support nulls
                Dim expression = DynamicExpression.BuildExpression(Of Tracker.Core.Data.User, Boolean)("AvatarType", values)
                Return queryable.Where(expression)
        End Function

        ''' <summary>
        ''' Gets a query for <see cref="Tracker.Core.Data.User"/>.
        ''' </summary>
        ''' <param name="queryable">Query to append where clause.</param>
        ''' <param name="avatarType">AvatarType to search for.</param>
        ''' <param name="containment">The containment operator.</param>
        ''' <returns>IQueryable with additional where clause.</returns>
        <System.Runtime.CompilerServices.Extension()> _
        Public Function ByAvatarType(ByVal queryable As IQueryable(Of Tracker.Core.Data.User), ByVal containment As ContainmentOperator, ByVal avatarType As String) As IQueryable(Of Tracker.Core.Data.User)
            If avatarType Is Nothing AndAlso containment <> ContainmentOperator.Equals AndAlso containment <> ContainmentOperator.NotEquals Then
                Throw New ArgumentNullException("avatarType", "Parameter 'avatarType' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.")
            End If
            
            Select Case containment
                Case ContainmentOperator.Contains
                    Return queryable.Where(Function(u) u.AvatarType.Contains(avatarType))
                Case ContainmentOperator.StartsWith
                    Return queryable.Where(Function(u) u.AvatarType.StartsWith(avatarType))
                Case ContainmentOperator.EndsWith
                    Return queryable.Where(Function(u) u.AvatarType.EndsWith(avatarType))
                Case ContainmentOperator.NotContains
                    Return queryable.Where(Function(u) u.AvatarType.Contains(avatarType) = False)
                Case ContainmentOperator.NotEquals
                    Return queryable.Where(Function(u) Object.Equals(u.AvatarType, avatarType) = False)
                Case Else
                    Return queryable.Where(Function(u) Object.Equals(u.AvatarType, avatarType))
            End Select
        End Function
        

        'Insert User Defined Extensions here.
        'Anything outside of this Region will be lost at regeneration
        #Region "User Extensions"


        #End Region

        #Region "Query"
        ''' <summary>
        ''' A private class for lazy loading static compiled queries.
        ''' </summary>
        Private Partial Class Query


            Friend Shared ReadOnly GetByKey As Func(Of TrackerDataContext, Integer, Tracker.Core.Data.User) = _
                CompiledQuery.Compile( _
                    Function(db As TrackerDataContext , ByVal id As Integer) _
                        db.User.FirstOrDefault(Function(u)u.Id = id))

            Friend Shared ReadOnly GetByEmailAddress As Func(Of TrackerDataContext, String, Tracker.Core.Data.User) = _
                CompiledQuery.Compile( _
                    Function(db As TrackerDataContext , ByVal emailAddress As String) _
                        db.User.FirstOrDefault(Function(u)u.EmailAddress = emailAddress))

            ' Add your compiled queries here.
            'Anything outside of this Region will be lost at regeneration
            #Region "User Queries"

            #End Region

        End Class
        #End Region
    End Module
End Namespace

